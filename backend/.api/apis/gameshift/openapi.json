{
  "openapi": "3.0.0",
  "paths": {
    "/nx/currencies/import": {
      "post": {
        "operationId": "ProjectTokenController_import",
        "summary": "Import Currency",
        "description": "### Adds a new `Currency` to be tracked in the game's user wallets",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mintAddress": {
                    "type": "string",
                    "description": "The address for the currency's SPL token mint"
                  }
                },
                "required": [
                  "mintAddress"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the currency"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The address for the currency's SPL token mint"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the currency"
                    },
                    "symbol": {
                      "type": "string",
                      "description": "The currency's symbol"
                    }
                  },
                  "required": [
                    "id",
                    "mintAddress",
                    "name",
                    "symbol"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Currencies"
        ]
      }
    },
    "/nx/currencies/{itemId}/refresh": {
      "post": {
        "operationId": "ProjectTokenController_refreshMetadata",
        "summary": "Refresh Currency",
        "description": "### Updates Metadata of an imported Currency.\n      \nRefreshes the metadata of a Currency based on the on-chain data.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Currency to refresh",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the currency"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The address for the currency's SPL token mint"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the currency"
                    },
                    "symbol": {
                      "type": "string",
                      "description": "The currency's symbol"
                    }
                  },
                  "required": [
                    "id",
                    "mintAddress",
                    "name",
                    "symbol"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Currencies"
        ]
      }
    },
    "/nx/currencies/{itemId}/un-import": {
      "post": {
        "operationId": "ProjectTokenController_unimport",
        "summary": "Un-Import Currency",
        "description": "### Removes an imported Currency.\n      \nUn-importing a Currency will not remove any quantity of the currency\n      from any on-chain wallets. However, it *will* remove the currency from GameShift.\n      As a result, the currency will not longer appear in any queries. Furthermore,\n      it will prevent you from being able to use GameShift to initiate any\n      currency transfers.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Currency to un-import",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the currency"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The address for the currency's SPL token mint"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the currency"
                    },
                    "symbol": {
                      "type": "string",
                      "description": "The currency's symbol"
                    }
                  },
                  "required": [
                    "id",
                    "mintAddress",
                    "name",
                    "symbol"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Currencies"
        ]
      }
    },
    "/nx/users": {
      "get": {
        "operationId": "ProjectUserController_getAll",
        "summary": "Fetch All Users",
        "description": "### Returns all Users registered in the game.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of users",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "referenceId": {
                            "type": "string",
                            "description": "The reference id of the user"
                          },
                          "email": {
                            "type": "string",
                            "description": "The email of the user"
                          }
                        },
                        "required": [
                          "referenceId",
                          "email"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "ProjectUserController_create",
        "summary": "Register User",
        "description": "### Registers a new User with your Game.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "referenceId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The reference id of the user. Must be unique, and cannot contain the character \"/\"."
                  },
                  "email": {
                    "type": "string",
                    "description": "User's email address."
                  },
                  "externalWalletAddress": {
                    "type": "string",
                    "description": "`User`'s wallet address. Signing transactions will require use of a wallet like Phantom or Backpack."
                  }
                },
                "required": [
                  "referenceId",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "referenceId": {
                      "type": "string",
                      "description": "The reference id of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the user"
                    }
                  },
                  "required": [
                    "referenceId",
                    "email"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}": {
      "get": {
        "operationId": "ProjectUserController_get",
        "summary": "Fetch User",
        "description": "### Returns User details.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "referenceId": {
                      "type": "string",
                      "description": "The reference id of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the user"
                    }
                  },
                  "required": [
                    "referenceId",
                    "email"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/wallet-address": {
      "get": {
        "operationId": "ProjectUserController_getWalletAddress",
        "summary": "Fetch User Wallet Address",
        "description": "### Returns User's wallet address.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "description": "The wallet address of the user"
                    },
                    "walletProvider": {
                      "type": "string",
                      "description": "The type of the wallet"
                    }
                  },
                  "required": [
                    "address",
                    "walletProvider"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/items": {
      "get": {
        "operationId": "ProjectUserController_getUserItems",
        "summary": "Fetch User Items",
        "description": "### Returns a paginated list of all the Items owned by a User registered with your game.\n      \nWill also return all Currencies registered in the game, even if the User does not possess any quantity of them.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "types",
            "required": false,
            "in": "query",
            "description": "A list of Item types to return.",
            "example": "Currency, UniqueAsset, StackableAsset",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "forSale",
            "required": false,
            "in": "query",
            "description": "Only return Items that are listed for sale. This is automatically exclude any Items that cannot be listed on the marketplace, i.e. Currencies.",
            "example": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "required": false,
            "in": "query",
            "description": "Only return Items that belong to this collection. Will not return Item types that cannot have a collection (such as Currencies).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "A list of items",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "Currency"
                                ],
                                "description": "Indicates that this `Item` is a `Currency`",
                                "title": "Currency",
                                "example": "Currency"
                              },
                              "item": {
                                "description": "The currency",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID for the currency"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address for the currency's SPL token mint"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the currency"
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The currency's symbol"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "mintAddress",
                                      "name",
                                      "symbol"
                                    ]
                                  }
                                ]
                              },
                              "quantity": {
                                "type": "string",
                                "description": "Amount of the currency being held"
                              }
                            },
                            "required": [
                              "type",
                              "item",
                              "quantity"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "UniqueAsset"
                                ],
                                "description": "Indicates that this `Item` is an `UniqueAsset`",
                                "title": "UniqueAsset",
                                "example": "UniqueAsset"
                              },
                              "item": {
                                "description": "The unique asset",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Asset"
                                      },
                                      "attributes": {
                                        "description": "The attributes of the Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Asset"
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "The description provided when the Asset was created"
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imported": {
                                        "type": "boolean",
                                        "description": "Indicates if the asset belongs to an imported collection"
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "The URI for the image representing the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "forSale": {
                                        "type": "boolean",
                                        "description": "Indicates if the asset is currently for sale"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      },
                                      "owner": {
                                        "description": "The current owner of the Asset.",
                                        "nullable": true,
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "The wallet that currently holds this asset",
                                                "nullable": true
                                              },
                                              "referenceId": {
                                                "type": "string",
                                                "description": "The reference id associated with the wallet",
                                                "nullable": true
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "price": {
                                        "nullable": true,
                                        "type": "object",
                                        "description": "The price of the asset on the marketplace"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imported",
                                      "imageUrl",
                                      "status",
                                      "forSale",
                                      "mintAddress"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "item"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "StackableAsset"
                                ],
                                "description": "Indicates that this `Item` is a `Stackable Asset`",
                                "title": "StackableAsset",
                                "example": "StackableAsset"
                              },
                              "item": {
                                "description": "The stackable asset",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Stackable Asset"
                                      },
                                      "attributes": {
                                        "description": "Add attributes to your Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Stackable Asset. Max length: 32 chars",
                                        "maxLength": 32
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                        "maxLength": 5
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "A description for the Asset",
                                        "maxLength": 64
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "A url to the image underlying the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imageUrl",
                                      "status"
                                    ]
                                  }
                                ]
                              },
                              "quantity": {
                                "type": "string",
                                "description": "Amount of the stackable asset"
                              }
                            },
                            "required": [
                              "type",
                              "item",
                              "quantity"
                            ]
                          }
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/items/{itemId}": {
      "get": {
        "operationId": "ProjectUserController_getItem",
        "summary": "Fetch User Item",
        "description": "### Fetches an Item belonging to a User.\n      \nIf the item is not a Unique Asset, the response will include the\n      quantity of the item in the user's possession.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Item.",
            "schema": {}
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Currency"
                          ],
                          "description": "Indicates that this `Item` is a `Currency`",
                          "title": "Currency",
                          "example": "Currency"
                        },
                        "item": {
                          "description": "The currency",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID for the currency"
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address for the currency's SPL token mint"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the currency"
                                },
                                "symbol": {
                                  "type": "string",
                                  "description": "The currency's symbol"
                                }
                              },
                              "required": [
                                "id",
                                "mintAddress",
                                "name",
                                "symbol"
                              ]
                            }
                          ]
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Amount of the currency being held"
                        }
                      },
                      "required": [
                        "type",
                        "item",
                        "quantity"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "UniqueAsset"
                          ],
                          "description": "Indicates that this `Item` is an `UniqueAsset`",
                          "title": "UniqueAsset",
                          "example": "UniqueAsset"
                        },
                        "item": {
                          "description": "The unique asset",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the Asset"
                                },
                                "attributes": {
                                  "description": "The attributes of the Asset",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "traitType": {
                                        "type": "string",
                                        "description": "The name of the trait"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "The value of the trait"
                                      }
                                    },
                                    "required": [
                                      "traitType",
                                      "value"
                                    ]
                                  }
                                },
                                "created": {
                                  "type": "number",
                                  "description": "The date the Asset was created"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the Asset"
                                },
                                "collection": {
                                  "description": "The collection the Asset belongs to",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name given to the collection"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "The description given to the collection"
                                        },
                                        "environment": {
                                          "type": "string",
                                          "description": "The collection's environment",
                                          "enum": [
                                            "Development",
                                            "Production"
                                          ]
                                        },
                                        "imageUrl": {
                                          "type": "string",
                                          "description": "The url of the image used to represent the collection",
                                          "nullable": true
                                        },
                                        "imported": {
                                          "type": "boolean",
                                          "description": "Whether the collection was imported"
                                        },
                                        "mintAddress": {
                                          "type": "string",
                                          "description": "The mint address of the collection on-chain",
                                          "nullable": true
                                        },
                                        "created": {
                                          "type": "number",
                                          "description": "Timestamp of collection creation"
                                        },
                                        "stats": {
                                          "description": "Statistics about the collection",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "numMinted": {
                                                  "type": "number",
                                                  "description": "The number of assets minted for this collection"
                                                },
                                                "floorPrice": {
                                                  "type": "number",
                                                  "description": "The floor price of the collection"
                                                },
                                                "numListed": {
                                                  "type": "number",
                                                  "description": "The number of assets listed for this collection"
                                                },
                                                "numOwners": {
                                                  "type": "number",
                                                  "description": "The number of unique owners of assets in this collection"
                                                }
                                              },
                                              "required": [
                                                "numMinted",
                                                "floorPrice",
                                                "numListed",
                                                "numOwners"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "description",
                                        "environment",
                                        "imported",
                                        "created"
                                      ]
                                    }
                                  ]
                                },
                                "description": {
                                  "type": "string",
                                  "description": "The description provided when the Asset was created"
                                },
                                "environment": {
                                  "type": "string",
                                  "description": "The asset's environment",
                                  "enum": [
                                    "Development",
                                    "Production"
                                  ]
                                },
                                "imported": {
                                  "type": "boolean",
                                  "description": "Indicates if the asset belongs to an imported collection"
                                },
                                "imageUrl": {
                                  "type": "string",
                                  "description": "The URI for the image representing the Asset"
                                },
                                "status": {
                                  "type": "string",
                                  "description": "The current status of the Asset",
                                  "enum": [
                                    "Uninitiated",
                                    "Unprocessed",
                                    "Processing",
                                    "Committed",
                                    "Failed"
                                  ]
                                },
                                "forSale": {
                                  "type": "boolean",
                                  "description": "Indicates if the asset is currently for sale"
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address of the Asset on the blockchain"
                                },
                                "owner": {
                                  "description": "The current owner of the Asset.",
                                  "nullable": true,
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "The wallet that currently holds this asset",
                                          "nullable": true
                                        },
                                        "referenceId": {
                                          "type": "string",
                                          "description": "The reference id associated with the wallet",
                                          "nullable": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                "price": {
                                  "nullable": true,
                                  "type": "object",
                                  "description": "The price of the asset on the marketplace"
                                }
                              },
                              "required": [
                                "id",
                                "created",
                                "name",
                                "description",
                                "environment",
                                "imported",
                                "imageUrl",
                                "status",
                                "forSale",
                                "mintAddress"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "item"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "StackableAsset"
                          ],
                          "description": "Indicates that this `Item` is a `Stackable Asset`",
                          "title": "StackableAsset",
                          "example": "StackableAsset"
                        },
                        "item": {
                          "description": "The stackable asset",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the Stackable Asset"
                                },
                                "attributes": {
                                  "description": "Add attributes to your Asset",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "traitType": {
                                        "type": "string",
                                        "description": "The name of the trait"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "The value of the trait"
                                      }
                                    },
                                    "required": [
                                      "traitType",
                                      "value"
                                    ]
                                  }
                                },
                                "created": {
                                  "type": "number",
                                  "description": "The date the Asset was created"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the Stackable Asset. Max length: 32 chars",
                                  "maxLength": 32
                                },
                                "symbol": {
                                  "type": "string",
                                  "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                  "maxLength": 5
                                },
                                "description": {
                                  "type": "string",
                                  "description": "A description for the Asset",
                                  "maxLength": 64
                                },
                                "collection": {
                                  "description": "The collection the Asset belongs to",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name given to the collection"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "The description given to the collection"
                                        },
                                        "environment": {
                                          "type": "string",
                                          "description": "The collection's environment",
                                          "enum": [
                                            "Development",
                                            "Production"
                                          ]
                                        },
                                        "imageUrl": {
                                          "type": "string",
                                          "description": "The url of the image used to represent the collection",
                                          "nullable": true
                                        },
                                        "imported": {
                                          "type": "boolean",
                                          "description": "Whether the collection was imported"
                                        },
                                        "mintAddress": {
                                          "type": "string",
                                          "description": "The mint address of the collection on-chain",
                                          "nullable": true
                                        },
                                        "created": {
                                          "type": "number",
                                          "description": "Timestamp of collection creation"
                                        },
                                        "stats": {
                                          "description": "Statistics about the collection",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "numMinted": {
                                                  "type": "number",
                                                  "description": "The number of assets minted for this collection"
                                                },
                                                "floorPrice": {
                                                  "type": "number",
                                                  "description": "The floor price of the collection"
                                                },
                                                "numListed": {
                                                  "type": "number",
                                                  "description": "The number of assets listed for this collection"
                                                },
                                                "numOwners": {
                                                  "type": "number",
                                                  "description": "The number of unique owners of assets in this collection"
                                                }
                                              },
                                              "required": [
                                                "numMinted",
                                                "floorPrice",
                                                "numListed",
                                                "numOwners"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "description",
                                        "environment",
                                        "imported",
                                        "created"
                                      ]
                                    }
                                  ]
                                },
                                "environment": {
                                  "type": "string",
                                  "description": "The asset's environment",
                                  "enum": [
                                    "Development",
                                    "Production"
                                  ]
                                },
                                "imageUrl": {
                                  "type": "string",
                                  "description": "A url to the image underlying the Asset"
                                },
                                "status": {
                                  "type": "string",
                                  "description": "The current status of the Asset",
                                  "enum": [
                                    "Uninitiated",
                                    "Unprocessed",
                                    "Processing",
                                    "Committed",
                                    "Failed"
                                  ]
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address of the Asset on the blockchain"
                                }
                              },
                              "required": [
                                "id",
                                "created",
                                "name",
                                "description",
                                "environment",
                                "imageUrl",
                                "status"
                              ]
                            }
                          ]
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Amount of the stackable asset"
                        }
                      },
                      "required": [
                        "type",
                        "item",
                        "quantity"
                      ]
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "Currency": "#/components/schemas/OwnedCurrencyItemDto",
                      "UniqueAsset": "#/components/schemas/UniqueAssetItemDto",
                      "StackableAsset": "#/components/schemas/OwnedStackableAssetItemDto"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/items/{itemId}/lend": {
      "post": {
        "operationId": "ProjectUserController_createLease",
        "summary": "Lend User Item",
        "description": "### Lends an Item to another User.\n      \nCreates a Lending Grant that must be accepted by the borrower.\n      Unless otherwise specified, the Item will return to the User after 30 days.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Item to lend",
            "schema": {}
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User.",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "destinationReferenceId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Identifies the User borrowing the Asset"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "The time the lending grant will expire"
                  }
                },
                "required": [
                  "destinationReferenceId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the LendingGrant entry"
                    },
                    "itemId": {
                      "type": "string",
                      "description": "The ID of the Item being borrowed"
                    },
                    "ownerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the owner of the Asset"
                    },
                    "borrowerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the borrower of the Asset"
                    },
                    "expiration": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The expiration date and time of the borrowing period"
                    },
                    "created": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The date and time when the borrow entry was created"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the LendingGrant entry",
                      "enum": [
                        "Pending",
                        "Accepted"
                      ]
                    },
                    "environment": {
                      "type": "string",
                      "description": "The current environment of the Asset",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "itemId",
                    "ownerReferenceId",
                    "borrowerReferenceId",
                    "expiration",
                    "created",
                    "status",
                    "environment"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/items/{itemId}/transfer": {
      "post": {
        "operationId": "ProjectUserController_transfer",
        "summary": "Transfer User Item",
        "description": "### Transfers an Item between Users, or to any on-chain wallet address.\n      \nRequires User consent. User provides consent at the URL returned by the method.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Item to transfer",
            "schema": {}
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User.",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "destinationUserReferenceId": {
                    "type": "string",
                    "description": "Identifies the User receiving the Item"
                  },
                  "destinationWallet": {
                    "type": "string",
                    "description": "Address of the wallet receiving the Item"
                  },
                  "quantity": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Specifies the amount of the Item to send"
                  }
                },
                "required": [
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The id for the transaction. Can be used to get the status of the transaction."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent for the transaction."
                    }
                  },
                  "required": [
                    "transactionId",
                    "consentUrl"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/sign": {
      "post": {
        "operationId": "ProjectUserController_signTransaction",
        "summary": "Sign External Transaction for User",
        "description": "### Requests User's consent to sign a transaction not produced by GameShift.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User.",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serializedTransactionMessage": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A transaction message serialized to a hex format. This can\n      typically be created by calling `transaction.serializeMessage().toString('hex')`"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 64,
                    "description": "A brief description of what the transaction will do. Max length: 64 characters.",
                    "nullable": true
                  }
                },
                "required": [
                  "serializedTransactionMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The id for the transaction. Can be used to get the status of the transaction."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent for the transaction."
                    }
                  },
                  "required": [
                    "transactionId",
                    "consentUrl"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/withdrawals": {
      "post": {
        "operationId": "ProjectUserController_withdraw",
        "summary": "Initiate Withdrawal",
        "description": "### Withdraw user USDC into fiat.\n      \nRequires user consent. User provides consent at the URL returned by the method.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "withdrawalId": {
                      "type": "string",
                      "description": "An id that references the withdrawal"
                    },
                    "url": {
                      "type": "string",
                      "description": "A URL the User must visit to complete the withdrawal"
                    }
                  },
                  "required": [
                    "withdrawalId",
                    "url"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "ProjectUserController_getWithdrawals",
        "summary": "Fetch All Withdrawals",
        "description": "### Returns a paginated list of withdrawal requests for the given user.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of withdrawals",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the withdrawal"
                          },
                          "userReferenceId": {
                            "type": "string",
                            "description": "The reference ID of the user"
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the withdrawal",
                            "enum": [
                              "Uninitiated",
                              "Pending",
                              "Confirmed",
                              "Failed",
                              "Expired"
                            ]
                          },
                          "amount": {
                            "type": "number",
                            "nullable": true,
                            "description": "The amount of the withdrawal"
                          },
                          "currency": {
                            "type": "string",
                            "description": "The currency of the withdrawal"
                          },
                          "created": {
                            "type": "number",
                            "description": "The date and time the withdrawal was created"
                          }
                        },
                        "required": [
                          "id",
                          "userReferenceId",
                          "status",
                          "amount",
                          "currency",
                          "created"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/withdrawals/{withdrawalId}": {
      "get": {
        "operationId": "ProjectUserController_getWithdrawal",
        "summary": "Fetch Withdrawal",
        "description": "### Returns details about an individual withdrawal request.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withdrawalId",
            "required": true,
            "in": "path",
            "description": "Identifies the withdrawal",
            "schema": {}
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the user",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the withdrawal"
                    },
                    "userReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the user"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the withdrawal",
                      "enum": [
                        "Uninitiated",
                        "Pending",
                        "Confirmed",
                        "Failed",
                        "Expired"
                      ]
                    },
                    "amount": {
                      "type": "number",
                      "nullable": true,
                      "description": "The amount of the withdrawal"
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency of the withdrawal"
                    },
                    "created": {
                      "type": "number",
                      "description": "The date and time the withdrawal was created"
                    }
                  },
                  "required": [
                    "id",
                    "userReferenceId",
                    "status",
                    "amount",
                    "currency",
                    "created"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/users/{referenceId}/enrollments": {
      "get": {
        "operationId": "ProjectUserController_getLoyaltyProgramEnrollmentsByUser",
        "summary": "Fetch User Loyalty Program Enrollments",
        "description": "### Retrieves a paginated list of enrollments for a given user.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "referenceId",
            "required": true,
            "in": "path",
            "description": "Identifies the User.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of Enrollments",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "environment": {
                            "type": "object",
                            "description": "The Environment of the Enrollment"
                          },
                          "id": {
                            "type": "string",
                            "description": "The ID of the Enrollment"
                          },
                          "enrollmentAddress": {
                            "type": "string",
                            "description": "The on-chain address of the Enrollment"
                          },
                          "lastSnapshotId": {
                            "type": "string",
                            "description": "The ID of the last reward snapshot issued that included the Enrollment"
                          },
                          "enrollmentStartTime": {
                            "format": "date-time",
                            "type": "string",
                            "description": "The time the Enrollment was created"
                          },
                          "commitmentPeriod": {
                            "type": "number",
                            "description": "The time in seconds that the Enrollment will last for"
                          },
                          "elapsedEnrollmentTime": {
                            "type": "number",
                            "description": "Time elapsed since the creation of the Enrollment (in seconds)"
                          },
                          "enrollmentPeriod": {
                            "type": "number",
                            "description": "The time that the Enrollment is committed to before it can claim rewards"
                          },
                          "ownerAddress": {
                            "type": "string",
                            "description": "The on-chain address of the owner of the Enrollment"
                          },
                          "ownerId": {
                            "type": "string",
                            "description": "The user reference ID of the owner of the Enrollment"
                          },
                          "programId": {
                            "type": "string",
                            "description": "The ID of the LoyaltyProgram the Enrollment belongs to"
                          },
                          "programAddress": {
                            "type": "string",
                            "description": "The on-chain address of the LoyaltyProgram the Enrollment belongs to"
                          },
                          "enrolledBalance": {
                            "type": "string",
                            "description": "The balance of the Enrollment"
                          },
                          "allocatedRewards": {
                            "type": "string",
                            "description": "The allocated reward balance of the Enrollment"
                          },
                          "claimedRewards": {
                            "type": "string",
                            "description": "Number of allocated rewards claimed so far, for the Enrollment"
                          }
                        },
                        "required": [
                          "environment",
                          "id",
                          "enrollmentAddress",
                          "enrollmentStartTime",
                          "commitmentPeriod",
                          "elapsedEnrollmentTime",
                          "enrollmentPeriod",
                          "ownerAddress",
                          "ownerId",
                          "programId",
                          "programAddress",
                          "enrolledBalance",
                          "allocatedRewards",
                          "claimedRewards"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/nx/transactions/{transactionId}": {
      "get": {
        "operationId": "TransactionController_get",
        "summary": "Gets a Transaction and its details",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "description": "Transaction ID to fetch",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Transaction ID"
                    },
                    "created": {
                      "type": "string",
                      "description": "Transaction creation date",
                      "format": "date-time"
                    },
                    "status": {
                      "description": "Transaction confirmation status",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "Confirmed"
                              ]
                            },
                            "txHash": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "status",
                            "txHash"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "Pending"
                              ]
                            }
                          },
                          "required": [
                            "status"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "Failed"
                              ]
                            },
                            "error": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "status",
                            "error"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "Expired"
                              ]
                            }
                          },
                          "required": [
                            "status"
                          ]
                        }
                      ]
                    },
                    "details": {
                      "description": "Transaction type and details about asset and balance changes",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "BuyAsset",
                                "BuyAssetWithCreditCard",
                                "CancelAssetSale",
                                "ChangeAssetPrice",
                                "ListAssetSale",
                                "TransferAsset",
                                "TransferAssetFromDeveloper"
                              ]
                            },
                            "item": {
                              "description": "Asset details",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID of the Asset"
                                    },
                                    "attributes": {
                                      "description": "The attributes of the Asset",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "traitType": {
                                            "type": "string",
                                            "description": "The name of the trait"
                                          },
                                          "value": {
                                            "type": "string",
                                            "description": "The value of the trait"
                                          }
                                        },
                                        "required": [
                                          "traitType",
                                          "value"
                                        ]
                                      }
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "The date the Asset was created"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the Asset"
                                    },
                                    "collection": {
                                      "description": "The collection the Asset belongs to",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "The name given to the collection"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "The description given to the collection"
                                            },
                                            "environment": {
                                              "type": "string",
                                              "description": "The collection's environment",
                                              "enum": [
                                                "Development",
                                                "Production"
                                              ]
                                            },
                                            "imageUrl": {
                                              "type": "string",
                                              "description": "The url of the image used to represent the collection",
                                              "nullable": true
                                            },
                                            "imported": {
                                              "type": "boolean",
                                              "description": "Whether the collection was imported"
                                            },
                                            "mintAddress": {
                                              "type": "string",
                                              "description": "The mint address of the collection on-chain",
                                              "nullable": true
                                            },
                                            "created": {
                                              "type": "number",
                                              "description": "Timestamp of collection creation"
                                            },
                                            "stats": {
                                              "description": "Statistics about the collection",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "numMinted": {
                                                      "type": "number",
                                                      "description": "The number of assets minted for this collection"
                                                    },
                                                    "floorPrice": {
                                                      "type": "number",
                                                      "description": "The floor price of the collection"
                                                    },
                                                    "numListed": {
                                                      "type": "number",
                                                      "description": "The number of assets listed for this collection"
                                                    },
                                                    "numOwners": {
                                                      "type": "number",
                                                      "description": "The number of unique owners of assets in this collection"
                                                    }
                                                  },
                                                  "required": [
                                                    "numMinted",
                                                    "floorPrice",
                                                    "numListed",
                                                    "numOwners"
                                                  ]
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "name",
                                            "description",
                                            "environment",
                                            "imported",
                                            "created"
                                          ]
                                        }
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description provided when the Asset was created"
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The asset's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imported": {
                                      "type": "boolean",
                                      "description": "Whether the Asset was imported"
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "The URI for the image representing the Asset"
                                    },
                                    "status": {
                                      "type": "string",
                                      "description": "The current status of the Asset",
                                      "enum": [
                                        "Uninitiated",
                                        "Unprocessed",
                                        "Processing",
                                        "Committed",
                                        "Failed"
                                      ]
                                    },
                                    "escrow": {
                                      "type": "boolean",
                                      "description": "If the asset is in escrow or not"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The address of the Asset on the blockchain"
                                    },
                                    "owner": {
                                      "description": "The current owner of the Asset.",
                                      "nullable": true,
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "type": "string",
                                              "description": "The wallet that currently holds this asset",
                                              "nullable": true
                                            },
                                            "referenceId": {
                                              "type": "string",
                                              "description": "The reference id associated with the wallet",
                                              "nullable": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "priceCents": {
                                      "type": "number",
                                      "nullable": true,
                                      "description": "The price of the asset on the marketplace in cents"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "created",
                                    "name",
                                    "description",
                                    "environment",
                                    "imported",
                                    "imageUrl",
                                    "status",
                                    "escrow",
                                    "mintAddress"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "item"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "TransferToken",
                                "TransferTokenFromDeveloper"
                              ]
                            },
                            "item": {
                              "description": "Token details",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID for the currency"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The address for the currency's SPL token mint"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the currency"
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "The currency's symbol"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "mintAddress",
                                    "name",
                                    "symbol"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "item"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "TransferStackableAsset",
                                "TransferStackableAssetFromDeveloper"
                              ]
                            },
                            "item": {
                              "description": "StackableAsset details",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID of the Stackable Asset"
                                    },
                                    "attributes": {
                                      "description": "Add attributes to your Asset",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "traitType": {
                                            "type": "string",
                                            "description": "The name of the trait"
                                          },
                                          "value": {
                                            "type": "string",
                                            "description": "The value of the trait"
                                          }
                                        },
                                        "required": [
                                          "traitType",
                                          "value"
                                        ]
                                      }
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "The date the Asset was created"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the Stackable Asset. Max length: 32 chars",
                                      "maxLength": 32
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                      "maxLength": 5
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "A description for the Asset",
                                      "maxLength": 64
                                    },
                                    "collection": {
                                      "description": "The collection the Asset belongs to",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "The name given to the collection"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "The description given to the collection"
                                            },
                                            "environment": {
                                              "type": "string",
                                              "description": "The collection's environment",
                                              "enum": [
                                                "Development",
                                                "Production"
                                              ]
                                            },
                                            "imageUrl": {
                                              "type": "string",
                                              "description": "The url of the image used to represent the collection",
                                              "nullable": true
                                            },
                                            "imported": {
                                              "type": "boolean",
                                              "description": "Whether the collection was imported"
                                            },
                                            "mintAddress": {
                                              "type": "string",
                                              "description": "The mint address of the collection on-chain",
                                              "nullable": true
                                            },
                                            "created": {
                                              "type": "number",
                                              "description": "Timestamp of collection creation"
                                            },
                                            "stats": {
                                              "description": "Statistics about the collection",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "numMinted": {
                                                      "type": "number",
                                                      "description": "The number of assets minted for this collection"
                                                    },
                                                    "floorPrice": {
                                                      "type": "number",
                                                      "description": "The floor price of the collection"
                                                    },
                                                    "numListed": {
                                                      "type": "number",
                                                      "description": "The number of assets listed for this collection"
                                                    },
                                                    "numOwners": {
                                                      "type": "number",
                                                      "description": "The number of unique owners of assets in this collection"
                                                    }
                                                  },
                                                  "required": [
                                                    "numMinted",
                                                    "floorPrice",
                                                    "numListed",
                                                    "numOwners"
                                                  ]
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "name",
                                            "description",
                                            "environment",
                                            "imported",
                                            "created"
                                          ]
                                        }
                                      ]
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The asset's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "A url to the image underlying the Asset"
                                    },
                                    "status": {
                                      "type": "string",
                                      "description": "The current status of the Asset",
                                      "enum": [
                                        "Uninitiated",
                                        "Unprocessed",
                                        "Processing",
                                        "Committed",
                                        "Failed"
                                      ]
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The address of the Asset on the blockchain"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "created",
                                    "name",
                                    "description",
                                    "environment",
                                    "imageUrl",
                                    "status"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "item"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "AbitraryTransaction"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "Withdraw"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "status",
                    "details"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Transactions"
        ]
      }
    },
    "/nx/lending-grants/{id}": {
      "get": {
        "operationId": "LendController_getLease",
        "summary": "Fetch Lending Grant",
        "description": "### Returns details about a Lending Grant.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Identifies the lending Grant",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the LendingGrant entry"
                    },
                    "itemId": {
                      "type": "string",
                      "description": "The ID of the Item being borrowed"
                    },
                    "ownerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the owner of the Asset"
                    },
                    "borrowerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the borrower of the Asset"
                    },
                    "expiration": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The expiration date and time of the borrowing period"
                    },
                    "created": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The date and time when the borrow entry was created"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the LendingGrant entry",
                      "enum": [
                        "Pending",
                        "Accepted"
                      ]
                    },
                    "environment": {
                      "type": "string",
                      "description": "The current environment of the Asset",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "itemId",
                    "ownerReferenceId",
                    "borrowerReferenceId",
                    "expiration",
                    "created",
                    "status",
                    "environment"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Lending Grants"
        ]
      },
      "delete": {
        "operationId": "LendController_cancelLease",
        "summary": "Cancel Lending Grant",
        "description": "### Revokes a request to borrow an `Asset`.\n      \nReturns the `Asset` back to the lender.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Identifies the lending Grant",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "lenderReferenceId": {
                    "type": "string",
                    "description": "The reference id of the lender"
                  }
                },
                "required": [
                  "lenderReferenceId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the LendingGrant entry"
                    },
                    "itemId": {
                      "type": "string",
                      "description": "The ID of the Item being borrowed"
                    },
                    "ownerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the owner of the Asset"
                    },
                    "borrowerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the borrower of the Asset"
                    },
                    "expiration": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The expiration date and time of the borrowing period"
                    },
                    "created": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The date and time when the borrow entry was created"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the LendingGrant entry",
                      "enum": [
                        "Pending",
                        "Accepted"
                      ]
                    },
                    "environment": {
                      "type": "string",
                      "description": "The current environment of the Asset",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "itemId",
                    "ownerReferenceId",
                    "borrowerReferenceId",
                    "expiration",
                    "created",
                    "status",
                    "environment"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Lending Grants"
        ]
      }
    },
    "/nx/lending-grants/{id}/accept": {
      "post": {
        "operationId": "LendController_acceptLease",
        "summary": "Accept Lending Grant",
        "description": "### Accepts a grant to borrow an `Asset`.\n      \nExecutes the lending grant, transfers `Asset` to borrower.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Identifies the lending Grant",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "borrowerReferenceId": {
                    "type": "string",
                    "description": "The reference id of the borrower"
                  }
                },
                "required": [
                  "borrowerReferenceId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the LendingGrant entry"
                    },
                    "itemId": {
                      "type": "string",
                      "description": "The ID of the Item being borrowed"
                    },
                    "ownerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the owner of the Asset"
                    },
                    "borrowerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the borrower of the Asset"
                    },
                    "expiration": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The expiration date and time of the borrowing period"
                    },
                    "created": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The date and time when the borrow entry was created"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the LendingGrant entry",
                      "enum": [
                        "Pending",
                        "Accepted"
                      ]
                    },
                    "environment": {
                      "type": "string",
                      "description": "The current environment of the Asset",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "itemId",
                    "ownerReferenceId",
                    "borrowerReferenceId",
                    "expiration",
                    "created",
                    "status",
                    "environment"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Lending Grants"
        ]
      }
    },
    "/nx/lending-grants/{id}/return": {
      "post": {
        "operationId": "LendController_returnLease",
        "summary": "Return Asset",
        "description": "### Returns an `Asset` back to the lender.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Identifies the lending Grant",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "borrowerReferenceId": {
                    "type": "string",
                    "description": "The reference id of the borrower"
                  }
                },
                "required": [
                  "borrowerReferenceId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the LendingGrant entry"
                    },
                    "itemId": {
                      "type": "string",
                      "description": "The ID of the Item being borrowed"
                    },
                    "ownerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the owner of the Asset"
                    },
                    "borrowerReferenceId": {
                      "type": "string",
                      "description": "The reference ID of the borrower of the Asset"
                    },
                    "expiration": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The expiration date and time of the borrowing period"
                    },
                    "created": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The date and time when the borrow entry was created"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the LendingGrant entry",
                      "enum": [
                        "Pending",
                        "Accepted"
                      ]
                    },
                    "environment": {
                      "type": "string",
                      "description": "The current environment of the Asset",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "itemId",
                    "ownerReferenceId",
                    "borrowerReferenceId",
                    "expiration",
                    "created",
                    "status",
                    "environment"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Lending Grants"
        ]
      }
    },
    "/nx/items": {
      "get": {
        "operationId": "ItemsController_getAll",
        "summary": "Fetch Many Items",
        "description": "### Returns multiple Items.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "types",
            "required": false,
            "in": "query",
            "description": "A list of Item types to return.",
            "example": "Currency, UniqueAsset, StackableAsset",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "forSale",
            "required": false,
            "in": "query",
            "description": "Only return Items that are listed for sale. This is automatically exclude any Items that cannot be listed on the marketplace, i.e. Currencies.",
            "example": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "required": false,
            "in": "query",
            "description": "Only return Items that belong to this collection. Will not return Item types that cannot have a collection (such as Currencies).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownerReferenceId",
            "required": false,
            "in": "query",
            "description": "Only return Items that belong to this user. Will also return all Currencies unless otherwise specified, even if the quantity in possession is zero.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "A list of items",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "Currency"
                                ],
                                "description": "Indicates that this `Item` is a `Currency`",
                                "title": "Currency",
                                "example": "Currency"
                              },
                              "item": {
                                "description": "The currency",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID for the currency"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address for the currency's SPL token mint"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the currency"
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The currency's symbol"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "mintAddress",
                                      "name",
                                      "symbol"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "item"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "UniqueAsset"
                                ],
                                "description": "Indicates that this `Item` is an `UniqueAsset`",
                                "title": "UniqueAsset",
                                "example": "UniqueAsset"
                              },
                              "item": {
                                "description": "The unique asset",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Asset"
                                      },
                                      "attributes": {
                                        "description": "The attributes of the Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Asset"
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "The description provided when the Asset was created"
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imported": {
                                        "type": "boolean",
                                        "description": "Indicates if the asset belongs to an imported collection"
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "The URI for the image representing the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "forSale": {
                                        "type": "boolean",
                                        "description": "Indicates if the asset is currently for sale"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      },
                                      "owner": {
                                        "description": "The current owner of the Asset.",
                                        "nullable": true,
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "The wallet that currently holds this asset",
                                                "nullable": true
                                              },
                                              "referenceId": {
                                                "type": "string",
                                                "description": "The reference id associated with the wallet",
                                                "nullable": true
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "price": {
                                        "nullable": true,
                                        "type": "object",
                                        "description": "The price of the asset on the marketplace"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imported",
                                      "imageUrl",
                                      "status",
                                      "forSale",
                                      "mintAddress"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "item"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "StackableAsset"
                                ],
                                "description": "Indicates that this `Item` is a `Stackable Asset`",
                                "title": "StackableAsset",
                                "example": "StackableAsset"
                              },
                              "item": {
                                "description": "The stackable asset",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Stackable Asset"
                                      },
                                      "attributes": {
                                        "description": "Add attributes to your Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Stackable Asset. Max length: 32 chars",
                                        "maxLength": 32
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                        "maxLength": 5
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "A description for the Asset",
                                        "maxLength": 64
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "A url to the image underlying the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imageUrl",
                                      "status"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "item"
                            ]
                          }
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Items"
        ]
      }
    },
    "/nx/items/{itemId}": {
      "get": {
        "operationId": "ItemsController_get",
        "summary": "Fetch Item",
        "description": "### Returns an item",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Identifies the item",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Currency"
                          ],
                          "description": "Indicates that this `Item` is a `Currency`",
                          "title": "Currency",
                          "example": "Currency"
                        },
                        "item": {
                          "description": "The currency",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID for the currency"
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address for the currency's SPL token mint"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the currency"
                                },
                                "symbol": {
                                  "type": "string",
                                  "description": "The currency's symbol"
                                }
                              },
                              "required": [
                                "id",
                                "mintAddress",
                                "name",
                                "symbol"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "item"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "UniqueAsset"
                          ],
                          "description": "Indicates that this `Item` is an `UniqueAsset`",
                          "title": "UniqueAsset",
                          "example": "UniqueAsset"
                        },
                        "item": {
                          "description": "The unique asset",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the Asset"
                                },
                                "attributes": {
                                  "description": "The attributes of the Asset",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "traitType": {
                                        "type": "string",
                                        "description": "The name of the trait"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "The value of the trait"
                                      }
                                    },
                                    "required": [
                                      "traitType",
                                      "value"
                                    ]
                                  }
                                },
                                "created": {
                                  "type": "number",
                                  "description": "The date the Asset was created"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the Asset"
                                },
                                "collection": {
                                  "description": "The collection the Asset belongs to",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name given to the collection"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "The description given to the collection"
                                        },
                                        "environment": {
                                          "type": "string",
                                          "description": "The collection's environment",
                                          "enum": [
                                            "Development",
                                            "Production"
                                          ]
                                        },
                                        "imageUrl": {
                                          "type": "string",
                                          "description": "The url of the image used to represent the collection",
                                          "nullable": true
                                        },
                                        "imported": {
                                          "type": "boolean",
                                          "description": "Whether the collection was imported"
                                        },
                                        "mintAddress": {
                                          "type": "string",
                                          "description": "The mint address of the collection on-chain",
                                          "nullable": true
                                        },
                                        "created": {
                                          "type": "number",
                                          "description": "Timestamp of collection creation"
                                        },
                                        "stats": {
                                          "description": "Statistics about the collection",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "numMinted": {
                                                  "type": "number",
                                                  "description": "The number of assets minted for this collection"
                                                },
                                                "floorPrice": {
                                                  "type": "number",
                                                  "description": "The floor price of the collection"
                                                },
                                                "numListed": {
                                                  "type": "number",
                                                  "description": "The number of assets listed for this collection"
                                                },
                                                "numOwners": {
                                                  "type": "number",
                                                  "description": "The number of unique owners of assets in this collection"
                                                }
                                              },
                                              "required": [
                                                "numMinted",
                                                "floorPrice",
                                                "numListed",
                                                "numOwners"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "description",
                                        "environment",
                                        "imported",
                                        "created"
                                      ]
                                    }
                                  ]
                                },
                                "description": {
                                  "type": "string",
                                  "description": "The description provided when the Asset was created"
                                },
                                "environment": {
                                  "type": "string",
                                  "description": "The asset's environment",
                                  "enum": [
                                    "Development",
                                    "Production"
                                  ]
                                },
                                "imported": {
                                  "type": "boolean",
                                  "description": "Indicates if the asset belongs to an imported collection"
                                },
                                "imageUrl": {
                                  "type": "string",
                                  "description": "The URI for the image representing the Asset"
                                },
                                "status": {
                                  "type": "string",
                                  "description": "The current status of the Asset",
                                  "enum": [
                                    "Uninitiated",
                                    "Unprocessed",
                                    "Processing",
                                    "Committed",
                                    "Failed"
                                  ]
                                },
                                "forSale": {
                                  "type": "boolean",
                                  "description": "Indicates if the asset is currently for sale"
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address of the Asset on the blockchain"
                                },
                                "owner": {
                                  "description": "The current owner of the Asset.",
                                  "nullable": true,
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "The wallet that currently holds this asset",
                                          "nullable": true
                                        },
                                        "referenceId": {
                                          "type": "string",
                                          "description": "The reference id associated with the wallet",
                                          "nullable": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                "price": {
                                  "nullable": true,
                                  "type": "object",
                                  "description": "The price of the asset on the marketplace"
                                }
                              },
                              "required": [
                                "id",
                                "created",
                                "name",
                                "description",
                                "environment",
                                "imported",
                                "imageUrl",
                                "status",
                                "forSale",
                                "mintAddress"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "item"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "StackableAsset"
                          ],
                          "description": "Indicates that this `Item` is a `Stackable Asset`",
                          "title": "StackableAsset",
                          "example": "StackableAsset"
                        },
                        "item": {
                          "description": "The stackable asset",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the Stackable Asset"
                                },
                                "attributes": {
                                  "description": "Add attributes to your Asset",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "traitType": {
                                        "type": "string",
                                        "description": "The name of the trait"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "The value of the trait"
                                      }
                                    },
                                    "required": [
                                      "traitType",
                                      "value"
                                    ]
                                  }
                                },
                                "created": {
                                  "type": "number",
                                  "description": "The date the Asset was created"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the Stackable Asset. Max length: 32 chars",
                                  "maxLength": 32
                                },
                                "symbol": {
                                  "type": "string",
                                  "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                  "maxLength": 5
                                },
                                "description": {
                                  "type": "string",
                                  "description": "A description for the Asset",
                                  "maxLength": 64
                                },
                                "collection": {
                                  "description": "The collection the Asset belongs to",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name given to the collection"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "The description given to the collection"
                                        },
                                        "environment": {
                                          "type": "string",
                                          "description": "The collection's environment",
                                          "enum": [
                                            "Development",
                                            "Production"
                                          ]
                                        },
                                        "imageUrl": {
                                          "type": "string",
                                          "description": "The url of the image used to represent the collection",
                                          "nullable": true
                                        },
                                        "imported": {
                                          "type": "boolean",
                                          "description": "Whether the collection was imported"
                                        },
                                        "mintAddress": {
                                          "type": "string",
                                          "description": "The mint address of the collection on-chain",
                                          "nullable": true
                                        },
                                        "created": {
                                          "type": "number",
                                          "description": "Timestamp of collection creation"
                                        },
                                        "stats": {
                                          "description": "Statistics about the collection",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "numMinted": {
                                                  "type": "number",
                                                  "description": "The number of assets minted for this collection"
                                                },
                                                "floorPrice": {
                                                  "type": "number",
                                                  "description": "The floor price of the collection"
                                                },
                                                "numListed": {
                                                  "type": "number",
                                                  "description": "The number of assets listed for this collection"
                                                },
                                                "numOwners": {
                                                  "type": "number",
                                                  "description": "The number of unique owners of assets in this collection"
                                                }
                                              },
                                              "required": [
                                                "numMinted",
                                                "floorPrice",
                                                "numListed",
                                                "numOwners"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "description",
                                        "environment",
                                        "imported",
                                        "created"
                                      ]
                                    }
                                  ]
                                },
                                "environment": {
                                  "type": "string",
                                  "description": "The asset's environment",
                                  "enum": [
                                    "Development",
                                    "Production"
                                  ]
                                },
                                "imageUrl": {
                                  "type": "string",
                                  "description": "A url to the image underlying the Asset"
                                },
                                "status": {
                                  "type": "string",
                                  "description": "The current status of the Asset",
                                  "enum": [
                                    "Uninitiated",
                                    "Unprocessed",
                                    "Processing",
                                    "Committed",
                                    "Failed"
                                  ]
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address of the Asset on the blockchain"
                                }
                              },
                              "required": [
                                "id",
                                "created",
                                "name",
                                "description",
                                "environment",
                                "imageUrl",
                                "status"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "item"
                      ]
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "Currency": "#/components/schemas/CurrencyItemDto",
                      "UniqueAsset": "#/components/schemas/UniqueAssetItemDto",
                      "StackableAsset": "#/components/schemas/StackableAssetItemDto"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Items"
        ]
      }
    },
    "/nx/unique-assets": {
      "post": {
        "operationId": "AssetController_createAsset",
        "summary": "Create Unique Asset",
        "description": "### Creates a new Unique Asset and assigns it to a User.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "details": {
                    "description": "The asset to create",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "description": "Specify attributes to your Unique Asset.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "traitType": {
                                  "type": "string",
                                  "description": "The name of the trait"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "The value of the trait"
                                }
                              },
                              "required": [
                                "traitType",
                                "value"
                              ]
                            }
                          },
                          "royaltyInfo": {
                            "description": "Specify royalties to your Unique Asset.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "sellerFeeBasisPoints": {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 10000,
                                    "description": "How much the seller pays the recipients on each sale of the asset when using Gameshift's marketplace in basis points. 0-10000"
                                  },
                                  "recipients": {
                                    "description": "Recipients of the royalties",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "referenceId": {
                                          "type": "string",
                                          "description": "The recipient's reference id"
                                        },
                                        "address": {
                                          "type": "string",
                                          "description": "The recipient's on-chain address"
                                        },
                                        "share": {
                                          "type": "number",
                                          "minimum": 0,
                                          "maximum": 100,
                                          "description": "The recipient's share of the royalties, in percentage points. 0-100"
                                        }
                                      },
                                      "required": [
                                        "referenceId",
                                        "address",
                                        "share"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "sellerFeeBasisPoints",
                                  "recipients"
                                ]
                              }
                            ]
                          },
                          "collectionId": {
                            "type": "string",
                            "description": "The collection the Unique Asset should belong to."
                          },
                          "description": {
                            "type": "string",
                            "description": "A description for the Unique Asset.",
                            "maxLength": 64
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "A url to the image underlying the Asset."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the Asset. Max length: 32 chars.",
                            "maxLength": 32
                          }
                        },
                        "required": [
                          "collectionId",
                          "description",
                          "imageUrl",
                          "name"
                        ]
                      }
                    ]
                  },
                  "destinationUserReferenceId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The reference id of the user the asset should be assigned to"
                  }
                },
                "required": [
                  "details",
                  "destinationUserReferenceId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the Asset"
                    },
                    "attributes": {
                      "description": "The attributes of the Asset",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "traitType": {
                            "type": "string",
                            "description": "The name of the trait"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the trait"
                          }
                        },
                        "required": [
                          "traitType",
                          "value"
                        ]
                      }
                    },
                    "created": {
                      "type": "number",
                      "description": "The date the Asset was created"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Asset"
                    },
                    "collection": {
                      "description": "The collection the Asset belongs to",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name given to the collection"
                            },
                            "description": {
                              "type": "string",
                              "description": "The description given to the collection"
                            },
                            "environment": {
                              "type": "string",
                              "description": "The collection's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "The url of the image used to represent the collection",
                              "nullable": true
                            },
                            "imported": {
                              "type": "boolean",
                              "description": "Whether the collection was imported"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The mint address of the collection on-chain",
                              "nullable": true
                            },
                            "created": {
                              "type": "number",
                              "description": "Timestamp of collection creation"
                            },
                            "stats": {
                              "description": "Statistics about the collection",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "numMinted": {
                                      "type": "number",
                                      "description": "The number of assets minted for this collection"
                                    },
                                    "floorPrice": {
                                      "type": "number",
                                      "description": "The floor price of the collection"
                                    },
                                    "numListed": {
                                      "type": "number",
                                      "description": "The number of assets listed for this collection"
                                    },
                                    "numOwners": {
                                      "type": "number",
                                      "description": "The number of unique owners of assets in this collection"
                                    }
                                  },
                                  "required": [
                                    "numMinted",
                                    "floorPrice",
                                    "numListed",
                                    "numOwners"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "description",
                            "environment",
                            "imported",
                            "created"
                          ]
                        }
                      ]
                    },
                    "description": {
                      "type": "string",
                      "description": "The description provided when the Asset was created"
                    },
                    "environment": {
                      "type": "string",
                      "description": "The asset's environment",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "imported": {
                      "type": "boolean",
                      "description": "Indicates if the asset belongs to an imported collection"
                    },
                    "imageUrl": {
                      "type": "string",
                      "description": "The URI for the image representing the Asset"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the Asset",
                      "enum": [
                        "Uninitiated",
                        "Unprocessed",
                        "Processing",
                        "Committed",
                        "Failed"
                      ]
                    },
                    "forSale": {
                      "type": "boolean",
                      "description": "Indicates if the asset is currently for sale"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The address of the Asset on the blockchain"
                    },
                    "owner": {
                      "description": "The current owner of the Asset.",
                      "nullable": true,
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "string",
                              "description": "The wallet that currently holds this asset",
                              "nullable": true
                            },
                            "referenceId": {
                              "type": "string",
                              "description": "The reference id associated with the wallet",
                              "nullable": true
                            }
                          }
                        }
                      ]
                    },
                    "price": {
                      "nullable": true,
                      "type": "object",
                      "description": "The price of the asset on the marketplace"
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "name",
                    "description",
                    "environment",
                    "imported",
                    "imageUrl",
                    "status",
                    "forSale",
                    "mintAddress"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Unique Assets"
        ]
      }
    },
    "/nx/unique-assets/{itemId}": {
      "put": {
        "operationId": "AssetController_editAsset",
        "summary": "Update Unique Asset",
        "description": "### Updates a Unique Asset.\n      \nProvide attributes that will override the current asset's attributes.\n      Only works with asset's that were created with GameShift.\n      Please note that any attributes not specified will be deleted from the existing asset.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Unique Asset to update",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "imageUrl": {
                    "type": "string",
                    "description": "Image url of the Asset"
                  },
                  "attributes": {
                    "description": "Update attributes on the Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the Asset"
                    },
                    "attributes": {
                      "description": "The attributes of the Asset",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "traitType": {
                            "type": "string",
                            "description": "The name of the trait"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the trait"
                          }
                        },
                        "required": [
                          "traitType",
                          "value"
                        ]
                      }
                    },
                    "created": {
                      "type": "number",
                      "description": "The date the Asset was created"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Asset"
                    },
                    "collection": {
                      "description": "The collection the Asset belongs to",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name given to the collection"
                            },
                            "description": {
                              "type": "string",
                              "description": "The description given to the collection"
                            },
                            "environment": {
                              "type": "string",
                              "description": "The collection's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "The url of the image used to represent the collection",
                              "nullable": true
                            },
                            "imported": {
                              "type": "boolean",
                              "description": "Whether the collection was imported"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The mint address of the collection on-chain",
                              "nullable": true
                            },
                            "created": {
                              "type": "number",
                              "description": "Timestamp of collection creation"
                            },
                            "stats": {
                              "description": "Statistics about the collection",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "numMinted": {
                                      "type": "number",
                                      "description": "The number of assets minted for this collection"
                                    },
                                    "floorPrice": {
                                      "type": "number",
                                      "description": "The floor price of the collection"
                                    },
                                    "numListed": {
                                      "type": "number",
                                      "description": "The number of assets listed for this collection"
                                    },
                                    "numOwners": {
                                      "type": "number",
                                      "description": "The number of unique owners of assets in this collection"
                                    }
                                  },
                                  "required": [
                                    "numMinted",
                                    "floorPrice",
                                    "numListed",
                                    "numOwners"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "description",
                            "environment",
                            "imported",
                            "created"
                          ]
                        }
                      ]
                    },
                    "description": {
                      "type": "string",
                      "description": "The description provided when the Asset was created"
                    },
                    "environment": {
                      "type": "string",
                      "description": "The asset's environment",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "imported": {
                      "type": "boolean",
                      "description": "Indicates if the asset belongs to an imported collection"
                    },
                    "imageUrl": {
                      "type": "string",
                      "description": "The URI for the image representing the Asset"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the Asset",
                      "enum": [
                        "Uninitiated",
                        "Unprocessed",
                        "Processing",
                        "Committed",
                        "Failed"
                      ]
                    },
                    "forSale": {
                      "type": "boolean",
                      "description": "Indicates if the asset is currently for sale"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The address of the Asset on the blockchain"
                    },
                    "owner": {
                      "description": "The current owner of the Asset.",
                      "nullable": true,
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "string",
                              "description": "The wallet that currently holds this asset",
                              "nullable": true
                            },
                            "referenceId": {
                              "type": "string",
                              "description": "The reference id associated with the wallet",
                              "nullable": true
                            }
                          }
                        }
                      ]
                    },
                    "price": {
                      "nullable": true,
                      "type": "object",
                      "description": "The price of the asset on the marketplace"
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "name",
                    "description",
                    "environment",
                    "imported",
                    "imageUrl",
                    "status",
                    "forSale",
                    "mintAddress"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Unique Assets"
        ]
      }
    },
    "/nx/unique-assets/{itemId}/list-for-sale": {
      "post": {
        "operationId": "AssetController_listAsset",
        "summary": "List Unique Asset for Sale on Marketplace",
        "description": "### Lists a Unique Asset for sale on the marketplace.\n      \nRequires User consent. User provides consent at the URL returned by the method.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Unique Asset to sell",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "price": {
                    "description": "Listing price for the asset",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "currencyId": {
                            "minLength": 1,
                            "type": "string",
                            "description": "The currency identifier"
                          },
                          "naturalAmount": {
                            "type": "string",
                            "minLength": 1,
                            "description": "The amount in the human readable format"
                          }
                        },
                        "required": [
                          "currencyId",
                          "naturalAmount"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "price"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The id for the transaction. Can be used to get the status of the transaction."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent for the transaction."
                    }
                  },
                  "required": [
                    "transactionId",
                    "consentUrl"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Unique Assets"
        ]
      }
    },
    "/nx/unique-assets/{itemId}/buy": {
      "post": {
        "operationId": "AssetController_buyAsset",
        "summary": "Buy Unique Asset from Marketplace",
        "description": "### Buys a Unique Asset from the marketplace.\n      \nRequires User consent. User provides consent at the URL returned by the method.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Unique Asset to buy",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "buyerId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Identifies the `User` buying the item"
                  }
                },
                "required": [
                  "buyerId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The id for the transaction. Can be used to get the status of the transaction."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent for the transaction."
                    }
                  },
                  "required": [
                    "transactionId",
                    "consentUrl"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Unique Assets"
        ]
      }
    },
    "/nx/unique-assets/{itemId}/cancel-listing": {
      "post": {
        "operationId": "AssetController_cancelListingAsset",
        "summary": "Cancel Unique Asset Listing on Marketplace",
        "description": "### Removes a Unique Asset listed for sale from the marketplace.\n      \nRequires User consent. User provides consent at the URL returned by the method.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Unique Asset to cancel listing for.",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The id for the transaction. Can be used to get the status of the transaction."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent for the transaction."
                    }
                  },
                  "required": [
                    "transactionId",
                    "consentUrl"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Unique Assets"
        ]
      }
    },
    "/nx/asset-collections": {
      "get": {
        "operationId": "CollectionController_getAll",
        "summary": "Fetch All Asset Collections",
        "description": "### Returns a list of Asset Collections.\n      \nThis method will only return Asset Collections that were created by the\n      Game associated with the API key.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of Collections",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name given to the collection"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description given to the collection"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The collection's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The url of the image used to represent the collection",
                            "nullable": true
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the collection was imported"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The mint address of the collection on-chain",
                            "nullable": true
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of collection creation"
                          },
                          "stats": {
                            "description": "Statistics about the collection",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "numMinted": {
                                    "type": "number",
                                    "description": "The number of assets minted for this collection"
                                  },
                                  "floorPrice": {
                                    "type": "number",
                                    "description": "The floor price of the collection"
                                  },
                                  "numListed": {
                                    "type": "number",
                                    "description": "The number of assets listed for this collection"
                                  },
                                  "numOwners": {
                                    "type": "number",
                                    "description": "The number of unique owners of assets in this collection"
                                  }
                                },
                                "required": [
                                  "numMinted",
                                  "floorPrice",
                                  "numListed",
                                  "numOwners"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "created"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Asset Collections"
        ]
      },
      "post": {
        "operationId": "CollectionController_createCollection",
        "summary": "Create New Asset Collection",
        "description": "### Creates a new Asset Collection.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Names the Asset Collection"
                  },
                  "description": {
                    "type": "string",
                    "description": "Describes the Asset Collection"
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "URL for the Asset Collection's image"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "imageUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name given to the collection"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description given to the collection"
                    },
                    "environment": {
                      "type": "string",
                      "description": "The collection's environment",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "imageUrl": {
                      "type": "string",
                      "description": "The url of the image used to represent the collection",
                      "nullable": true
                    },
                    "imported": {
                      "type": "boolean",
                      "description": "Whether the collection was imported"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The mint address of the collection on-chain",
                      "nullable": true
                    },
                    "created": {
                      "type": "number",
                      "description": "Timestamp of collection creation"
                    },
                    "stats": {
                      "description": "Statistics about the collection",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "numMinted": {
                              "type": "number",
                              "description": "The number of assets minted for this collection"
                            },
                            "floorPrice": {
                              "type": "number",
                              "description": "The floor price of the collection"
                            },
                            "numListed": {
                              "type": "number",
                              "description": "The number of assets listed for this collection"
                            },
                            "numOwners": {
                              "type": "number",
                              "description": "The number of unique owners of assets in this collection"
                            }
                          },
                          "required": [
                            "numMinted",
                            "floorPrice",
                            "numListed",
                            "numOwners"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "description",
                    "environment",
                    "imported",
                    "created"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Asset Collections"
        ]
      }
    },
    "/nx/asset-collections/import": {
      "post": {
        "operationId": "CollectionController_importCollection",
        "summary": "Import Asset Collection",
        "description": "### Adds an existing Asset Collection that was created outside of GameShift.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collectionAddress": {
                    "type": "string",
                    "description": "The on-chain address for the collection"
                  }
                },
                "required": [
                  "collectionAddress"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name given to the collection"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description given to the collection"
                    },
                    "environment": {
                      "type": "string",
                      "description": "The collection's environment",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "imageUrl": {
                      "type": "string",
                      "description": "The url of the image used to represent the collection",
                      "nullable": true
                    },
                    "imported": {
                      "type": "boolean",
                      "description": "Whether the collection was imported"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The mint address of the collection on-chain",
                      "nullable": true
                    },
                    "created": {
                      "type": "number",
                      "description": "Timestamp of collection creation"
                    },
                    "stats": {
                      "description": "Statistics about the collection",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "numMinted": {
                              "type": "number",
                              "description": "The number of assets minted for this collection"
                            },
                            "floorPrice": {
                              "type": "number",
                              "description": "The floor price of the collection"
                            },
                            "numListed": {
                              "type": "number",
                              "description": "The number of assets listed for this collection"
                            },
                            "numOwners": {
                              "type": "number",
                              "description": "The number of unique owners of assets in this collection"
                            }
                          },
                          "required": [
                            "numMinted",
                            "floorPrice",
                            "numListed",
                            "numOwners"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "description",
                    "environment",
                    "imported",
                    "created"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Asset Collections"
        ]
      }
    },
    "/nx/asset-collections/{collectionId}": {
      "get": {
        "operationId": "CollectionController_getCollection",
        "summary": "Fetch Asset Collection",
        "description": "### Returns an existing Asset Collection.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeStats",
            "required": false,
            "in": "query",
            "description": "Include statistics about the collection.",
            "schema": {}
          },
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Identifies the Asset Collection.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name given to the collection"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description given to the collection"
                    },
                    "environment": {
                      "type": "string",
                      "description": "The collection's environment",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "imageUrl": {
                      "type": "string",
                      "description": "The url of the image used to represent the collection",
                      "nullable": true
                    },
                    "imported": {
                      "type": "boolean",
                      "description": "Whether the collection was imported"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The mint address of the collection on-chain",
                      "nullable": true
                    },
                    "created": {
                      "type": "number",
                      "description": "Timestamp of collection creation"
                    },
                    "stats": {
                      "description": "Statistics about the collection",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "numMinted": {
                              "type": "number",
                              "description": "The number of assets minted for this collection"
                            },
                            "floorPrice": {
                              "type": "number",
                              "description": "The floor price of the collection"
                            },
                            "numListed": {
                              "type": "number",
                              "description": "The number of assets listed for this collection"
                            },
                            "numOwners": {
                              "type": "number",
                              "description": "The number of unique owners of assets in this collection"
                            }
                          },
                          "required": [
                            "numMinted",
                            "floorPrice",
                            "numListed",
                            "numOwners"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "description",
                    "environment",
                    "imported",
                    "created"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Asset Collections"
        ]
      }
    },
    "/nx/asset-collections/{collectionId}/un-import": {
      "post": {
        "operationId": "CollectionController_unimport",
        "summary": "Un-Import Asset Collection",
        "description": "### Removes an imported Asset Collection.\n      \nUn-importing an Asset Collection will not remove the collection from\n      the Solana blockchain. However, it *will* remove the collection from GameShift.\n      As a result, the collection will no longer appear in any queries, and neither\n      will any assets belonging to the collection. Furthermore, it will prevent\n      you from being able to use GameShift to initiate asset transfers, marketplace\n      interactions, and other asset actions for any assets that belong to the\n      collection.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Identifies the Asset Collection.",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name given to the collection"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description given to the collection"
                    },
                    "environment": {
                      "type": "string",
                      "description": "The collection's environment",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "imageUrl": {
                      "type": "string",
                      "description": "The url of the image used to represent the collection",
                      "nullable": true
                    },
                    "imported": {
                      "type": "boolean",
                      "description": "Whether the collection was imported"
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The mint address of the collection on-chain",
                      "nullable": true
                    },
                    "created": {
                      "type": "number",
                      "description": "Timestamp of collection creation"
                    },
                    "stats": {
                      "description": "Statistics about the collection",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "numMinted": {
                              "type": "number",
                              "description": "The number of assets minted for this collection"
                            },
                            "floorPrice": {
                              "type": "number",
                              "description": "The floor price of the collection"
                            },
                            "numListed": {
                              "type": "number",
                              "description": "The number of assets listed for this collection"
                            },
                            "numOwners": {
                              "type": "number",
                              "description": "The number of unique owners of assets in this collection"
                            }
                          },
                          "required": [
                            "numMinted",
                            "floorPrice",
                            "numListed",
                            "numOwners"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "description",
                    "environment",
                    "imported",
                    "created"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Asset Collections"
        ]
      }
    },
    "/nx/asset-collections/{collectionId}/assets": {
      "get": {
        "operationId": "CollectionController_getAssets",
        "summary": "Fetch Asset Collection's Assets",
        "description": "### Returns a list of Assets in an Asset Collection.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Identifies the Asset Collection.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "UniqueAsset"
                            ],
                            "description": "Indicates that this `Item` is an `UniqueAsset`",
                            "title": "UniqueAsset",
                            "example": "UniqueAsset"
                          },
                          "item": {
                            "description": "The unique asset",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The ID of the Asset"
                                  },
                                  "attributes": {
                                    "description": "The attributes of the Asset",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "traitType": {
                                          "type": "string",
                                          "description": "The name of the trait"
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "The value of the trait"
                                        }
                                      },
                                      "required": [
                                        "traitType",
                                        "value"
                                      ]
                                    }
                                  },
                                  "created": {
                                    "type": "number",
                                    "description": "The date the Asset was created"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the Asset"
                                  },
                                  "collection": {
                                    "description": "The collection the Asset belongs to",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "The name given to the collection"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "The description given to the collection"
                                          },
                                          "environment": {
                                            "type": "string",
                                            "description": "The collection's environment",
                                            "enum": [
                                              "Development",
                                              "Production"
                                            ]
                                          },
                                          "imageUrl": {
                                            "type": "string",
                                            "description": "The url of the image used to represent the collection",
                                            "nullable": true
                                          },
                                          "imported": {
                                            "type": "boolean",
                                            "description": "Whether the collection was imported"
                                          },
                                          "mintAddress": {
                                            "type": "string",
                                            "description": "The mint address of the collection on-chain",
                                            "nullable": true
                                          },
                                          "created": {
                                            "type": "number",
                                            "description": "Timestamp of collection creation"
                                          },
                                          "stats": {
                                            "description": "Statistics about the collection",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "numMinted": {
                                                    "type": "number",
                                                    "description": "The number of assets minted for this collection"
                                                  },
                                                  "floorPrice": {
                                                    "type": "number",
                                                    "description": "The floor price of the collection"
                                                  },
                                                  "numListed": {
                                                    "type": "number",
                                                    "description": "The number of assets listed for this collection"
                                                  },
                                                  "numOwners": {
                                                    "type": "number",
                                                    "description": "The number of unique owners of assets in this collection"
                                                  }
                                                },
                                                "required": [
                                                  "numMinted",
                                                  "floorPrice",
                                                  "numListed",
                                                  "numOwners"
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "name",
                                          "description",
                                          "environment",
                                          "imported",
                                          "created"
                                        ]
                                      }
                                    ]
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "The description provided when the Asset was created"
                                  },
                                  "environment": {
                                    "type": "string",
                                    "description": "The asset's environment",
                                    "enum": [
                                      "Development",
                                      "Production"
                                    ]
                                  },
                                  "imported": {
                                    "type": "boolean",
                                    "description": "Indicates if the asset belongs to an imported collection"
                                  },
                                  "imageUrl": {
                                    "type": "string",
                                    "description": "The URI for the image representing the Asset"
                                  },
                                  "status": {
                                    "type": "string",
                                    "description": "The current status of the Asset",
                                    "enum": [
                                      "Uninitiated",
                                      "Unprocessed",
                                      "Processing",
                                      "Committed",
                                      "Failed"
                                    ]
                                  },
                                  "forSale": {
                                    "type": "boolean",
                                    "description": "Indicates if the asset is currently for sale"
                                  },
                                  "mintAddress": {
                                    "type": "string",
                                    "description": "The address of the Asset on the blockchain"
                                  },
                                  "owner": {
                                    "description": "The current owner of the Asset.",
                                    "nullable": true,
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "type": "string",
                                            "description": "The wallet that currently holds this asset",
                                            "nullable": true
                                          },
                                          "referenceId": {
                                            "type": "string",
                                            "description": "The reference id associated with the wallet",
                                            "nullable": true
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "price": {
                                    "nullable": true,
                                    "type": "object",
                                    "description": "The price of the asset on the marketplace"
                                  }
                                },
                                "required": [
                                  "id",
                                  "created",
                                  "name",
                                  "description",
                                  "environment",
                                  "imported",
                                  "imageUrl",
                                  "status",
                                  "forSale",
                                  "mintAddress"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "item"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Asset Collections"
        ]
      }
    },
    "/nx/developer-wallet/wallet-address": {
      "get": {
        "operationId": "DeveloperWalletController_fetchWalletAddress",
        "summary": "Fetch Developer Wallet Address",
        "description": "### Returns the Developer Wallet on-chain address.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "description": "The address of the wallet."
                    }
                  },
                  "required": [
                    "address"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Developer Wallet"
        ]
      }
    },
    "/nx/developer-wallet/items": {
      "get": {
        "operationId": "DeveloperWalletController_getItems",
        "summary": "Fetch Developer Wallet Items",
        "description": "### Returns a list of all the Items owned by the Developer Wallet.\n      \nWill also return all Currencies registered in the game, even if the Developer Wallet does not possess any quantity of them.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "types",
            "required": false,
            "in": "query",
            "description": "A list of Item types to return.",
            "example": "Currency, UniqueAsset, StackableAsset",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "collectionId",
            "required": false,
            "in": "query",
            "description": "Only return Items that belong to this collection. Will not return Item types that cannot have a collection (such as Currencies).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "A list of items",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "Currency"
                                ],
                                "description": "Indicates that this `Item` is a `Currency`",
                                "title": "Currency",
                                "example": "Currency"
                              },
                              "item": {
                                "description": "The currency",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID for the currency"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address for the currency's SPL token mint"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the currency"
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The currency's symbol"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "mintAddress",
                                      "name",
                                      "symbol"
                                    ]
                                  }
                                ]
                              },
                              "quantity": {
                                "type": "string",
                                "description": "Amount of the currency being held"
                              }
                            },
                            "required": [
                              "type",
                              "item",
                              "quantity"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "UniqueAsset"
                                ],
                                "description": "Indicates that this `Item` is an `UniqueAsset`",
                                "title": "UniqueAsset",
                                "example": "UniqueAsset"
                              },
                              "item": {
                                "description": "The unique asset",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Asset"
                                      },
                                      "attributes": {
                                        "description": "The attributes of the Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Asset"
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "The description provided when the Asset was created"
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imported": {
                                        "type": "boolean",
                                        "description": "Indicates if the asset belongs to an imported collection"
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "The URI for the image representing the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "forSale": {
                                        "type": "boolean",
                                        "description": "Indicates if the asset is currently for sale"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      },
                                      "owner": {
                                        "description": "The current owner of the Asset.",
                                        "nullable": true,
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "The wallet that currently holds this asset",
                                                "nullable": true
                                              },
                                              "referenceId": {
                                                "type": "string",
                                                "description": "The reference id associated with the wallet",
                                                "nullable": true
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "price": {
                                        "nullable": true,
                                        "type": "object",
                                        "description": "The price of the asset on the marketplace"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imported",
                                      "imageUrl",
                                      "status",
                                      "forSale",
                                      "mintAddress"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "item"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "StackableAsset"
                                ],
                                "description": "Indicates that this `Item` is a `Stackable Asset`",
                                "title": "StackableAsset",
                                "example": "StackableAsset"
                              },
                              "item": {
                                "description": "The stackable asset",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Stackable Asset"
                                      },
                                      "attributes": {
                                        "description": "Add attributes to your Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Stackable Asset. Max length: 32 chars",
                                        "maxLength": 32
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                        "maxLength": 5
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "A description for the Asset",
                                        "maxLength": 64
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "A url to the image underlying the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imageUrl",
                                      "status"
                                    ]
                                  }
                                ]
                              },
                              "quantity": {
                                "type": "string",
                                "description": "Amount of the stackable asset"
                              }
                            },
                            "required": [
                              "type",
                              "item",
                              "quantity"
                            ]
                          }
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Developer Wallet"
        ]
      }
    },
    "/nx/developer-wallet/items/{itemId}/transfer": {
      "post": {
        "operationId": "DeveloperWalletController_transferItem",
        "summary": "Transfer Developer Wallet Item",
        "description": "### Transfers an Item to a user, or any on-chain wallet address",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-wallet-key",
            "required": true,
            "in": "header",
            "description": "Wallet key for your game developer wallet",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the id of the item to transfer",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "destinationUserReferenceId": {
                    "type": "string",
                    "description": "Identifies the User receiving the Item"
                  },
                  "destinationWallet": {
                    "type": "string",
                    "description": "Address of the wallet receiving the Item"
                  },
                  "quantity": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Specifies the amount of the Item to send"
                  }
                },
                "required": [
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Transaction ID"
                    },
                    "created": {
                      "type": "string",
                      "description": "Transaction creation date",
                      "format": "date-time"
                    },
                    "status": {
                      "description": "Transaction confirmation status",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "Confirmed"
                              ]
                            },
                            "txHash": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "status",
                            "txHash"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "Pending"
                              ]
                            }
                          },
                          "required": [
                            "status"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "Failed"
                              ]
                            },
                            "error": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "status",
                            "error"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "Expired"
                              ]
                            }
                          },
                          "required": [
                            "status"
                          ]
                        }
                      ]
                    },
                    "details": {
                      "description": "Transaction type and details about asset and balance changes",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "BuyAsset",
                                "BuyAssetWithCreditCard",
                                "CancelAssetSale",
                                "ChangeAssetPrice",
                                "ListAssetSale",
                                "TransferAsset",
                                "TransferAssetFromDeveloper"
                              ]
                            },
                            "item": {
                              "description": "Asset details",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID of the Asset"
                                    },
                                    "attributes": {
                                      "description": "The attributes of the Asset",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "traitType": {
                                            "type": "string",
                                            "description": "The name of the trait"
                                          },
                                          "value": {
                                            "type": "string",
                                            "description": "The value of the trait"
                                          }
                                        },
                                        "required": [
                                          "traitType",
                                          "value"
                                        ]
                                      }
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "The date the Asset was created"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the Asset"
                                    },
                                    "collection": {
                                      "description": "The collection the Asset belongs to",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "The name given to the collection"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "The description given to the collection"
                                            },
                                            "environment": {
                                              "type": "string",
                                              "description": "The collection's environment",
                                              "enum": [
                                                "Development",
                                                "Production"
                                              ]
                                            },
                                            "imageUrl": {
                                              "type": "string",
                                              "description": "The url of the image used to represent the collection",
                                              "nullable": true
                                            },
                                            "imported": {
                                              "type": "boolean",
                                              "description": "Whether the collection was imported"
                                            },
                                            "mintAddress": {
                                              "type": "string",
                                              "description": "The mint address of the collection on-chain",
                                              "nullable": true
                                            },
                                            "created": {
                                              "type": "number",
                                              "description": "Timestamp of collection creation"
                                            },
                                            "stats": {
                                              "description": "Statistics about the collection",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "numMinted": {
                                                      "type": "number",
                                                      "description": "The number of assets minted for this collection"
                                                    },
                                                    "floorPrice": {
                                                      "type": "number",
                                                      "description": "The floor price of the collection"
                                                    },
                                                    "numListed": {
                                                      "type": "number",
                                                      "description": "The number of assets listed for this collection"
                                                    },
                                                    "numOwners": {
                                                      "type": "number",
                                                      "description": "The number of unique owners of assets in this collection"
                                                    }
                                                  },
                                                  "required": [
                                                    "numMinted",
                                                    "floorPrice",
                                                    "numListed",
                                                    "numOwners"
                                                  ]
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "name",
                                            "description",
                                            "environment",
                                            "imported",
                                            "created"
                                          ]
                                        }
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description provided when the Asset was created"
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The asset's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imported": {
                                      "type": "boolean",
                                      "description": "Whether the Asset was imported"
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "The URI for the image representing the Asset"
                                    },
                                    "status": {
                                      "type": "string",
                                      "description": "The current status of the Asset",
                                      "enum": [
                                        "Uninitiated",
                                        "Unprocessed",
                                        "Processing",
                                        "Committed",
                                        "Failed"
                                      ]
                                    },
                                    "escrow": {
                                      "type": "boolean",
                                      "description": "If the asset is in escrow or not"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The address of the Asset on the blockchain"
                                    },
                                    "owner": {
                                      "description": "The current owner of the Asset.",
                                      "nullable": true,
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "type": "string",
                                              "description": "The wallet that currently holds this asset",
                                              "nullable": true
                                            },
                                            "referenceId": {
                                              "type": "string",
                                              "description": "The reference id associated with the wallet",
                                              "nullable": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "priceCents": {
                                      "type": "number",
                                      "nullable": true,
                                      "description": "The price of the asset on the marketplace in cents"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "created",
                                    "name",
                                    "description",
                                    "environment",
                                    "imported",
                                    "imageUrl",
                                    "status",
                                    "escrow",
                                    "mintAddress"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "item"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "TransferToken",
                                "TransferTokenFromDeveloper"
                              ]
                            },
                            "item": {
                              "description": "Token details",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID for the currency"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The address for the currency's SPL token mint"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the currency"
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "The currency's symbol"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "mintAddress",
                                    "name",
                                    "symbol"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "item"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "TransferStackableAsset",
                                "TransferStackableAssetFromDeveloper"
                              ]
                            },
                            "item": {
                              "description": "StackableAsset details",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID of the Stackable Asset"
                                    },
                                    "attributes": {
                                      "description": "Add attributes to your Asset",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "traitType": {
                                            "type": "string",
                                            "description": "The name of the trait"
                                          },
                                          "value": {
                                            "type": "string",
                                            "description": "The value of the trait"
                                          }
                                        },
                                        "required": [
                                          "traitType",
                                          "value"
                                        ]
                                      }
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "The date the Asset was created"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the Stackable Asset. Max length: 32 chars",
                                      "maxLength": 32
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                      "maxLength": 5
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "A description for the Asset",
                                      "maxLength": 64
                                    },
                                    "collection": {
                                      "description": "The collection the Asset belongs to",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "The name given to the collection"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "The description given to the collection"
                                            },
                                            "environment": {
                                              "type": "string",
                                              "description": "The collection's environment",
                                              "enum": [
                                                "Development",
                                                "Production"
                                              ]
                                            },
                                            "imageUrl": {
                                              "type": "string",
                                              "description": "The url of the image used to represent the collection",
                                              "nullable": true
                                            },
                                            "imported": {
                                              "type": "boolean",
                                              "description": "Whether the collection was imported"
                                            },
                                            "mintAddress": {
                                              "type": "string",
                                              "description": "The mint address of the collection on-chain",
                                              "nullable": true
                                            },
                                            "created": {
                                              "type": "number",
                                              "description": "Timestamp of collection creation"
                                            },
                                            "stats": {
                                              "description": "Statistics about the collection",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "numMinted": {
                                                      "type": "number",
                                                      "description": "The number of assets minted for this collection"
                                                    },
                                                    "floorPrice": {
                                                      "type": "number",
                                                      "description": "The floor price of the collection"
                                                    },
                                                    "numListed": {
                                                      "type": "number",
                                                      "description": "The number of assets listed for this collection"
                                                    },
                                                    "numOwners": {
                                                      "type": "number",
                                                      "description": "The number of unique owners of assets in this collection"
                                                    }
                                                  },
                                                  "required": [
                                                    "numMinted",
                                                    "floorPrice",
                                                    "numListed",
                                                    "numOwners"
                                                  ]
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "name",
                                            "description",
                                            "environment",
                                            "imported",
                                            "created"
                                          ]
                                        }
                                      ]
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The asset's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "A url to the image underlying the Asset"
                                    },
                                    "status": {
                                      "type": "string",
                                      "description": "The current status of the Asset",
                                      "enum": [
                                        "Uninitiated",
                                        "Unprocessed",
                                        "Processing",
                                        "Committed",
                                        "Failed"
                                      ]
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The address of the Asset on the blockchain"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "created",
                                    "name",
                                    "description",
                                    "environment",
                                    "imageUrl",
                                    "status"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "item"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "AbitraryTransaction"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "Withdraw"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "status",
                    "details"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Developer Wallet"
        ]
      }
    },
    "/nx/payments": {
      "get": {
        "operationId": "PaymentController_getAll",
        "summary": "Fetch All Payments",
        "description": "### Returns a list of Payments.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perPage",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of Payments",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the payment"
                          },
                          "environment": {
                            "type": "string",
                            "description": "Environment the payment initiated on",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "purchaser": {
                            "description": "The user making the purchase",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "referenceId": {
                                    "type": "string",
                                    "description": "The reference id of the user"
                                  },
                                  "email": {
                                    "type": "string",
                                    "description": "The email of the user"
                                  }
                                },
                                "required": [
                                  "referenceId",
                                  "email"
                                ]
                              }
                            ]
                          },
                          "price": {
                            "description": "The payment amount",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "currencyId": {
                                    "minLength": 1,
                                    "type": "string",
                                    "description": "The currency identifier"
                                  },
                                  "naturalAmount": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The amount in the human readable format"
                                  }
                                },
                                "required": [
                                  "currencyId",
                                  "naturalAmount"
                                ]
                              }
                            ]
                          },
                          "sku": {
                            "description": "What this payment is for",
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Indicates that this payment is for a Unique Asset",
                                    "enum": [
                                      "MarketplaceSale"
                                    ]
                                  },
                                  "item": {
                                    "description": "The Unique Asset the payment is for.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "The ID of the Asset"
                                          },
                                          "attributes": {
                                            "description": "The attributes of the Asset",
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "traitType": {
                                                  "type": "string",
                                                  "description": "The name of the trait"
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "description": "The value of the trait"
                                                }
                                              },
                                              "required": [
                                                "traitType",
                                                "value"
                                              ]
                                            }
                                          },
                                          "created": {
                                            "type": "number",
                                            "description": "The date the Asset was created"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the Asset"
                                          },
                                          "collection": {
                                            "description": "The collection the Asset belongs to",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "type": "string",
                                                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "description": "The name given to the collection"
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "description": "The description given to the collection"
                                                  },
                                                  "environment": {
                                                    "type": "string",
                                                    "description": "The collection's environment",
                                                    "enum": [
                                                      "Development",
                                                      "Production"
                                                    ]
                                                  },
                                                  "imageUrl": {
                                                    "type": "string",
                                                    "description": "The url of the image used to represent the collection",
                                                    "nullable": true
                                                  },
                                                  "imported": {
                                                    "type": "boolean",
                                                    "description": "Whether the collection was imported"
                                                  },
                                                  "mintAddress": {
                                                    "type": "string",
                                                    "description": "The mint address of the collection on-chain",
                                                    "nullable": true
                                                  },
                                                  "created": {
                                                    "type": "number",
                                                    "description": "Timestamp of collection creation"
                                                  },
                                                  "stats": {
                                                    "description": "Statistics about the collection",
                                                    "allOf": [
                                                      {
                                                        "type": "object",
                                                        "properties": {
                                                          "numMinted": {
                                                            "type": "number",
                                                            "description": "The number of assets minted for this collection"
                                                          },
                                                          "floorPrice": {
                                                            "type": "number",
                                                            "description": "The floor price of the collection"
                                                          },
                                                          "numListed": {
                                                            "type": "number",
                                                            "description": "The number of assets listed for this collection"
                                                          },
                                                          "numOwners": {
                                                            "type": "number",
                                                            "description": "The number of unique owners of assets in this collection"
                                                          }
                                                        },
                                                        "required": [
                                                          "numMinted",
                                                          "floorPrice",
                                                          "numListed",
                                                          "numOwners"
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "id",
                                                  "name",
                                                  "description",
                                                  "environment",
                                                  "imported",
                                                  "created"
                                                ]
                                              }
                                            ]
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "The description provided when the Asset was created"
                                          },
                                          "environment": {
                                            "type": "string",
                                            "description": "The asset's environment",
                                            "enum": [
                                              "Development",
                                              "Production"
                                            ]
                                          },
                                          "imported": {
                                            "type": "boolean",
                                            "description": "Indicates if the asset belongs to an imported collection"
                                          },
                                          "imageUrl": {
                                            "type": "string",
                                            "description": "The URI for the image representing the Asset"
                                          },
                                          "status": {
                                            "type": "string",
                                            "description": "The current status of the Asset",
                                            "enum": [
                                              "Uninitiated",
                                              "Unprocessed",
                                              "Processing",
                                              "Committed",
                                              "Failed"
                                            ]
                                          },
                                          "forSale": {
                                            "type": "boolean",
                                            "description": "Indicates if the asset is currently for sale"
                                          },
                                          "mintAddress": {
                                            "type": "string",
                                            "description": "The address of the Asset on the blockchain"
                                          },
                                          "owner": {
                                            "description": "The current owner of the Asset.",
                                            "nullable": true,
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string",
                                                    "description": "The wallet that currently holds this asset",
                                                    "nullable": true
                                                  },
                                                  "referenceId": {
                                                    "type": "string",
                                                    "description": "The reference id associated with the wallet",
                                                    "nullable": true
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "price": {
                                            "nullable": true,
                                            "type": "object",
                                            "description": "The price of the asset on the marketplace"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "created",
                                          "name",
                                          "description",
                                          "environment",
                                          "imported",
                                          "imageUrl",
                                          "status",
                                          "forSale",
                                          "mintAddress"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "item"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Indicates that this payment is for a Unique Asset mint operation.",
                                    "enum": [
                                      "AssetMint"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Indicates that this payment is for a generic purchase",
                                    "enum": [
                                      "Generic"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              }
                            ]
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the payment",
                            "enum": [
                              "Pending",
                              "Confirmed",
                              "Completed",
                              "Failed",
                              "Expired"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "environment",
                          "purchaser",
                          "price",
                          "sku",
                          "status"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      },
      "post": {
        "operationId": "PaymentController_checkout",
        "summary": "Create Payment",
        "description": "### Creates a Payment request for a User.\n      \nUser completes the Payment request at the URL returned by this method.\n      This endpoint will only charge the user; it is your responsibility to monitor for\n      payment success and perform any additional actions required.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Item being purchased"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Describes the item being purchased"
                  },
                  "price": {
                    "description": "Price of the item",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "currencyId": {
                            "minLength": 1,
                            "type": "string",
                            "description": "The currency identifier"
                          },
                          "naturalAmount": {
                            "type": "string",
                            "minLength": 1,
                            "description": "The amount in the human readable format"
                          }
                        },
                        "required": [
                          "currencyId",
                          "naturalAmount"
                        ]
                      }
                    ]
                  },
                  "quantity": {
                    "type": "number",
                    "description": "Amount of items being purchased"
                  },
                  "buyerId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Identifies the `User` buying the item"
                  }
                },
                "required": [
                  "title",
                  "description",
                  "price",
                  "quantity",
                  "buyerId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checkoutUrl": {
                      "type": "string",
                      "description": "A URL the User must visit to complete the payment"
                    },
                    "id": {
                      "type": "string",
                      "description": "An id used to reference the payment"
                    }
                  },
                  "required": [
                    "checkoutUrl",
                    "id"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/nx/payments/{paymentId}": {
      "get": {
        "operationId": "PaymentController_get",
        "summary": "Fetch Payment",
        "description": "### Returns Payment details.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "description": "Identifies the payment",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the payment"
                    },
                    "environment": {
                      "type": "string",
                      "description": "Environment the payment initiated on",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "purchaser": {
                      "description": "The user making the purchase",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "referenceId": {
                              "type": "string",
                              "description": "The reference id of the user"
                            },
                            "email": {
                              "type": "string",
                              "description": "The email of the user"
                            }
                          },
                          "required": [
                            "referenceId",
                            "email"
                          ]
                        }
                      ]
                    },
                    "price": {
                      "description": "The payment amount",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "currencyId": {
                              "minLength": 1,
                              "type": "string",
                              "description": "The currency identifier"
                            },
                            "naturalAmount": {
                              "type": "string",
                              "minLength": 1,
                              "description": "The amount in the human readable format"
                            }
                          },
                          "required": [
                            "currencyId",
                            "naturalAmount"
                          ]
                        }
                      ]
                    },
                    "sku": {
                      "description": "What this payment is for",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Indicates that this payment is for a Unique Asset",
                              "enum": [
                                "MarketplaceSale"
                              ]
                            },
                            "item": {
                              "description": "The Unique Asset the payment is for.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID of the Asset"
                                    },
                                    "attributes": {
                                      "description": "The attributes of the Asset",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "traitType": {
                                            "type": "string",
                                            "description": "The name of the trait"
                                          },
                                          "value": {
                                            "type": "string",
                                            "description": "The value of the trait"
                                          }
                                        },
                                        "required": [
                                          "traitType",
                                          "value"
                                        ]
                                      }
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "The date the Asset was created"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the Asset"
                                    },
                                    "collection": {
                                      "description": "The collection the Asset belongs to",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "The name given to the collection"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "The description given to the collection"
                                            },
                                            "environment": {
                                              "type": "string",
                                              "description": "The collection's environment",
                                              "enum": [
                                                "Development",
                                                "Production"
                                              ]
                                            },
                                            "imageUrl": {
                                              "type": "string",
                                              "description": "The url of the image used to represent the collection",
                                              "nullable": true
                                            },
                                            "imported": {
                                              "type": "boolean",
                                              "description": "Whether the collection was imported"
                                            },
                                            "mintAddress": {
                                              "type": "string",
                                              "description": "The mint address of the collection on-chain",
                                              "nullable": true
                                            },
                                            "created": {
                                              "type": "number",
                                              "description": "Timestamp of collection creation"
                                            },
                                            "stats": {
                                              "description": "Statistics about the collection",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "numMinted": {
                                                      "type": "number",
                                                      "description": "The number of assets minted for this collection"
                                                    },
                                                    "floorPrice": {
                                                      "type": "number",
                                                      "description": "The floor price of the collection"
                                                    },
                                                    "numListed": {
                                                      "type": "number",
                                                      "description": "The number of assets listed for this collection"
                                                    },
                                                    "numOwners": {
                                                      "type": "number",
                                                      "description": "The number of unique owners of assets in this collection"
                                                    }
                                                  },
                                                  "required": [
                                                    "numMinted",
                                                    "floorPrice",
                                                    "numListed",
                                                    "numOwners"
                                                  ]
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "name",
                                            "description",
                                            "environment",
                                            "imported",
                                            "created"
                                          ]
                                        }
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description provided when the Asset was created"
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The asset's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imported": {
                                      "type": "boolean",
                                      "description": "Indicates if the asset belongs to an imported collection"
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "The URI for the image representing the Asset"
                                    },
                                    "status": {
                                      "type": "string",
                                      "description": "The current status of the Asset",
                                      "enum": [
                                        "Uninitiated",
                                        "Unprocessed",
                                        "Processing",
                                        "Committed",
                                        "Failed"
                                      ]
                                    },
                                    "forSale": {
                                      "type": "boolean",
                                      "description": "Indicates if the asset is currently for sale"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The address of the Asset on the blockchain"
                                    },
                                    "owner": {
                                      "description": "The current owner of the Asset.",
                                      "nullable": true,
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "type": "string",
                                              "description": "The wallet that currently holds this asset",
                                              "nullable": true
                                            },
                                            "referenceId": {
                                              "type": "string",
                                              "description": "The reference id associated with the wallet",
                                              "nullable": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "price": {
                                      "nullable": true,
                                      "type": "object",
                                      "description": "The price of the asset on the marketplace"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "created",
                                    "name",
                                    "description",
                                    "environment",
                                    "imported",
                                    "imageUrl",
                                    "status",
                                    "forSale",
                                    "mintAddress"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "item"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Indicates that this payment is for a Unique Asset mint operation.",
                              "enum": [
                                "AssetMint"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Indicates that this payment is for a generic purchase",
                              "enum": [
                                "Generic"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the payment",
                      "enum": [
                        "Pending",
                        "Confirmed",
                        "Completed",
                        "Failed",
                        "Expired"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "environment",
                    "purchaser",
                    "price",
                    "sku",
                    "status"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/nx/loyalty-rewards/programs": {
      "get": {
        "operationId": "LoyaltyProgramController_getLoyaltyPrograms",
        "summary": "Get Loyalty Programs",
        "description": "### Returns a list of all loyalty programs in the project",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "The loyalty programs",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the Loyalty Program"
                          },
                          "image": {
                            "type": "string",
                            "description": "The associated image URL of the Loyalty Program"
                          },
                          "environment": {
                            "type": "object",
                            "description": "The Environment of the Enrollment"
                          },
                          "id": {
                            "type": "string",
                            "description": "The ID of the Loyalty Program"
                          },
                          "address": {
                            "type": "string",
                            "description": "The on-chain address of the Loyalty Program"
                          },
                          "enrollmentCurrencyId": {
                            "type": "string",
                            "description": "The currency id of the enrollment currency. Register new currencies under /nx/currencies"
                          },
                          "enrollmentMintAddress": {
                            "type": "string",
                            "description": "The on-chain address of the enrollment currency"
                          },
                          "rewardCurrencyId": {
                            "type": "string",
                            "description": "The currency id of the reward currency. Register new currencies under /nx/currencies"
                          },
                          "rewardMintAddress": {
                            "type": "string",
                            "description": "The on-chain address of the reward currency"
                          },
                          "maxTokens": {
                            "type": "string",
                            "description": "The max number of tokens that can be enrolled in this program"
                          },
                          "maxEnrollmentPeriod": {
                            "type": "number",
                            "description": "The max amount of time in seconds that an enrollment can last in this program"
                          },
                          "minEnrollmentPeriod": {
                            "type": "number",
                            "description": "The min amount of time in seconds that an enrollment can last in this program"
                          },
                          "maxEnrollments": {
                            "type": "number",
                            "description": "The max number of enrollments that this program can support"
                          },
                          "projectId": {
                            "type": "string",
                            "description": "The project ID that owns this Loyalty Program"
                          },
                          "adminAddress": {
                            "type": "string",
                            "description": "The on-chain address of the wallet that has administrative control over this Loyalty Program"
                          },
                          "fundingAddress": {
                            "type": "string",
                            "description": "The on-chain address of the rewards token account"
                          },
                          "currentSnapshotId": {
                            "type": "string",
                            "description": "The ID of the latest snapshot of the rewards in the program (if one exists)"
                          },
                          "rewards": {
                            "description": "A breakdown of rewards that have been allocated to enrollments",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "totalAllocated": {
                                    "type": "string",
                                    "description": "The total amount of rewards that have been allocated to enrollments"
                                  },
                                  "totalUnallocated": {
                                    "type": "string",
                                    "description": "The unallocated rewards that are just sitting in the program"
                                  },
                                  "totalClaimed": {
                                    "type": "string",
                                    "description": "The amount of rewards claimed from the program"
                                  },
                                  "rewardFunding": {
                                    "type": "string",
                                    "description": "The total amount of rewards that are currently in the program"
                                  }
                                },
                                "required": [
                                  "totalAllocated",
                                  "totalUnallocated",
                                  "totalClaimed",
                                  "rewardFunding"
                                ]
                              }
                            ]
                          },
                          "allowNewEnrollees": {
                            "type": "boolean",
                            "description": "Whether new enrollments are currently allowed in the program (can be changed by administrator wallet)"
                          }
                        },
                        "required": [
                          "name",
                          "image",
                          "environment",
                          "id",
                          "address",
                          "enrollmentCurrencyId",
                          "enrollmentMintAddress",
                          "rewardCurrencyId",
                          "rewardMintAddress",
                          "maxTokens",
                          "maxEnrollmentPeriod",
                          "minEnrollmentPeriod",
                          "maxEnrollments",
                          "projectId",
                          "adminAddress",
                          "fundingAddress",
                          "rewards",
                          "allowNewEnrollees"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      },
      "post": {
        "operationId": "LoyaltyProgramController_createLoyaltyProgram",
        "summary": "Create Loyalty Program",
        "description": "### Sends a transaction to create a new loyalty program.\n    \nNote: This action uses the developer wallet",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-wallet-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Optional name of the program, shown in the UI"
                  },
                  "image": {
                    "type": "string",
                    "description": "Optional associated image URL of the program, shown in the UI"
                  },
                  "enrollmentCurrencyId": {
                    "type": "string",
                    "description": "The currency id of the enrollment currency. Register under /nx/currencies"
                  },
                  "rewardCurrencyId": {
                    "type": "string",
                    "description": "The currency id of the enrollment currency. Register under /nx/currencies"
                  },
                  "maxEnrollments": {
                    "type": "number",
                    "description": "The max number of enrollments that this pool can support (up to 32,000)"
                  },
                  "maxTokens": {
                    "type": "string",
                    "description": "The max number of enrolled tokens that this pool can support (as a string). Up to 2^64."
                  },
                  "maxEnrollmentPeriod": {
                    "type": "number",
                    "description": "The max amount of time in seconds that an enrollment can last."
                  },
                  "minEnrollmentPeriod": {
                    "type": "number",
                    "description": "The minimum amount of time, in seconds, that an enrollment can last."
                  }
                },
                "required": [
                  "enrollmentCurrencyId",
                  "rewardCurrencyId",
                  "maxEnrollments",
                  "maxTokens",
                  "maxEnrollmentPeriod",
                  "minEnrollmentPeriod"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the newly created program"
                    },
                    "transactionId": {
                      "type": "string",
                      "description": "The GameShift ID of the on-chain transaction that created the program"
                    },
                    "transactionHash": {
                      "type": "string",
                      "description": "The transaction hash, can be used on explorers"
                    }
                  },
                  "required": [
                    "id",
                    "transactionId",
                    "transactionHash"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}": {
      "put": {
        "operationId": "LoyaltyProgramController_updateLoyaltyProgram",
        "summary": "Update Loyalty Program",
        "description": "### Sends a transaction to update a loyalty program.\n    \n - To close a program, set `open` to false.\n    \nNote: This action uses the developer wallet",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-wallet-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "open",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to update",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "GameShift transaction id"
                    },
                    "transactionHash": {
                      "type": "string",
                      "description": "Transaction hash"
                    }
                  },
                  "required": [
                    "transactionId",
                    "transactionHash"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      },
      "get": {
        "operationId": "LoyaltyProgramController_getLoyaltyProgram",
        "summary": "Get Loyalty Program",
        "description": "### Retrieves information about a specific loyalty program.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to get",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the Loyalty Program"
                    },
                    "image": {
                      "type": "string",
                      "description": "The associated image URL of the Loyalty Program"
                    },
                    "environment": {
                      "type": "object",
                      "description": "The Environment of the Enrollment"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the Loyalty Program"
                    },
                    "address": {
                      "type": "string",
                      "description": "The on-chain address of the Loyalty Program"
                    },
                    "enrollmentCurrencyId": {
                      "type": "string",
                      "description": "The currency id of the enrollment currency. Register new currencies under /nx/currencies"
                    },
                    "enrollmentMintAddress": {
                      "type": "string",
                      "description": "The on-chain address of the enrollment currency"
                    },
                    "rewardCurrencyId": {
                      "type": "string",
                      "description": "The currency id of the reward currency. Register new currencies under /nx/currencies"
                    },
                    "rewardMintAddress": {
                      "type": "string",
                      "description": "The on-chain address of the reward currency"
                    },
                    "maxTokens": {
                      "type": "string",
                      "description": "The max number of tokens that can be enrolled in this program"
                    },
                    "maxEnrollmentPeriod": {
                      "type": "number",
                      "description": "The max amount of time in seconds that an enrollment can last in this program"
                    },
                    "minEnrollmentPeriod": {
                      "type": "number",
                      "description": "The min amount of time in seconds that an enrollment can last in this program"
                    },
                    "maxEnrollments": {
                      "type": "number",
                      "description": "The max number of enrollments that this program can support"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "The project ID that owns this Loyalty Program"
                    },
                    "adminAddress": {
                      "type": "string",
                      "description": "The on-chain address of the wallet that has administrative control over this Loyalty Program"
                    },
                    "fundingAddress": {
                      "type": "string",
                      "description": "The on-chain address of the rewards token account"
                    },
                    "currentSnapshotId": {
                      "type": "string",
                      "description": "The ID of the latest snapshot of the rewards in the program (if one exists)"
                    },
                    "rewards": {
                      "description": "A breakdown of rewards that have been allocated to enrollments",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "totalAllocated": {
                              "type": "string",
                              "description": "The total amount of rewards that have been allocated to enrollments"
                            },
                            "totalUnallocated": {
                              "type": "string",
                              "description": "The unallocated rewards that are just sitting in the program"
                            },
                            "totalClaimed": {
                              "type": "string",
                              "description": "The amount of rewards claimed from the program"
                            },
                            "rewardFunding": {
                              "type": "string",
                              "description": "The total amount of rewards that are currently in the program"
                            }
                          },
                          "required": [
                            "totalAllocated",
                            "totalUnallocated",
                            "totalClaimed",
                            "rewardFunding"
                          ]
                        }
                      ]
                    },
                    "allowNewEnrollees": {
                      "type": "boolean",
                      "description": "Whether new enrollments are currently allowed in the program (can be changed by administrator wallet)"
                    }
                  },
                  "required": [
                    "name",
                    "image",
                    "environment",
                    "id",
                    "address",
                    "enrollmentCurrencyId",
                    "enrollmentMintAddress",
                    "rewardCurrencyId",
                    "rewardMintAddress",
                    "maxTokens",
                    "maxEnrollmentPeriod",
                    "minEnrollmentPeriod",
                    "maxEnrollments",
                    "projectId",
                    "adminAddress",
                    "fundingAddress",
                    "rewards",
                    "allowNewEnrollees"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      },
      "delete": {
        "operationId": "LoyaltyProgramController_deleteLoyaltyProgram",
        "summary": "Delete Loyalty Program",
        "description": "### Deletes a loyalty program and returns state rent back to the developer wallet.\n    \n - Requires all enrollments to be closed before deletion.\n    \nNote: This action uses the developer wallet",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-wallet-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to delete",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "GameShift transaction id"
                    },
                    "transactionHash": {
                      "type": "string",
                      "description": "Transaction hash"
                    }
                  },
                  "required": [
                    "transactionId",
                    "transactionHash"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}/metadata": {
      "put": {
        "operationId": "LoyaltyProgramController_setLoyaltyProgramName",
        "summary": "Set Loyalty Program Metadata",
        "description": "### Sets the metadata of a loyalty program.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to set the metadata of",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name of the program"
                  },
                  "image": {
                    "type": "string",
                    "description": "URL for the Loyalty Program's image",
                    "default": "https://solana.com/src/img/branding/solanaLogoMark.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the Loyalty Program"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Loyalty Program"
                    },
                    "image": {
                      "type": "string",
                      "description": "The associated image URL of the Loyalty Program"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "image"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}/enrollments": {
      "get": {
        "operationId": "LoyaltyProgramController_getLoyaltyProgramEnrollments",
        "summary": "Get Loyalty Program Enrollments",
        "description": "### Retrieves a paginated list of enrollments for a given program.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to get enrollment for",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of Enrollments",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "environment": {
                            "type": "object",
                            "description": "The Environment of the Enrollment"
                          },
                          "id": {
                            "type": "string",
                            "description": "The ID of the Enrollment"
                          },
                          "enrollmentAddress": {
                            "type": "string",
                            "description": "The on-chain address of the Enrollment"
                          },
                          "lastSnapshotId": {
                            "type": "string",
                            "description": "The ID of the last reward snapshot issued that included the Enrollment"
                          },
                          "enrollmentStartTime": {
                            "format": "date-time",
                            "type": "string",
                            "description": "The time the Enrollment was created"
                          },
                          "commitmentPeriod": {
                            "type": "number",
                            "description": "The time in seconds that the Enrollment will last for"
                          },
                          "elapsedEnrollmentTime": {
                            "type": "number",
                            "description": "Time elapsed since the creation of the Enrollment (in seconds)"
                          },
                          "enrollmentPeriod": {
                            "type": "number",
                            "description": "The time that the Enrollment is committed to before it can claim rewards"
                          },
                          "ownerAddress": {
                            "type": "string",
                            "description": "The on-chain address of the owner of the Enrollment"
                          },
                          "ownerId": {
                            "type": "string",
                            "description": "The user reference ID of the owner of the Enrollment"
                          },
                          "programId": {
                            "type": "string",
                            "description": "The ID of the LoyaltyProgram the Enrollment belongs to"
                          },
                          "programAddress": {
                            "type": "string",
                            "description": "The on-chain address of the LoyaltyProgram the Enrollment belongs to"
                          },
                          "enrolledBalance": {
                            "type": "string",
                            "description": "The balance of the Enrollment"
                          },
                          "allocatedRewards": {
                            "type": "string",
                            "description": "The allocated reward balance of the Enrollment"
                          },
                          "claimedRewards": {
                            "type": "string",
                            "description": "Number of allocated rewards claimed so far, for the Enrollment"
                          }
                        },
                        "required": [
                          "environment",
                          "id",
                          "enrollmentAddress",
                          "enrollmentStartTime",
                          "commitmentPeriod",
                          "elapsedEnrollmentTime",
                          "enrollmentPeriod",
                          "ownerAddress",
                          "ownerId",
                          "programId",
                          "programAddress",
                          "enrolledBalance",
                          "allocatedRewards",
                          "claimedRewards"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      },
      "post": {
        "operationId": "LoyaltyProgramController_enrollUserInLoyaltyProgram",
        "summary": "Enroll User in Loyalty Program",
        "description": "### Creates a consent url for a user to enroll in a loyalty program.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to enroll the user in",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount of tokens to enroll (decimals ok)"
                  },
                  "userId": {
                    "type": "string",
                    "description": "The reference user ID of the enrollment"
                  },
                  "enrollmentPeriod": {
                    "type": "number",
                    "description": "The period of enrollment in seconds"
                  }
                },
                "required": [
                  "amount",
                  "userId",
                  "enrollmentPeriod"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The id for the transaction. Can be used to get the status of the transaction."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent for the transaction."
                    },
                    "enrollmentId": {
                      "type": "string",
                      "description": "The enrollment ID created if the user's transaction completes successfully"
                    }
                  },
                  "required": [
                    "transactionId",
                    "consentUrl",
                    "enrollmentId"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}/rewards": {
      "post": {
        "operationId": "LoyaltyProgramController_createLoyaltyProgramRewardSnapshot",
        "summary": "Create Loyalty Program Rewards Snapshot",
        "description": "### Creates a reward snapshot for a given program. Webhook will be sent once processing is complete",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to create a reward snapshot for",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amountToAllocate": {
                    "type": "string",
                    "description": "Amount of unallocated reward tokens to allocate (final processed balance may differ due to rounding)"
                  },
                  "enrollments": {
                    "description": "A list of enrollments and corresponding multipliers to allocate rewards to",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "enrollmentId": {
                          "type": "string",
                          "description": "The ID of the Enrollment"
                        },
                        "multiplier": {
                          "type": "number",
                          "description": "The multiplier that will be averaged against all others to get final percent of allocation given to enrollment"
                        }
                      },
                      "required": [
                        "enrollmentId",
                        "multiplier"
                      ]
                    }
                  },
                  "requireAllEnrollmentIds": {
                    "type": "boolean",
                    "description": "If true, throw an error if some of the program's enrollment IDs are missing from the enrollments list"
                  }
                },
                "required": [
                  "amountToAllocate",
                  "enrollments"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the LoyaltyRewardsSnapshot"
                    },
                    "created": {
                      "type": "number",
                      "description": "The date the LoyaltyRewardsSnapshot was created"
                    },
                    "programId": {
                      "type": "string",
                      "description": "The ID of the LoyaltyProgram the LoyaltyRewardsSnapshot belongs to"
                    },
                    "allocatedRewards": {
                      "type": "string",
                      "description": "The amount of rewards the LoyaltyRewardsSnapshot contains (in subunits - no decimals)"
                    },
                    "status": {
                      "type": "object",
                      "description": "The current status of the LoyaltyRewardsSnapshot"
                    },
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message, if any status is Error"
                    },
                    "publishedTransactionHash": {
                      "type": "string",
                      "description": "The transaction hash used to publish this snapshot, if it has been published"
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "programId",
                    "allocatedRewards",
                    "status"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      },
      "get": {
        "operationId": "LoyaltyProgramController_getLoyaltyProgramRewards",
        "summary": "Get Loyalty Program Rewards Snapshots",
        "description": "### Retrieves a paginated list of reward snapshots for a given program.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program this reward snapshot was created for",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of Reward Snapshots",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the LoyaltyRewardsSnapshot"
                          },
                          "created": {
                            "type": "number",
                            "description": "The date the LoyaltyRewardsSnapshot was created"
                          },
                          "programId": {
                            "type": "string",
                            "description": "The ID of the LoyaltyProgram the LoyaltyRewardsSnapshot belongs to"
                          },
                          "allocatedRewards": {
                            "type": "string",
                            "description": "The amount of rewards the LoyaltyRewardsSnapshot contains (in subunits - no decimals)"
                          },
                          "status": {
                            "type": "object",
                            "description": "The current status of the LoyaltyRewardsSnapshot"
                          },
                          "errorMessage": {
                            "type": "string",
                            "description": "Error message, if any status is Error"
                          },
                          "publishedTransactionHash": {
                            "type": "string",
                            "description": "The transaction hash used to publish this snapshot, if it has been published"
                          }
                        },
                        "required": [
                          "id",
                          "created",
                          "programId",
                          "allocatedRewards",
                          "status"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}/rewards/{rewardsId}": {
      "get": {
        "operationId": "LoyaltyProgramController_getLoyaltyProgramRewardSnapshot",
        "summary": "Get Loyalty Program Rewards Snapshot",
        "description": "### Retrieve information about a specific reward snapshot",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rewardsId",
            "required": true,
            "in": "path",
            "description": "Specifies the reward snapshot to retrieve",
            "schema": {}
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program this reward snapshot was created for",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the LoyaltyRewardsSnapshot"
                    },
                    "created": {
                      "type": "number",
                      "description": "The date the LoyaltyRewardsSnapshot was created"
                    },
                    "programId": {
                      "type": "string",
                      "description": "The ID of the LoyaltyProgram the LoyaltyRewardsSnapshot belongs to"
                    },
                    "allocatedRewards": {
                      "type": "string",
                      "description": "The amount of rewards the LoyaltyRewardsSnapshot contains (in subunits - no decimals)"
                    },
                    "status": {
                      "type": "object",
                      "description": "The current status of the LoyaltyRewardsSnapshot"
                    },
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message, if any status is Error"
                    },
                    "publishedTransactionHash": {
                      "type": "string",
                      "description": "The transaction hash used to publish this snapshot, if it has been published"
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "programId",
                    "allocatedRewards",
                    "status"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}/rewards/{rewardsId}/publish": {
      "post": {
        "operationId": "LoyaltyProgramController_allocateLoyaltyProgramRewards",
        "summary": "Publish Loyalty Program Rewards",
        "description": "### Sends a transaction to publish rewards to enrollments.\n    \n - Requires rewards to be funded before allocation.\n    \n - Requires rewards snapshot to be created before allocation (hence :rewardId)\n    \nNote: This action uses the developer wallet",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-wallet-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rewardsId",
            "required": true,
            "in": "path",
            "description": "Specifies the reward snapshot",
            "schema": {}
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "GameShift transaction id"
                    },
                    "transactionHash": {
                      "type": "string",
                      "description": "Transaction hash"
                    }
                  },
                  "required": [
                    "transactionId",
                    "transactionHash"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}/fund": {
      "post": {
        "operationId": "LoyaltyProgramController_fundLoyaltyProgramRewards",
        "summary": "Fund Loyalty Program Rewards",
        "description": "### Sends a transaction to transfer reward funds from the developer wallet to the loyalty program wallet.\n    \nNote: This action uses the developer wallet",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-wallet-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to fund rewards for",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount of tokens to move (supports decimals)"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "GameShift transaction id"
                    },
                    "transactionHash": {
                      "type": "string",
                      "description": "Transaction hash"
                    }
                  },
                  "required": [
                    "transactionId",
                    "transactionHash"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}/withdraw": {
      "post": {
        "operationId": "LoyaltyProgramController_withdrawLoyaltyProgramRewards",
        "summary": "Withdraw Loyalty Program Rewards",
        "description": "### Sends a transaction to withdraw unallocated reward funds from the loyalty program wallet to the developer wallet.\n    \nNote: This action uses the developer wallet",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-wallet-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to withdraw unallocated rewards from",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount of tokens to move (supports decimals)"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "GameShift transaction id"
                    },
                    "transactionHash": {
                      "type": "string",
                      "description": "Transaction hash"
                    }
                  },
                  "required": [
                    "transactionId",
                    "transactionHash"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/programs/{programId}/stats/summary": {
      "get": {
        "operationId": "LoyaltyProgramController_getLoyaltyProgramStatsSummary",
        "summary": "Get Loyalty Program Stats Summary",
        "description": "### Retrieves a summary of stats for a given program.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "description": "Specifies the program to get stats for",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enrollees": {
                      "description": "Breakdown of enrollees",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "uniqueUsers": {
                              "type": "number",
                              "description": "Total number of unique users who have enrolled in the program"
                            }
                          },
                          "required": [
                            "uniqueUsers"
                          ]
                        }
                      ]
                    },
                    "enrollments": {
                      "description": "Breakdown of enrollments",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "totalEnrollments": {
                              "type": "number",
                              "description": "Total number of enrollments in the program"
                            },
                            "enrollmentPeriodComplete": {
                              "type": "number",
                              "description": "Total number of enrollments that have completed"
                            },
                            "enrollmentPeriodOngoing": {
                              "type": "number",
                              "description": "Total number of enrollments that are ongoing"
                            },
                            "totalEnrolledTokens": {
                              "type": "string",
                              "description": "Total number of enrollments enrolled in the program"
                            }
                          },
                          "required": [
                            "totalEnrollments",
                            "enrollmentPeriodComplete",
                            "enrollmentPeriodOngoing",
                            "totalEnrolledTokens"
                          ]
                        }
                      ]
                    },
                    "rewards": {
                      "description": "Breakdown of rewards",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "totalAllocated": {
                              "type": "string",
                              "description": "The total amount of rewards that have been allocated to enrollments"
                            },
                            "totalUnallocated": {
                              "type": "string",
                              "description": "The unallocated rewards that are just sitting in the program"
                            },
                            "totalClaimed": {
                              "type": "string",
                              "description": "The amount of rewards claimed from the program"
                            },
                            "rewardFunding": {
                              "type": "string",
                              "description": "The total amount of rewards that are currently in the program"
                            }
                          },
                          "required": [
                            "totalAllocated",
                            "totalUnallocated",
                            "totalClaimed",
                            "rewardFunding"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "enrollees",
                    "enrollments",
                    "rewards"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Programs"
        ]
      }
    },
    "/nx/loyalty-rewards/enrollments/{enrollmentId}/claim": {
      "post": {
        "operationId": "LoyaltyProgramEnrollmentsController_claimRewardsFromLoyaltyProgram",
        "summary": "Claim Rewards from Loyalty Program",
        "description": "### Creates a consent url for a user to claim rewards for their enrollment from a loyalty program.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "description": "Specifies the enrollment to claim rewards for",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount to claim (decimals ok)"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The id for the transaction. Can be used to get the status of the transaction."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent for the transaction."
                    }
                  },
                  "required": [
                    "transactionId",
                    "consentUrl"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Program Enrollments"
        ]
      }
    },
    "/nx/loyalty-rewards/enrollments/{enrollmentId}": {
      "delete": {
        "operationId": "LoyaltyProgramEnrollmentsController_disenrollUserFromLoyaltyProgram",
        "summary": "Disenroll User in Loyalty Program",
        "description": "### Creates a consent url for a user to disenroll & withdraw their balance from a loyalty program.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "description": "Specifies the enrollment to delete",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "forfeitRewardsOnDisenroll": {
                    "type": "boolean",
                    "description": "Whether to allow unclaimed rewards to be forfeited",
                    "default": false
                  }
                },
                "required": [
                  "forfeitRewardsOnDisenroll"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The id for the transaction. Can be used to get the status of the transaction."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent for the transaction."
                    }
                  },
                  "required": [
                    "transactionId",
                    "consentUrl"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Program Enrollments"
        ]
      },
      "get": {
        "operationId": "LoyaltyProgramEnrollmentsController_getLoyaltyProgramEnrollmentById",
        "summary": "Get Loyalty Program Enrollment",
        "description": "### Retrieve information about a specific enrollment",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "description": "Specifies the enrollment to fetch",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "environment": {
                      "type": "object",
                      "description": "The Environment of the Enrollment"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the Enrollment"
                    },
                    "enrollmentAddress": {
                      "type": "string",
                      "description": "The on-chain address of the Enrollment"
                    },
                    "lastSnapshotId": {
                      "type": "string",
                      "description": "The ID of the last reward snapshot issued that included the Enrollment"
                    },
                    "enrollmentStartTime": {
                      "format": "date-time",
                      "type": "string",
                      "description": "The time the Enrollment was created"
                    },
                    "commitmentPeriod": {
                      "type": "number",
                      "description": "The time in seconds that the Enrollment will last for"
                    },
                    "elapsedEnrollmentTime": {
                      "type": "number",
                      "description": "Time elapsed since the creation of the Enrollment (in seconds)"
                    },
                    "enrollmentPeriod": {
                      "type": "number",
                      "description": "The time that the Enrollment is committed to before it can claim rewards"
                    },
                    "ownerAddress": {
                      "type": "string",
                      "description": "The on-chain address of the owner of the Enrollment"
                    },
                    "ownerId": {
                      "type": "string",
                      "description": "The user reference ID of the owner of the Enrollment"
                    },
                    "programId": {
                      "type": "string",
                      "description": "The ID of the LoyaltyProgram the Enrollment belongs to"
                    },
                    "programAddress": {
                      "type": "string",
                      "description": "The on-chain address of the LoyaltyProgram the Enrollment belongs to"
                    },
                    "enrolledBalance": {
                      "type": "string",
                      "description": "The balance of the Enrollment"
                    },
                    "allocatedRewards": {
                      "type": "string",
                      "description": "The allocated reward balance of the Enrollment"
                    },
                    "claimedRewards": {
                      "type": "string",
                      "description": "Number of allocated rewards claimed so far, for the Enrollment"
                    }
                  },
                  "required": [
                    "environment",
                    "id",
                    "enrollmentAddress",
                    "enrollmentStartTime",
                    "commitmentPeriod",
                    "elapsedEnrollmentTime",
                    "enrollmentPeriod",
                    "ownerAddress",
                    "ownerId",
                    "programId",
                    "programAddress",
                    "enrolledBalance",
                    "allocatedRewards",
                    "claimedRewards"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Program Enrollments"
        ]
      }
    },
    "/nx/loyalty-rewards/enrollments": {
      "get": {
        "operationId": "LoyaltyProgramEnrollmentsController_getLoyaltyProgramEnrollmentsByProject",
        "summary": "Get Loyalty Program Enrollments",
        "description": "### Retrieves a paginated list of all enrollments in the project.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of Enrollments",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "environment": {
                            "type": "object",
                            "description": "The Environment of the Enrollment"
                          },
                          "id": {
                            "type": "string",
                            "description": "The ID of the Enrollment"
                          },
                          "enrollmentAddress": {
                            "type": "string",
                            "description": "The on-chain address of the Enrollment"
                          },
                          "lastSnapshotId": {
                            "type": "string",
                            "description": "The ID of the last reward snapshot issued that included the Enrollment"
                          },
                          "enrollmentStartTime": {
                            "format": "date-time",
                            "type": "string",
                            "description": "The time the Enrollment was created"
                          },
                          "commitmentPeriod": {
                            "type": "number",
                            "description": "The time in seconds that the Enrollment will last for"
                          },
                          "elapsedEnrollmentTime": {
                            "type": "number",
                            "description": "Time elapsed since the creation of the Enrollment (in seconds)"
                          },
                          "enrollmentPeriod": {
                            "type": "number",
                            "description": "The time that the Enrollment is committed to before it can claim rewards"
                          },
                          "ownerAddress": {
                            "type": "string",
                            "description": "The on-chain address of the owner of the Enrollment"
                          },
                          "ownerId": {
                            "type": "string",
                            "description": "The user reference ID of the owner of the Enrollment"
                          },
                          "programId": {
                            "type": "string",
                            "description": "The ID of the LoyaltyProgram the Enrollment belongs to"
                          },
                          "programAddress": {
                            "type": "string",
                            "description": "The on-chain address of the LoyaltyProgram the Enrollment belongs to"
                          },
                          "enrolledBalance": {
                            "type": "string",
                            "description": "The balance of the Enrollment"
                          },
                          "allocatedRewards": {
                            "type": "string",
                            "description": "The allocated reward balance of the Enrollment"
                          },
                          "claimedRewards": {
                            "type": "string",
                            "description": "Number of allocated rewards claimed so far, for the Enrollment"
                          }
                        },
                        "required": [
                          "environment",
                          "id",
                          "enrollmentAddress",
                          "enrollmentStartTime",
                          "commitmentPeriod",
                          "elapsedEnrollmentTime",
                          "enrollmentPeriod",
                          "ownerAddress",
                          "ownerId",
                          "programId",
                          "programAddress",
                          "enrolledBalance",
                          "allocatedRewards",
                          "claimedRewards"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Loyalty Program Enrollments"
        ]
      }
    },
    "/nx/stackable-assets": {
      "post": {
        "operationId": "StackableAssetController_createStackableAsset",
        "summary": "Create Stackable Asset",
        "description": "### Creates a new Stackable Asset.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attributes": {
                    "description": "Add attributes to your Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "collectionId": {
                    "type": "string",
                    "description": "Add the Asset to an existing collection"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description for the Asset",
                    "maxLength": 64
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "A url to the image underlying the Asset"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Asset. Max length: 32 chars",
                    "maxLength": 32
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The symbol of the Asset. Max length: 5 chars",
                    "maxLength": 5
                  }
                },
                "required": [
                  "collectionId",
                  "description",
                  "imageUrl",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the Stackable Asset"
                    },
                    "attributes": {
                      "description": "Add attributes to your Asset",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "traitType": {
                            "type": "string",
                            "description": "The name of the trait"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the trait"
                          }
                        },
                        "required": [
                          "traitType",
                          "value"
                        ]
                      }
                    },
                    "created": {
                      "type": "number",
                      "description": "The date the Asset was created"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Stackable Asset. Max length: 32 chars",
                      "maxLength": 32
                    },
                    "symbol": {
                      "type": "string",
                      "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                      "maxLength": 5
                    },
                    "description": {
                      "type": "string",
                      "description": "A description for the Asset",
                      "maxLength": 64
                    },
                    "collection": {
                      "description": "The collection the Asset belongs to",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name given to the collection"
                            },
                            "description": {
                              "type": "string",
                              "description": "The description given to the collection"
                            },
                            "environment": {
                              "type": "string",
                              "description": "The collection's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "The url of the image used to represent the collection",
                              "nullable": true
                            },
                            "imported": {
                              "type": "boolean",
                              "description": "Whether the collection was imported"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The mint address of the collection on-chain",
                              "nullable": true
                            },
                            "created": {
                              "type": "number",
                              "description": "Timestamp of collection creation"
                            },
                            "stats": {
                              "description": "Statistics about the collection",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "numMinted": {
                                      "type": "number",
                                      "description": "The number of assets minted for this collection"
                                    },
                                    "floorPrice": {
                                      "type": "number",
                                      "description": "The floor price of the collection"
                                    },
                                    "numListed": {
                                      "type": "number",
                                      "description": "The number of assets listed for this collection"
                                    },
                                    "numOwners": {
                                      "type": "number",
                                      "description": "The number of unique owners of assets in this collection"
                                    }
                                  },
                                  "required": [
                                    "numMinted",
                                    "floorPrice",
                                    "numListed",
                                    "numOwners"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "description",
                            "environment",
                            "imported",
                            "created"
                          ]
                        }
                      ]
                    },
                    "environment": {
                      "type": "string",
                      "description": "The asset's environment",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "imageUrl": {
                      "type": "string",
                      "description": "A url to the image underlying the Asset"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the Asset",
                      "enum": [
                        "Uninitiated",
                        "Unprocessed",
                        "Processing",
                        "Committed",
                        "Failed"
                      ]
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The address of the Asset on the blockchain"
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "name",
                    "description",
                    "environment",
                    "imageUrl",
                    "status"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Stackable Assets"
        ]
      }
    },
    "/nx/stackable-assets/{itemId}": {
      "post": {
        "operationId": "StackableAssetController_issueAsset",
        "summary": "Issue Stackable Asset(s)",
        "description": "### Issue some quantity of a Stackable Asset to a User.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Stackable Asset to issue.",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "destinationUserReferenceId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The reference id of the user the asset should be assigned to"
                  },
                  "amount": {
                    "type": "number",
                    "minimum": 1,
                    "description": "The amount of currency to be transferred"
                  }
                },
                "required": [
                  "destinationUserReferenceId",
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the Stackable Asset"
                    },
                    "attributes": {
                      "description": "Add attributes to your Asset",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "traitType": {
                            "type": "string",
                            "description": "The name of the trait"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the trait"
                          }
                        },
                        "required": [
                          "traitType",
                          "value"
                        ]
                      }
                    },
                    "created": {
                      "type": "number",
                      "description": "The date the Asset was created"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Stackable Asset. Max length: 32 chars",
                      "maxLength": 32
                    },
                    "symbol": {
                      "type": "string",
                      "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                      "maxLength": 5
                    },
                    "description": {
                      "type": "string",
                      "description": "A description for the Asset",
                      "maxLength": 64
                    },
                    "collection": {
                      "description": "The collection the Asset belongs to",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name given to the collection"
                            },
                            "description": {
                              "type": "string",
                              "description": "The description given to the collection"
                            },
                            "environment": {
                              "type": "string",
                              "description": "The collection's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "The url of the image used to represent the collection",
                              "nullable": true
                            },
                            "imported": {
                              "type": "boolean",
                              "description": "Whether the collection was imported"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The mint address of the collection on-chain",
                              "nullable": true
                            },
                            "created": {
                              "type": "number",
                              "description": "Timestamp of collection creation"
                            },
                            "stats": {
                              "description": "Statistics about the collection",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "numMinted": {
                                      "type": "number",
                                      "description": "The number of assets minted for this collection"
                                    },
                                    "floorPrice": {
                                      "type": "number",
                                      "description": "The floor price of the collection"
                                    },
                                    "numListed": {
                                      "type": "number",
                                      "description": "The number of assets listed for this collection"
                                    },
                                    "numOwners": {
                                      "type": "number",
                                      "description": "The number of unique owners of assets in this collection"
                                    }
                                  },
                                  "required": [
                                    "numMinted",
                                    "floorPrice",
                                    "numListed",
                                    "numOwners"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "description",
                            "environment",
                            "imported",
                            "created"
                          ]
                        }
                      ]
                    },
                    "environment": {
                      "type": "string",
                      "description": "The asset's environment",
                      "enum": [
                        "Development",
                        "Production"
                      ]
                    },
                    "imageUrl": {
                      "type": "string",
                      "description": "A url to the image underlying the Asset"
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the Asset",
                      "enum": [
                        "Uninitiated",
                        "Unprocessed",
                        "Processing",
                        "Committed",
                        "Failed"
                      ]
                    },
                    "mintAddress": {
                      "type": "string",
                      "description": "The address of the Asset on the blockchain"
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "name",
                    "description",
                    "environment",
                    "imageUrl",
                    "status"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Stackable Assets"
        ]
      },
      "put": {
        "operationId": "StackableAssetController_updateAsset",
        "summary": "Update Stackable Asset",
        "description": "### Updates a 'Stackable Asset'.\n      \nProvide attributes that will override the current asset's attributes. Please note that any attributes not specified will be deleted from the existing asset.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Specifies the Stackable Asset to update.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stackable Assets"
        ]
      }
    },
    "/nx/crafting-recipes": {
      "get": {
        "operationId": "CraftingRecipesController_getAll",
        "summary": "Get All Crafting Recpies",
        "description": "### Get a paginated list of all Crafting Recipes",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies the page to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "The number of items on each page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "description": "A list of Crafting Recipes",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Identifies the recipe."
                          },
                          "consumes": {
                            "type": "array",
                            "description": "What this recipe will consume.",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "Currency"
                                      ],
                                      "description": "Specifies that this is a currency"
                                    },
                                    "id": {
                                      "type": "string",
                                      "minLength": 1,
                                      "description": "Identifies the currency to consume"
                                    },
                                    "naturalAmount": {
                                      "type": "string",
                                      "description": "The amount of the currency to consume"
                                    },
                                    "currency": {
                                      "description": "Details about the currency",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "The ID for the currency"
                                            },
                                            "mintAddress": {
                                              "type": "string",
                                              "description": "The address for the currency's SPL token mint"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "The name of the currency"
                                            },
                                            "symbol": {
                                              "type": "string",
                                              "description": "The currency's symbol"
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "mintAddress",
                                            "name",
                                            "symbol"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "id",
                                    "naturalAmount",
                                    "currency"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "StackableAsset"
                                      ],
                                      "description": "Specifies that this is a stackable asset"
                                    },
                                    "id": {
                                      "type": "string",
                                      "description": "Identifies the stackable asset to consume"
                                    },
                                    "naturalAmount": {
                                      "type": "string",
                                      "description": "The amount of the stackable asset to consume"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "id",
                                    "naturalAmount"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "UniqueAsset"
                                      ],
                                      "description": "Specifies that this is a unique asset."
                                    },
                                    "id": {
                                      "type": "string",
                                      "description": "Identifies the unique asset to consume."
                                    },
                                    "method": {
                                      "enum": [
                                        "Transfer",
                                        "Destroy"
                                      ],
                                      "type": "string",
                                      "description": "(Optional) Determines how the unique asset will be consumed.",
                                      "nullable": true
                                    },
                                    "uniqueAsset": {
                                      "description": "Details about the unique asset being consumed",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "The ID of the Asset"
                                            },
                                            "attributes": {
                                              "description": "The attributes of the Asset",
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "traitType": {
                                                    "type": "string",
                                                    "description": "The name of the trait"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "The value of the trait"
                                                  }
                                                },
                                                "required": [
                                                  "traitType",
                                                  "value"
                                                ]
                                              }
                                            },
                                            "created": {
                                              "type": "number",
                                              "description": "The date the Asset was created"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "The name of the Asset"
                                            },
                                            "collection": {
                                              "description": "The collection the Asset belongs to",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "description": "The name given to the collection"
                                                    },
                                                    "description": {
                                                      "type": "string",
                                                      "description": "The description given to the collection"
                                                    },
                                                    "environment": {
                                                      "type": "string",
                                                      "description": "The collection's environment",
                                                      "enum": [
                                                        "Development",
                                                        "Production"
                                                      ]
                                                    },
                                                    "imageUrl": {
                                                      "type": "string",
                                                      "description": "The url of the image used to represent the collection",
                                                      "nullable": true
                                                    },
                                                    "imported": {
                                                      "type": "boolean",
                                                      "description": "Whether the collection was imported"
                                                    },
                                                    "mintAddress": {
                                                      "type": "string",
                                                      "description": "The mint address of the collection on-chain",
                                                      "nullable": true
                                                    },
                                                    "created": {
                                                      "type": "number",
                                                      "description": "Timestamp of collection creation"
                                                    },
                                                    "stats": {
                                                      "description": "Statistics about the collection",
                                                      "allOf": [
                                                        {
                                                          "type": "object",
                                                          "properties": {
                                                            "numMinted": {
                                                              "type": "number",
                                                              "description": "The number of assets minted for this collection"
                                                            },
                                                            "floorPrice": {
                                                              "type": "number",
                                                              "description": "The floor price of the collection"
                                                            },
                                                            "numListed": {
                                                              "type": "number",
                                                              "description": "The number of assets listed for this collection"
                                                            },
                                                            "numOwners": {
                                                              "type": "number",
                                                              "description": "The number of unique owners of assets in this collection"
                                                            }
                                                          },
                                                          "required": [
                                                            "numMinted",
                                                            "floorPrice",
                                                            "numListed",
                                                            "numOwners"
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "required": [
                                                    "id",
                                                    "name",
                                                    "description",
                                                    "environment",
                                                    "imported",
                                                    "created"
                                                  ]
                                                }
                                              ]
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "The description provided when the Asset was created"
                                            },
                                            "environment": {
                                              "type": "string",
                                              "description": "The asset's environment",
                                              "enum": [
                                                "Development",
                                                "Production"
                                              ]
                                            },
                                            "imported": {
                                              "type": "boolean",
                                              "description": "Indicates if the asset belongs to an imported collection"
                                            },
                                            "imageUrl": {
                                              "type": "string",
                                              "description": "The URI for the image representing the Asset"
                                            },
                                            "status": {
                                              "type": "string",
                                              "description": "The current status of the Asset",
                                              "enum": [
                                                "Uninitiated",
                                                "Unprocessed",
                                                "Processing",
                                                "Committed",
                                                "Failed"
                                              ]
                                            },
                                            "forSale": {
                                              "type": "boolean",
                                              "description": "Indicates if the asset is currently for sale"
                                            },
                                            "mintAddress": {
                                              "type": "string",
                                              "description": "The address of the Asset on the blockchain"
                                            },
                                            "owner": {
                                              "description": "The current owner of the Asset.",
                                              "nullable": true,
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "address": {
                                                      "type": "string",
                                                      "description": "The wallet that currently holds this asset",
                                                      "nullable": true
                                                    },
                                                    "referenceId": {
                                                      "type": "string",
                                                      "description": "The reference id associated with the wallet",
                                                      "nullable": true
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "price": {
                                              "nullable": true,
                                              "type": "object",
                                              "description": "The price of the asset on the marketplace"
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "created",
                                            "name",
                                            "description",
                                            "environment",
                                            "imported",
                                            "imageUrl",
                                            "status",
                                            "forSale",
                                            "mintAddress"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "id",
                                    "uniqueAsset"
                                  ]
                                }
                              ]
                            }
                          },
                          "craftingUserReferenceId": {
                            "type": "string",
                            "description": "Idetifies the user that will fulfill the crafting recipe."
                          },
                          "metadata": {
                            "description": "Metadata to describe the recipe.",
                            "nullable": true,
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "attributes": {
                                    "description": "Associated attributes for the recipe.",
                                    "nullable": true,
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "traitType": {
                                          "type": "string",
                                          "description": "The name of the trait"
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "The value of the trait"
                                        }
                                      },
                                      "required": [
                                        "traitType",
                                        "value"
                                      ]
                                    }
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "A title to display for the recipe.",
                                    "nullable": true
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A description to display for the recipe.",
                                    "nullable": true
                                  },
                                  "image": {
                                    "type": "string",
                                    "description": "An image to display for the recipe.",
                                    "nullable": true
                                  }
                                }
                              }
                            ]
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the recipe.",
                            "enum": [
                              "Pending",
                              "Submitting",
                              "Failed",
                              "Completed",
                              "PartiallyCompleted",
                              "Expired"
                            ]
                          },
                          "transactions": {
                            "description": "The transactions that are must be complete to fulfill the recipe.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Transaction ID"
                                },
                                "created": {
                                  "type": "string",
                                  "description": "Transaction creation date",
                                  "format": "date-time"
                                },
                                "status": {
                                  "description": "Transaction confirmation status",
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Confirmed"
                                          ]
                                        },
                                        "txHash": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "status",
                                        "txHash"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Pending"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "status"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Failed"
                                          ]
                                        },
                                        "error": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "required": [
                                        "status",
                                        "error"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Expired"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "status"
                                      ]
                                    }
                                  ]
                                },
                                "details": {
                                  "description": "Transaction type and details about asset and balance changes",
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "BuyAsset",
                                            "BuyAssetWithCreditCard",
                                            "CancelAssetSale",
                                            "ChangeAssetPrice",
                                            "ListAssetSale",
                                            "TransferAsset",
                                            "TransferAssetFromDeveloper"
                                          ]
                                        },
                                        "item": {
                                          "description": "Asset details",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "description": "The ID of the Asset"
                                                },
                                                "attributes": {
                                                  "description": "The attributes of the Asset",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "traitType": {
                                                        "type": "string",
                                                        "description": "The name of the trait"
                                                      },
                                                      "value": {
                                                        "type": "string",
                                                        "description": "The value of the trait"
                                                      }
                                                    },
                                                    "required": [
                                                      "traitType",
                                                      "value"
                                                    ]
                                                  }
                                                },
                                                "created": {
                                                  "type": "number",
                                                  "description": "The date the Asset was created"
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "The name of the Asset"
                                                },
                                                "collection": {
                                                  "description": "The collection the Asset belongs to",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                                        },
                                                        "name": {
                                                          "type": "string",
                                                          "description": "The name given to the collection"
                                                        },
                                                        "description": {
                                                          "type": "string",
                                                          "description": "The description given to the collection"
                                                        },
                                                        "environment": {
                                                          "type": "string",
                                                          "description": "The collection's environment",
                                                          "enum": [
                                                            "Development",
                                                            "Production"
                                                          ]
                                                        },
                                                        "imageUrl": {
                                                          "type": "string",
                                                          "description": "The url of the image used to represent the collection",
                                                          "nullable": true
                                                        },
                                                        "imported": {
                                                          "type": "boolean",
                                                          "description": "Whether the collection was imported"
                                                        },
                                                        "mintAddress": {
                                                          "type": "string",
                                                          "description": "The mint address of the collection on-chain",
                                                          "nullable": true
                                                        },
                                                        "created": {
                                                          "type": "number",
                                                          "description": "Timestamp of collection creation"
                                                        },
                                                        "stats": {
                                                          "description": "Statistics about the collection",
                                                          "allOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "numMinted": {
                                                                  "type": "number",
                                                                  "description": "The number of assets minted for this collection"
                                                                },
                                                                "floorPrice": {
                                                                  "type": "number",
                                                                  "description": "The floor price of the collection"
                                                                },
                                                                "numListed": {
                                                                  "type": "number",
                                                                  "description": "The number of assets listed for this collection"
                                                                },
                                                                "numOwners": {
                                                                  "type": "number",
                                                                  "description": "The number of unique owners of assets in this collection"
                                                                }
                                                              },
                                                              "required": [
                                                                "numMinted",
                                                                "floorPrice",
                                                                "numListed",
                                                                "numOwners"
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "required": [
                                                        "id",
                                                        "name",
                                                        "description",
                                                        "environment",
                                                        "imported",
                                                        "created"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "description": "The description provided when the Asset was created"
                                                },
                                                "environment": {
                                                  "type": "string",
                                                  "description": "The asset's environment",
                                                  "enum": [
                                                    "Development",
                                                    "Production"
                                                  ]
                                                },
                                                "imported": {
                                                  "type": "boolean",
                                                  "description": "Whether the Asset was imported"
                                                },
                                                "imageUrl": {
                                                  "type": "string",
                                                  "description": "The URI for the image representing the Asset"
                                                },
                                                "status": {
                                                  "type": "string",
                                                  "description": "The current status of the Asset",
                                                  "enum": [
                                                    "Uninitiated",
                                                    "Unprocessed",
                                                    "Processing",
                                                    "Committed",
                                                    "Failed"
                                                  ]
                                                },
                                                "escrow": {
                                                  "type": "boolean",
                                                  "description": "If the asset is in escrow or not"
                                                },
                                                "mintAddress": {
                                                  "type": "string",
                                                  "description": "The address of the Asset on the blockchain"
                                                },
                                                "owner": {
                                                  "description": "The current owner of the Asset.",
                                                  "nullable": true,
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string",
                                                          "description": "The wallet that currently holds this asset",
                                                          "nullable": true
                                                        },
                                                        "referenceId": {
                                                          "type": "string",
                                                          "description": "The reference id associated with the wallet",
                                                          "nullable": true
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "priceCents": {
                                                  "type": "number",
                                                  "nullable": true,
                                                  "description": "The price of the asset on the marketplace in cents"
                                                }
                                              },
                                              "required": [
                                                "id",
                                                "created",
                                                "name",
                                                "description",
                                                "environment",
                                                "imported",
                                                "imageUrl",
                                                "status",
                                                "escrow",
                                                "mintAddress"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "item"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "TransferToken",
                                            "TransferTokenFromDeveloper"
                                          ]
                                        },
                                        "item": {
                                          "description": "Token details",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "description": "The ID for the currency"
                                                },
                                                "mintAddress": {
                                                  "type": "string",
                                                  "description": "The address for the currency's SPL token mint"
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "The name of the currency"
                                                },
                                                "symbol": {
                                                  "type": "string",
                                                  "description": "The currency's symbol"
                                                }
                                              },
                                              "required": [
                                                "id",
                                                "mintAddress",
                                                "name",
                                                "symbol"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "item"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "TransferStackableAsset",
                                            "TransferStackableAssetFromDeveloper"
                                          ]
                                        },
                                        "item": {
                                          "description": "StackableAsset details",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "description": "The ID of the Stackable Asset"
                                                },
                                                "attributes": {
                                                  "description": "Add attributes to your Asset",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "traitType": {
                                                        "type": "string",
                                                        "description": "The name of the trait"
                                                      },
                                                      "value": {
                                                        "type": "string",
                                                        "description": "The value of the trait"
                                                      }
                                                    },
                                                    "required": [
                                                      "traitType",
                                                      "value"
                                                    ]
                                                  }
                                                },
                                                "created": {
                                                  "type": "number",
                                                  "description": "The date the Asset was created"
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "The name of the Stackable Asset. Max length: 32 chars",
                                                  "maxLength": 32
                                                },
                                                "symbol": {
                                                  "type": "string",
                                                  "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                                  "maxLength": 5
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "description": "A description for the Asset",
                                                  "maxLength": 64
                                                },
                                                "collection": {
                                                  "description": "The collection the Asset belongs to",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                                        },
                                                        "name": {
                                                          "type": "string",
                                                          "description": "The name given to the collection"
                                                        },
                                                        "description": {
                                                          "type": "string",
                                                          "description": "The description given to the collection"
                                                        },
                                                        "environment": {
                                                          "type": "string",
                                                          "description": "The collection's environment",
                                                          "enum": [
                                                            "Development",
                                                            "Production"
                                                          ]
                                                        },
                                                        "imageUrl": {
                                                          "type": "string",
                                                          "description": "The url of the image used to represent the collection",
                                                          "nullable": true
                                                        },
                                                        "imported": {
                                                          "type": "boolean",
                                                          "description": "Whether the collection was imported"
                                                        },
                                                        "mintAddress": {
                                                          "type": "string",
                                                          "description": "The mint address of the collection on-chain",
                                                          "nullable": true
                                                        },
                                                        "created": {
                                                          "type": "number",
                                                          "description": "Timestamp of collection creation"
                                                        },
                                                        "stats": {
                                                          "description": "Statistics about the collection",
                                                          "allOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "numMinted": {
                                                                  "type": "number",
                                                                  "description": "The number of assets minted for this collection"
                                                                },
                                                                "floorPrice": {
                                                                  "type": "number",
                                                                  "description": "The floor price of the collection"
                                                                },
                                                                "numListed": {
                                                                  "type": "number",
                                                                  "description": "The number of assets listed for this collection"
                                                                },
                                                                "numOwners": {
                                                                  "type": "number",
                                                                  "description": "The number of unique owners of assets in this collection"
                                                                }
                                                              },
                                                              "required": [
                                                                "numMinted",
                                                                "floorPrice",
                                                                "numListed",
                                                                "numOwners"
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "required": [
                                                        "id",
                                                        "name",
                                                        "description",
                                                        "environment",
                                                        "imported",
                                                        "created"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "environment": {
                                                  "type": "string",
                                                  "description": "The asset's environment",
                                                  "enum": [
                                                    "Development",
                                                    "Production"
                                                  ]
                                                },
                                                "imageUrl": {
                                                  "type": "string",
                                                  "description": "A url to the image underlying the Asset"
                                                },
                                                "status": {
                                                  "type": "string",
                                                  "description": "The current status of the Asset",
                                                  "enum": [
                                                    "Uninitiated",
                                                    "Unprocessed",
                                                    "Processing",
                                                    "Committed",
                                                    "Failed"
                                                  ]
                                                },
                                                "mintAddress": {
                                                  "type": "string",
                                                  "description": "The address of the Asset on the blockchain"
                                                }
                                              },
                                              "required": [
                                                "id",
                                                "created",
                                                "name",
                                                "description",
                                                "environment",
                                                "imageUrl",
                                                "status"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "item"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "AbitraryTransaction"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "Withdraw"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "created",
                                "status",
                                "details"
                              ]
                            }
                          }
                        },
                        "required": [
                          "id",
                          "consumes",
                          "craftingUserReferenceId",
                          "status",
                          "transactions"
                        ]
                      }
                    },
                    "meta": {
                      "description": "Pagination related metadata",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "number",
                              "description": "The page number fetched"
                            },
                            "perPage": {
                              "type": "number",
                              "description": "The number of items in each page"
                            },
                            "totalPages": {
                              "type": "number",
                              "description": "The total number of pages in all results"
                            },
                            "totalResults": {
                              "type": "number",
                              "description": "The total result count"
                            }
                          },
                          "required": [
                            "page",
                            "perPage",
                            "totalPages",
                            "totalResults"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "meta"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Crafting Recipes"
        ]
      },
      "post": {
        "operationId": "CraftingRecipesController_create",
        "summary": "Create Crafting Recipe",
        "description": "### Create a new Crafting Recipe.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "craftingUserReferenceId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Idetifies the user that will fulfill the crafting recipe."
                  },
                  "metadata": {
                    "nullable": true,
                    "description": "Optional metadata to add to the recipe.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "description": "Associated attributes for the recipe.",
                            "nullable": true,
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "traitType": {
                                  "type": "string",
                                  "description": "The name of the trait"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "The value of the trait"
                                }
                              },
                              "required": [
                                "traitType",
                                "value"
                              ]
                            }
                          },
                          "title": {
                            "type": "string",
                            "description": "A title to display for the recipe.",
                            "nullable": true
                          },
                          "description": {
                            "type": "string",
                            "description": "A description to display for the recipe.",
                            "nullable": true
                          },
                          "image": {
                            "type": "string",
                            "description": "An image to display for the recipe.",
                            "nullable": true
                          }
                        }
                      }
                    ]
                  },
                  "consumes": {
                    "type": "array",
                    "description": "What this recipe will consume.",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "Currency"
                              ],
                              "description": "Specifies that this is a currency"
                            },
                            "id": {
                              "type": "string",
                              "minLength": 1,
                              "description": "Identifies the currency to consume"
                            },
                            "naturalAmount": {
                              "type": "string",
                              "description": "The amount of the currency to consume"
                            }
                          },
                          "required": [
                            "type",
                            "id",
                            "naturalAmount"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "StackableAsset"
                              ],
                              "description": "Specifies that this is a stackable asset"
                            },
                            "id": {
                              "type": "string",
                              "description": "Identifies the stackable asset to consume"
                            },
                            "naturalAmount": {
                              "type": "string",
                              "description": "The amount of the stackable asset to consume"
                            }
                          },
                          "required": [
                            "type",
                            "id",
                            "naturalAmount"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "UniqueAsset"
                              ],
                              "description": "Specifies that this is a unique asset."
                            },
                            "id": {
                              "type": "string",
                              "description": "Identifies the unique asset to consume."
                            },
                            "method": {
                              "enum": [
                                "Transfer",
                                "Destroy"
                              ],
                              "type": "string",
                              "description": "(Optional) Determines how the unique asset will be consumed.",
                              "nullable": true
                            }
                          },
                          "required": [
                            "type",
                            "id"
                          ]
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "craftingUserReferenceId",
                  "consumes"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "craftingRecipeId": {
                      "type": "string",
                      "description": "The id for the crafting recipe. Can be used to get the status of the recipe."
                    },
                    "consentUrl": {
                      "type": "string",
                      "description": "The url the user must visit to provide consent and complete the recipe."
                    }
                  },
                  "required": [
                    "craftingRecipeId",
                    "consentUrl"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Crafting Recipes"
        ]
      }
    },
    "/nx/crafting-recipes/{recipeId}": {
      "get": {
        "operationId": "CraftingRecipesController_get",
        "summary": "Get Crafting Recipe",
        "description": "### Get details about a single crafting recipe.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for your game",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipeId",
            "required": true,
            "in": "path",
            "description": "Identifies the crafting recipe",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Identifies the recipe."
                    },
                    "consumes": {
                      "type": "array",
                      "description": "What this recipe will consume.",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "Currency"
                                ],
                                "description": "Specifies that this is a currency"
                              },
                              "id": {
                                "type": "string",
                                "minLength": 1,
                                "description": "Identifies the currency to consume"
                              },
                              "naturalAmount": {
                                "type": "string",
                                "description": "The amount of the currency to consume"
                              },
                              "currency": {
                                "description": "Details about the currency",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID for the currency"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address for the currency's SPL token mint"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the currency"
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The currency's symbol"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "mintAddress",
                                      "name",
                                      "symbol"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "id",
                              "naturalAmount",
                              "currency"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "StackableAsset"
                                ],
                                "description": "Specifies that this is a stackable asset"
                              },
                              "id": {
                                "type": "string",
                                "description": "Identifies the stackable asset to consume"
                              },
                              "naturalAmount": {
                                "type": "string",
                                "description": "The amount of the stackable asset to consume"
                              }
                            },
                            "required": [
                              "type",
                              "id",
                              "naturalAmount"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "UniqueAsset"
                                ],
                                "description": "Specifies that this is a unique asset."
                              },
                              "id": {
                                "type": "string",
                                "description": "Identifies the unique asset to consume."
                              },
                              "method": {
                                "enum": [
                                  "Transfer",
                                  "Destroy"
                                ],
                                "type": "string",
                                "description": "(Optional) Determines how the unique asset will be consumed.",
                                "nullable": true
                              },
                              "uniqueAsset": {
                                "description": "Details about the unique asset being consumed",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Asset"
                                      },
                                      "attributes": {
                                        "description": "The attributes of the Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Asset"
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "The description provided when the Asset was created"
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imported": {
                                        "type": "boolean",
                                        "description": "Indicates if the asset belongs to an imported collection"
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "The URI for the image representing the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "forSale": {
                                        "type": "boolean",
                                        "description": "Indicates if the asset is currently for sale"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      },
                                      "owner": {
                                        "description": "The current owner of the Asset.",
                                        "nullable": true,
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "The wallet that currently holds this asset",
                                                "nullable": true
                                              },
                                              "referenceId": {
                                                "type": "string",
                                                "description": "The reference id associated with the wallet",
                                                "nullable": true
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "price": {
                                        "nullable": true,
                                        "type": "object",
                                        "description": "The price of the asset on the marketplace"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imported",
                                      "imageUrl",
                                      "status",
                                      "forSale",
                                      "mintAddress"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "id",
                              "uniqueAsset"
                            ]
                          }
                        ]
                      }
                    },
                    "craftingUserReferenceId": {
                      "type": "string",
                      "description": "Idetifies the user that will fulfill the crafting recipe."
                    },
                    "metadata": {
                      "description": "Metadata to describe the recipe.",
                      "nullable": true,
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "attributes": {
                              "description": "Associated attributes for the recipe.",
                              "nullable": true,
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "traitType": {
                                    "type": "string",
                                    "description": "The name of the trait"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The value of the trait"
                                  }
                                },
                                "required": [
                                  "traitType",
                                  "value"
                                ]
                              }
                            },
                            "title": {
                              "type": "string",
                              "description": "A title to display for the recipe.",
                              "nullable": true
                            },
                            "description": {
                              "type": "string",
                              "description": "A description to display for the recipe.",
                              "nullable": true
                            },
                            "image": {
                              "type": "string",
                              "description": "An image to display for the recipe.",
                              "nullable": true
                            }
                          }
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the recipe.",
                      "enum": [
                        "Pending",
                        "Submitting",
                        "Failed",
                        "Completed",
                        "PartiallyCompleted",
                        "Expired"
                      ]
                    },
                    "transactions": {
                      "description": "The transactions that are must be complete to fulfill the recipe.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Transaction ID"
                          },
                          "created": {
                            "type": "string",
                            "description": "Transaction creation date",
                            "format": "date-time"
                          },
                          "status": {
                            "description": "Transaction confirmation status",
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Confirmed"
                                    ]
                                  },
                                  "txHash": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "status",
                                  "txHash"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Pending"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Failed"
                                    ]
                                  },
                                  "error": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "required": [
                                  "status",
                                  "error"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Expired"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ]
                              }
                            ]
                          },
                          "details": {
                            "description": "Transaction type and details about asset and balance changes",
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "BuyAsset",
                                      "BuyAssetWithCreditCard",
                                      "CancelAssetSale",
                                      "ChangeAssetPrice",
                                      "ListAssetSale",
                                      "TransferAsset",
                                      "TransferAssetFromDeveloper"
                                    ]
                                  },
                                  "item": {
                                    "description": "Asset details",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "The ID of the Asset"
                                          },
                                          "attributes": {
                                            "description": "The attributes of the Asset",
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "traitType": {
                                                  "type": "string",
                                                  "description": "The name of the trait"
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "description": "The value of the trait"
                                                }
                                              },
                                              "required": [
                                                "traitType",
                                                "value"
                                              ]
                                            }
                                          },
                                          "created": {
                                            "type": "number",
                                            "description": "The date the Asset was created"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the Asset"
                                          },
                                          "collection": {
                                            "description": "The collection the Asset belongs to",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "type": "string",
                                                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "description": "The name given to the collection"
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "description": "The description given to the collection"
                                                  },
                                                  "environment": {
                                                    "type": "string",
                                                    "description": "The collection's environment",
                                                    "enum": [
                                                      "Development",
                                                      "Production"
                                                    ]
                                                  },
                                                  "imageUrl": {
                                                    "type": "string",
                                                    "description": "The url of the image used to represent the collection",
                                                    "nullable": true
                                                  },
                                                  "imported": {
                                                    "type": "boolean",
                                                    "description": "Whether the collection was imported"
                                                  },
                                                  "mintAddress": {
                                                    "type": "string",
                                                    "description": "The mint address of the collection on-chain",
                                                    "nullable": true
                                                  },
                                                  "created": {
                                                    "type": "number",
                                                    "description": "Timestamp of collection creation"
                                                  },
                                                  "stats": {
                                                    "description": "Statistics about the collection",
                                                    "allOf": [
                                                      {
                                                        "type": "object",
                                                        "properties": {
                                                          "numMinted": {
                                                            "type": "number",
                                                            "description": "The number of assets minted for this collection"
                                                          },
                                                          "floorPrice": {
                                                            "type": "number",
                                                            "description": "The floor price of the collection"
                                                          },
                                                          "numListed": {
                                                            "type": "number",
                                                            "description": "The number of assets listed for this collection"
                                                          },
                                                          "numOwners": {
                                                            "type": "number",
                                                            "description": "The number of unique owners of assets in this collection"
                                                          }
                                                        },
                                                        "required": [
                                                          "numMinted",
                                                          "floorPrice",
                                                          "numListed",
                                                          "numOwners"
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "id",
                                                  "name",
                                                  "description",
                                                  "environment",
                                                  "imported",
                                                  "created"
                                                ]
                                              }
                                            ]
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "The description provided when the Asset was created"
                                          },
                                          "environment": {
                                            "type": "string",
                                            "description": "The asset's environment",
                                            "enum": [
                                              "Development",
                                              "Production"
                                            ]
                                          },
                                          "imported": {
                                            "type": "boolean",
                                            "description": "Whether the Asset was imported"
                                          },
                                          "imageUrl": {
                                            "type": "string",
                                            "description": "The URI for the image representing the Asset"
                                          },
                                          "status": {
                                            "type": "string",
                                            "description": "The current status of the Asset",
                                            "enum": [
                                              "Uninitiated",
                                              "Unprocessed",
                                              "Processing",
                                              "Committed",
                                              "Failed"
                                            ]
                                          },
                                          "escrow": {
                                            "type": "boolean",
                                            "description": "If the asset is in escrow or not"
                                          },
                                          "mintAddress": {
                                            "type": "string",
                                            "description": "The address of the Asset on the blockchain"
                                          },
                                          "owner": {
                                            "description": "The current owner of the Asset.",
                                            "nullable": true,
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string",
                                                    "description": "The wallet that currently holds this asset",
                                                    "nullable": true
                                                  },
                                                  "referenceId": {
                                                    "type": "string",
                                                    "description": "The reference id associated with the wallet",
                                                    "nullable": true
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "priceCents": {
                                            "type": "number",
                                            "nullable": true,
                                            "description": "The price of the asset on the marketplace in cents"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "created",
                                          "name",
                                          "description",
                                          "environment",
                                          "imported",
                                          "imageUrl",
                                          "status",
                                          "escrow",
                                          "mintAddress"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "item"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "TransferToken",
                                      "TransferTokenFromDeveloper"
                                    ]
                                  },
                                  "item": {
                                    "description": "Token details",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "The ID for the currency"
                                          },
                                          "mintAddress": {
                                            "type": "string",
                                            "description": "The address for the currency's SPL token mint"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the currency"
                                          },
                                          "symbol": {
                                            "type": "string",
                                            "description": "The currency's symbol"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "mintAddress",
                                          "name",
                                          "symbol"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "item"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "TransferStackableAsset",
                                      "TransferStackableAssetFromDeveloper"
                                    ]
                                  },
                                  "item": {
                                    "description": "StackableAsset details",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "The ID of the Stackable Asset"
                                          },
                                          "attributes": {
                                            "description": "Add attributes to your Asset",
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "traitType": {
                                                  "type": "string",
                                                  "description": "The name of the trait"
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "description": "The value of the trait"
                                                }
                                              },
                                              "required": [
                                                "traitType",
                                                "value"
                                              ]
                                            }
                                          },
                                          "created": {
                                            "type": "number",
                                            "description": "The date the Asset was created"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the Stackable Asset. Max length: 32 chars",
                                            "maxLength": 32
                                          },
                                          "symbol": {
                                            "type": "string",
                                            "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                            "maxLength": 5
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "A description for the Asset",
                                            "maxLength": 64
                                          },
                                          "collection": {
                                            "description": "The collection the Asset belongs to",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "type": "string",
                                                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "description": "The name given to the collection"
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "description": "The description given to the collection"
                                                  },
                                                  "environment": {
                                                    "type": "string",
                                                    "description": "The collection's environment",
                                                    "enum": [
                                                      "Development",
                                                      "Production"
                                                    ]
                                                  },
                                                  "imageUrl": {
                                                    "type": "string",
                                                    "description": "The url of the image used to represent the collection",
                                                    "nullable": true
                                                  },
                                                  "imported": {
                                                    "type": "boolean",
                                                    "description": "Whether the collection was imported"
                                                  },
                                                  "mintAddress": {
                                                    "type": "string",
                                                    "description": "The mint address of the collection on-chain",
                                                    "nullable": true
                                                  },
                                                  "created": {
                                                    "type": "number",
                                                    "description": "Timestamp of collection creation"
                                                  },
                                                  "stats": {
                                                    "description": "Statistics about the collection",
                                                    "allOf": [
                                                      {
                                                        "type": "object",
                                                        "properties": {
                                                          "numMinted": {
                                                            "type": "number",
                                                            "description": "The number of assets minted for this collection"
                                                          },
                                                          "floorPrice": {
                                                            "type": "number",
                                                            "description": "The floor price of the collection"
                                                          },
                                                          "numListed": {
                                                            "type": "number",
                                                            "description": "The number of assets listed for this collection"
                                                          },
                                                          "numOwners": {
                                                            "type": "number",
                                                            "description": "The number of unique owners of assets in this collection"
                                                          }
                                                        },
                                                        "required": [
                                                          "numMinted",
                                                          "floorPrice",
                                                          "numListed",
                                                          "numOwners"
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "id",
                                                  "name",
                                                  "description",
                                                  "environment",
                                                  "imported",
                                                  "created"
                                                ]
                                              }
                                            ]
                                          },
                                          "environment": {
                                            "type": "string",
                                            "description": "The asset's environment",
                                            "enum": [
                                              "Development",
                                              "Production"
                                            ]
                                          },
                                          "imageUrl": {
                                            "type": "string",
                                            "description": "A url to the image underlying the Asset"
                                          },
                                          "status": {
                                            "type": "string",
                                            "description": "The current status of the Asset",
                                            "enum": [
                                              "Uninitiated",
                                              "Unprocessed",
                                              "Processing",
                                              "Committed",
                                              "Failed"
                                            ]
                                          },
                                          "mintAddress": {
                                            "type": "string",
                                            "description": "The address of the Asset on the blockchain"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "created",
                                          "name",
                                          "description",
                                          "environment",
                                          "imageUrl",
                                          "status"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "item"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "AbitraryTransaction"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "Withdraw"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "created",
                          "status",
                          "details"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "consumes",
                    "craftingUserReferenceId",
                    "status",
                    "transactions"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Crafting Recipes"
        ]
      }
    }
  },
  "info": {
    "title": "GameShift REST API",
    "description": "A single API for games to integrate with web3",
    "version": "3.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.gameshift.dev"
    }
  ],
  "components": {
    "schemas": {
      "RegisterTokenDto": {
        "type": "object",
        "properties": {
          "mintAddress": {
            "type": "string",
            "description": "The address for the currency's SPL token mint"
          }
        },
        "required": [
          "mintAddress"
        ]
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the currency"
          },
          "mintAddress": {
            "type": "string",
            "description": "The address for the currency's SPL token mint"
          },
          "name": {
            "type": "string",
            "description": "The name of the currency"
          },
          "symbol": {
            "type": "string",
            "description": "The currency's symbol"
          }
        },
        "required": [
          "id",
          "mintAddress",
          "name",
          "symbol"
        ]
      },
      "ProjectUserDtoV2": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "The reference id of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          }
        },
        "required": [
          "referenceId",
          "email"
        ]
      },
      "PaginationMetaDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "The page number fetched"
          },
          "perPage": {
            "type": "number",
            "description": "The number of items in each page"
          },
          "totalPages": {
            "type": "number",
            "description": "The total number of pages in all results"
          },
          "totalResults": {
            "type": "number",
            "description": "The total result count"
          }
        },
        "required": [
          "page",
          "perPage",
          "totalPages",
          "totalResults"
        ]
      },
      "PaginatedProjectUsersDtoV2": {
        "type": "object",
        "properties": {
          "data": {
            "description": "A list of users",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "referenceId": {
                  "type": "string",
                  "description": "The reference id of the user"
                },
                "email": {
                  "type": "string",
                  "description": "The email of the user"
                }
              },
              "required": [
                "referenceId",
                "email"
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "CreateProjectUserDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "minLength": 1,
            "description": "The reference id of the user. Must be unique, and cannot contain the character \"/\"."
          },
          "email": {
            "type": "string",
            "description": "User's email address."
          },
          "externalWalletAddress": {
            "type": "string",
            "description": "`User`'s wallet address. Signing transactions will require use of a wallet like Phantom or Backpack."
          }
        },
        "required": [
          "referenceId",
          "email"
        ]
      },
      "ProjectUserWalletDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The wallet address of the user"
          },
          "walletProvider": {
            "type": "string",
            "description": "The type of the wallet"
          }
        },
        "required": [
          "address",
          "walletProvider"
        ]
      },
      "OwnedCurrencyItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Currency"
            ],
            "description": "Indicates that this `Item` is a `Currency`",
            "title": "Currency",
            "example": "Currency"
          },
          "item": {
            "description": "The currency",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID for the currency"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address for the currency's SPL token mint"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the currency"
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The currency's symbol"
                  }
                },
                "required": [
                  "id",
                  "mintAddress",
                  "name",
                  "symbol"
                ]
              }
            ]
          },
          "quantity": {
            "type": "string",
            "description": "Amount of the currency being held"
          }
        },
        "required": [
          "type",
          "item",
          "quantity"
        ]
      },
      "AssetAttributeDto": {
        "type": "object",
        "properties": {
          "traitType": {
            "type": "string",
            "description": "The name of the trait"
          },
          "value": {
            "type": "string",
            "description": "The value of the trait"
          }
        },
        "required": [
          "traitType",
          "value"
        ]
      },
      "CollectionStats": {
        "type": "object",
        "properties": {
          "numMinted": {
            "type": "number",
            "description": "The number of assets minted for this collection"
          },
          "floorPrice": {
            "type": "number",
            "description": "The floor price of the collection"
          },
          "numListed": {
            "type": "number",
            "description": "The number of assets listed for this collection"
          },
          "numOwners": {
            "type": "number",
            "description": "The number of unique owners of assets in this collection"
          }
        },
        "required": [
          "numMinted",
          "floorPrice",
          "numListed",
          "numOwners"
        ]
      },
      "CollectionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
          },
          "name": {
            "type": "string",
            "description": "The name given to the collection"
          },
          "description": {
            "type": "string",
            "description": "The description given to the collection"
          },
          "environment": {
            "type": "string",
            "description": "The collection's environment",
            "enum": [
              "Development",
              "Production"
            ]
          },
          "imageUrl": {
            "type": "string",
            "description": "The url of the image used to represent the collection",
            "nullable": true
          },
          "imported": {
            "type": "boolean",
            "description": "Whether the collection was imported"
          },
          "mintAddress": {
            "type": "string",
            "description": "The mint address of the collection on-chain",
            "nullable": true
          },
          "created": {
            "type": "number",
            "description": "Timestamp of collection creation"
          },
          "stats": {
            "description": "Statistics about the collection",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "numMinted": {
                    "type": "number",
                    "description": "The number of assets minted for this collection"
                  },
                  "floorPrice": {
                    "type": "number",
                    "description": "The floor price of the collection"
                  },
                  "numListed": {
                    "type": "number",
                    "description": "The number of assets listed for this collection"
                  },
                  "numOwners": {
                    "type": "number",
                    "description": "The number of unique owners of assets in this collection"
                  }
                },
                "required": [
                  "numMinted",
                  "floorPrice",
                  "numListed",
                  "numOwners"
                ]
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "environment",
          "imported",
          "created"
        ]
      },
      "StackableAssetDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Stackable Asset"
          },
          "attributes": {
            "description": "Add attributes to your Asset",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "traitType": {
                  "type": "string",
                  "description": "The name of the trait"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the trait"
                }
              },
              "required": [
                "traitType",
                "value"
              ]
            }
          },
          "created": {
            "type": "number",
            "description": "The date the Asset was created"
          },
          "name": {
            "type": "string",
            "description": "The name of the Stackable Asset. Max length: 32 chars",
            "maxLength": 32
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the Stackable Asset. Max length: 5 chars",
            "maxLength": 5
          },
          "description": {
            "type": "string",
            "description": "A description for the Asset",
            "maxLength": 64
          },
          "collection": {
            "description": "The collection the Asset belongs to",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name given to the collection"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description given to the collection"
                  },
                  "environment": {
                    "type": "string",
                    "description": "The collection's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "The url of the image used to represent the collection",
                    "nullable": true
                  },
                  "imported": {
                    "type": "boolean",
                    "description": "Whether the collection was imported"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The mint address of the collection on-chain",
                    "nullable": true
                  },
                  "created": {
                    "type": "number",
                    "description": "Timestamp of collection creation"
                  },
                  "stats": {
                    "description": "Statistics about the collection",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "numMinted": {
                            "type": "number",
                            "description": "The number of assets minted for this collection"
                          },
                          "floorPrice": {
                            "type": "number",
                            "description": "The floor price of the collection"
                          },
                          "numListed": {
                            "type": "number",
                            "description": "The number of assets listed for this collection"
                          },
                          "numOwners": {
                            "type": "number",
                            "description": "The number of unique owners of assets in this collection"
                          }
                        },
                        "required": [
                          "numMinted",
                          "floorPrice",
                          "numListed",
                          "numOwners"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "id",
                  "name",
                  "description",
                  "environment",
                  "imported",
                  "created"
                ]
              }
            ]
          },
          "environment": {
            "type": "string",
            "description": "The asset's environment",
            "enum": [
              "Development",
              "Production"
            ]
          },
          "imageUrl": {
            "type": "string",
            "description": "A url to the image underlying the Asset"
          },
          "status": {
            "type": "string",
            "description": "The current status of the Asset",
            "enum": [
              "Uninitiated",
              "Unprocessed",
              "Processing",
              "Committed",
              "Failed"
            ]
          },
          "mintAddress": {
            "type": "string",
            "description": "The address of the Asset on the blockchain"
          }
        },
        "required": [
          "id",
          "created",
          "name",
          "description",
          "environment",
          "imageUrl",
          "status"
        ]
      },
      "OwnedStackableAssetItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "StackableAsset"
            ],
            "description": "Indicates that this `Item` is a `Stackable Asset`",
            "title": "StackableAsset",
            "example": "StackableAsset"
          },
          "item": {
            "description": "The stackable asset",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Stackable Asset"
                  },
                  "attributes": {
                    "description": "Add attributes to your Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "created": {
                    "type": "number",
                    "description": "The date the Asset was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Stackable Asset. Max length: 32 chars",
                    "maxLength": 32
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                    "maxLength": 5
                  },
                  "description": {
                    "type": "string",
                    "description": "A description for the Asset",
                    "maxLength": 64
                  },
                  "collection": {
                    "description": "The collection the Asset belongs to",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name given to the collection"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description given to the collection"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The collection's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The url of the image used to represent the collection",
                            "nullable": true
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the collection was imported"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The mint address of the collection on-chain",
                            "nullable": true
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of collection creation"
                          },
                          "stats": {
                            "description": "Statistics about the collection",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "numMinted": {
                                    "type": "number",
                                    "description": "The number of assets minted for this collection"
                                  },
                                  "floorPrice": {
                                    "type": "number",
                                    "description": "The floor price of the collection"
                                  },
                                  "numListed": {
                                    "type": "number",
                                    "description": "The number of assets listed for this collection"
                                  },
                                  "numOwners": {
                                    "type": "number",
                                    "description": "The number of unique owners of assets in this collection"
                                  }
                                },
                                "required": [
                                  "numMinted",
                                  "floorPrice",
                                  "numListed",
                                  "numOwners"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "created"
                        ]
                      }
                    ]
                  },
                  "environment": {
                    "type": "string",
                    "description": "The asset's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "A url to the image underlying the Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the Asset",
                    "enum": [
                      "Uninitiated",
                      "Unprocessed",
                      "Processing",
                      "Committed",
                      "Failed"
                    ]
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address of the Asset on the blockchain"
                  }
                },
                "required": [
                  "id",
                  "created",
                  "name",
                  "description",
                  "environment",
                  "imageUrl",
                  "status"
                ]
              }
            ]
          },
          "quantity": {
            "type": "string",
            "description": "Amount of the stackable asset"
          }
        },
        "required": [
          "type",
          "item",
          "quantity"
        ]
      },
      "PaginatedOwnedItemDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of items",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "Currency"
                      ],
                      "description": "Indicates that this `Item` is a `Currency`",
                      "title": "Currency",
                      "example": "Currency"
                    },
                    "item": {
                      "description": "The currency",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID for the currency"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The address for the currency's SPL token mint"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the currency"
                            },
                            "symbol": {
                              "type": "string",
                              "description": "The currency's symbol"
                            }
                          },
                          "required": [
                            "id",
                            "mintAddress",
                            "name",
                            "symbol"
                          ]
                        }
                      ]
                    },
                    "quantity": {
                      "type": "string",
                      "description": "Amount of the currency being held"
                    }
                  },
                  "required": [
                    "type",
                    "item",
                    "quantity"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "UniqueAsset"
                      ],
                      "description": "Indicates that this `Item` is an `UniqueAsset`",
                      "title": "UniqueAsset",
                      "example": "UniqueAsset"
                    },
                    "item": {
                      "description": "The unique asset",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the Asset"
                            },
                            "attributes": {
                              "description": "The attributes of the Asset",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "traitType": {
                                    "type": "string",
                                    "description": "The name of the trait"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The value of the trait"
                                  }
                                },
                                "required": [
                                  "traitType",
                                  "value"
                                ]
                              }
                            },
                            "created": {
                              "type": "number",
                              "description": "The date the Asset was created"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the Asset"
                            },
                            "collection": {
                              "description": "The collection the Asset belongs to",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name given to the collection"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description given to the collection"
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The collection's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "The url of the image used to represent the collection",
                                      "nullable": true
                                    },
                                    "imported": {
                                      "type": "boolean",
                                      "description": "Whether the collection was imported"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The mint address of the collection on-chain",
                                      "nullable": true
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "Timestamp of collection creation"
                                    },
                                    "stats": {
                                      "description": "Statistics about the collection",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "numMinted": {
                                              "type": "number",
                                              "description": "The number of assets minted for this collection"
                                            },
                                            "floorPrice": {
                                              "type": "number",
                                              "description": "The floor price of the collection"
                                            },
                                            "numListed": {
                                              "type": "number",
                                              "description": "The number of assets listed for this collection"
                                            },
                                            "numOwners": {
                                              "type": "number",
                                              "description": "The number of unique owners of assets in this collection"
                                            }
                                          },
                                          "required": [
                                            "numMinted",
                                            "floorPrice",
                                            "numListed",
                                            "numOwners"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "description",
                                    "environment",
                                    "imported",
                                    "created"
                                  ]
                                }
                              ]
                            },
                            "description": {
                              "type": "string",
                              "description": "The description provided when the Asset was created"
                            },
                            "environment": {
                              "type": "string",
                              "description": "The asset's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imported": {
                              "type": "boolean",
                              "description": "Indicates if the asset belongs to an imported collection"
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "The URI for the image representing the Asset"
                            },
                            "status": {
                              "type": "string",
                              "description": "The current status of the Asset",
                              "enum": [
                                "Uninitiated",
                                "Unprocessed",
                                "Processing",
                                "Committed",
                                "Failed"
                              ]
                            },
                            "forSale": {
                              "type": "boolean",
                              "description": "Indicates if the asset is currently for sale"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The address of the Asset on the blockchain"
                            },
                            "owner": {
                              "description": "The current owner of the Asset.",
                              "nullable": true,
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "type": "string",
                                      "description": "The wallet that currently holds this asset",
                                      "nullable": true
                                    },
                                    "referenceId": {
                                      "type": "string",
                                      "description": "The reference id associated with the wallet",
                                      "nullable": true
                                    }
                                  }
                                }
                              ]
                            },
                            "price": {
                              "nullable": true,
                              "type": "object",
                              "description": "The price of the asset on the marketplace"
                            }
                          },
                          "required": [
                            "id",
                            "created",
                            "name",
                            "description",
                            "environment",
                            "imported",
                            "imageUrl",
                            "status",
                            "forSale",
                            "mintAddress"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "StackableAsset"
                      ],
                      "description": "Indicates that this `Item` is a `Stackable Asset`",
                      "title": "StackableAsset",
                      "example": "StackableAsset"
                    },
                    "item": {
                      "description": "The stackable asset",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the Stackable Asset"
                            },
                            "attributes": {
                              "description": "Add attributes to your Asset",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "traitType": {
                                    "type": "string",
                                    "description": "The name of the trait"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The value of the trait"
                                  }
                                },
                                "required": [
                                  "traitType",
                                  "value"
                                ]
                              }
                            },
                            "created": {
                              "type": "number",
                              "description": "The date the Asset was created"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the Stackable Asset. Max length: 32 chars",
                              "maxLength": 32
                            },
                            "symbol": {
                              "type": "string",
                              "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                              "maxLength": 5
                            },
                            "description": {
                              "type": "string",
                              "description": "A description for the Asset",
                              "maxLength": 64
                            },
                            "collection": {
                              "description": "The collection the Asset belongs to",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name given to the collection"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description given to the collection"
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The collection's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "The url of the image used to represent the collection",
                                      "nullable": true
                                    },
                                    "imported": {
                                      "type": "boolean",
                                      "description": "Whether the collection was imported"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The mint address of the collection on-chain",
                                      "nullable": true
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "Timestamp of collection creation"
                                    },
                                    "stats": {
                                      "description": "Statistics about the collection",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "numMinted": {
                                              "type": "number",
                                              "description": "The number of assets minted for this collection"
                                            },
                                            "floorPrice": {
                                              "type": "number",
                                              "description": "The floor price of the collection"
                                            },
                                            "numListed": {
                                              "type": "number",
                                              "description": "The number of assets listed for this collection"
                                            },
                                            "numOwners": {
                                              "type": "number",
                                              "description": "The number of unique owners of assets in this collection"
                                            }
                                          },
                                          "required": [
                                            "numMinted",
                                            "floorPrice",
                                            "numListed",
                                            "numOwners"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "description",
                                    "environment",
                                    "imported",
                                    "created"
                                  ]
                                }
                              ]
                            },
                            "environment": {
                              "type": "string",
                              "description": "The asset's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "A url to the image underlying the Asset"
                            },
                            "status": {
                              "type": "string",
                              "description": "The current status of the Asset",
                              "enum": [
                                "Uninitiated",
                                "Unprocessed",
                                "Processing",
                                "Committed",
                                "Failed"
                              ]
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The address of the Asset on the blockchain"
                            }
                          },
                          "required": [
                            "id",
                            "created",
                            "name",
                            "description",
                            "environment",
                            "imageUrl",
                            "status"
                          ]
                        }
                      ]
                    },
                    "quantity": {
                      "type": "string",
                      "description": "Amount of the stackable asset"
                    }
                  },
                  "required": [
                    "type",
                    "item",
                    "quantity"
                  ]
                }
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "CreateLendDtoV3": {
        "type": "object",
        "properties": {
          "destinationReferenceId": {
            "type": "string",
            "minLength": 1,
            "description": "Identifies the User borrowing the Asset"
          },
          "expiration": {
            "type": "number",
            "description": "The time the lending grant will expire"
          }
        },
        "required": [
          "destinationReferenceId"
        ]
      },
      "LendingGrantV3Dto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the LendingGrant entry"
          },
          "itemId": {
            "type": "string",
            "description": "The ID of the Item being borrowed"
          },
          "ownerReferenceId": {
            "type": "string",
            "description": "The reference ID of the owner of the Asset"
          },
          "borrowerReferenceId": {
            "type": "string",
            "description": "The reference ID of the borrower of the Asset"
          },
          "expiration": {
            "format": "date-time",
            "type": "string",
            "description": "The expiration date and time of the borrowing period"
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time when the borrow entry was created"
          },
          "status": {
            "type": "string",
            "description": "The current status of the LendingGrant entry",
            "enum": [
              "Pending",
              "Accepted"
            ]
          },
          "environment": {
            "type": "string",
            "description": "The current environment of the Asset",
            "enum": [
              "Development",
              "Production"
            ]
          }
        },
        "required": [
          "id",
          "itemId",
          "ownerReferenceId",
          "borrowerReferenceId",
          "expiration",
          "created",
          "status",
          "environment"
        ]
      },
      "TransferItemDto": {
        "type": "object",
        "properties": {
          "destinationUserReferenceId": {
            "type": "string",
            "description": "Identifies the User receiving the Item"
          },
          "destinationWallet": {
            "type": "string",
            "description": "Address of the wallet receiving the Item"
          },
          "quantity": {
            "type": "string",
            "minLength": 1,
            "description": "Specifies the amount of the Item to send"
          }
        },
        "required": [
          "quantity"
        ]
      },
      "ConsentDto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The id for the transaction. Can be used to get the status of the transaction."
          },
          "consentUrl": {
            "type": "string",
            "description": "The url the user must visit to provide consent for the transaction."
          }
        },
        "required": [
          "transactionId",
          "consentUrl"
        ]
      },
      "SignUserTransactionV3Dto": {
        "type": "object",
        "properties": {
          "serializedTransactionMessage": {
            "type": "string",
            "minLength": 1,
            "description": "A transaction message serialized to a hex format. This can\n      typically be created by calling `transaction.serializeMessage().toString('hex')`"
          },
          "description": {
            "type": "string",
            "maxLength": 64,
            "description": "A brief description of what the transaction will do. Max length: 64 characters.",
            "nullable": true
          }
        },
        "required": [
          "serializedTransactionMessage"
        ]
      },
      "WithdrawalConsentDto": {
        "type": "object",
        "properties": {
          "withdrawalId": {
            "type": "string",
            "description": "An id that references the withdrawal"
          },
          "url": {
            "type": "string",
            "description": "A URL the User must visit to complete the withdrawal"
          }
        },
        "required": [
          "withdrawalId",
          "url"
        ]
      },
      "WithdrawalDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the withdrawal"
          },
          "userReferenceId": {
            "type": "string",
            "description": "The reference ID of the user"
          },
          "status": {
            "type": "string",
            "description": "The status of the withdrawal",
            "enum": [
              "Uninitiated",
              "Pending",
              "Confirmed",
              "Failed",
              "Expired"
            ]
          },
          "amount": {
            "type": "number",
            "nullable": true,
            "description": "The amount of the withdrawal"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the withdrawal"
          },
          "created": {
            "type": "number",
            "description": "The date and time the withdrawal was created"
          }
        },
        "required": [
          "id",
          "userReferenceId",
          "status",
          "amount",
          "currency",
          "created"
        ]
      },
      "PaginatedWithdrawalDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "A list of withdrawals",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the withdrawal"
                },
                "userReferenceId": {
                  "type": "string",
                  "description": "The reference ID of the user"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the withdrawal",
                  "enum": [
                    "Uninitiated",
                    "Pending",
                    "Confirmed",
                    "Failed",
                    "Expired"
                  ]
                },
                "amount": {
                  "type": "number",
                  "nullable": true,
                  "description": "The amount of the withdrawal"
                },
                "currency": {
                  "type": "string",
                  "description": "The currency of the withdrawal"
                },
                "created": {
                  "type": "number",
                  "description": "The date and time the withdrawal was created"
                }
              },
              "required": [
                "id",
                "userReferenceId",
                "status",
                "amount",
                "currency",
                "created"
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "EnrollmentDto": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "object",
            "description": "The Environment of the Enrollment"
          },
          "id": {
            "type": "string",
            "description": "The ID of the Enrollment"
          },
          "enrollmentAddress": {
            "type": "string",
            "description": "The on-chain address of the Enrollment"
          },
          "lastSnapshotId": {
            "type": "string",
            "description": "The ID of the last reward snapshot issued that included the Enrollment"
          },
          "enrollmentStartTime": {
            "format": "date-time",
            "type": "string",
            "description": "The time the Enrollment was created"
          },
          "commitmentPeriod": {
            "type": "number",
            "description": "The time in seconds that the Enrollment will last for"
          },
          "elapsedEnrollmentTime": {
            "type": "number",
            "description": "Time elapsed since the creation of the Enrollment (in seconds)"
          },
          "enrollmentPeriod": {
            "type": "number",
            "description": "The time that the Enrollment is committed to before it can claim rewards"
          },
          "ownerAddress": {
            "type": "string",
            "description": "The on-chain address of the owner of the Enrollment"
          },
          "ownerId": {
            "type": "string",
            "description": "The user reference ID of the owner of the Enrollment"
          },
          "programId": {
            "type": "string",
            "description": "The ID of the LoyaltyProgram the Enrollment belongs to"
          },
          "programAddress": {
            "type": "string",
            "description": "The on-chain address of the LoyaltyProgram the Enrollment belongs to"
          },
          "enrolledBalance": {
            "type": "string",
            "description": "The balance of the Enrollment"
          },
          "allocatedRewards": {
            "type": "string",
            "description": "The allocated reward balance of the Enrollment"
          },
          "claimedRewards": {
            "type": "string",
            "description": "Number of allocated rewards claimed so far, for the Enrollment"
          }
        },
        "required": [
          "environment",
          "id",
          "enrollmentAddress",
          "enrollmentStartTime",
          "commitmentPeriod",
          "elapsedEnrollmentTime",
          "enrollmentPeriod",
          "ownerAddress",
          "ownerId",
          "programId",
          "programAddress",
          "enrolledBalance",
          "allocatedRewards",
          "claimedRewards"
        ]
      },
      "PaginatedEnrollmentDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "A list of Enrollments",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "environment": {
                  "type": "object",
                  "description": "The Environment of the Enrollment"
                },
                "id": {
                  "type": "string",
                  "description": "The ID of the Enrollment"
                },
                "enrollmentAddress": {
                  "type": "string",
                  "description": "The on-chain address of the Enrollment"
                },
                "lastSnapshotId": {
                  "type": "string",
                  "description": "The ID of the last reward snapshot issued that included the Enrollment"
                },
                "enrollmentStartTime": {
                  "format": "date-time",
                  "type": "string",
                  "description": "The time the Enrollment was created"
                },
                "commitmentPeriod": {
                  "type": "number",
                  "description": "The time in seconds that the Enrollment will last for"
                },
                "elapsedEnrollmentTime": {
                  "type": "number",
                  "description": "Time elapsed since the creation of the Enrollment (in seconds)"
                },
                "enrollmentPeriod": {
                  "type": "number",
                  "description": "The time that the Enrollment is committed to before it can claim rewards"
                },
                "ownerAddress": {
                  "type": "string",
                  "description": "The on-chain address of the owner of the Enrollment"
                },
                "ownerId": {
                  "type": "string",
                  "description": "The user reference ID of the owner of the Enrollment"
                },
                "programId": {
                  "type": "string",
                  "description": "The ID of the LoyaltyProgram the Enrollment belongs to"
                },
                "programAddress": {
                  "type": "string",
                  "description": "The on-chain address of the LoyaltyProgram the Enrollment belongs to"
                },
                "enrolledBalance": {
                  "type": "string",
                  "description": "The balance of the Enrollment"
                },
                "allocatedRewards": {
                  "type": "string",
                  "description": "The allocated reward balance of the Enrollment"
                },
                "claimedRewards": {
                  "type": "string",
                  "description": "Number of allocated rewards claimed so far, for the Enrollment"
                }
              },
              "required": [
                "environment",
                "id",
                "enrollmentAddress",
                "enrollmentStartTime",
                "commitmentPeriod",
                "elapsedEnrollmentTime",
                "enrollmentPeriod",
                "ownerAddress",
                "ownerId",
                "programId",
                "programAddress",
                "enrolledBalance",
                "allocatedRewards",
                "claimedRewards"
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "TransactionStatusPendingDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Pending"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "TransactionStatusFailedDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Failed"
            ]
          },
          "error": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "status",
          "error"
        ]
      },
      "TransactionStatusConfirmedDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Confirmed"
            ]
          },
          "txHash": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "txHash"
        ]
      },
      "TransactionStatusExpiredDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Expired"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "AssetOwnerDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The wallet that currently holds this asset",
            "nullable": true
          },
          "referenceId": {
            "type": "string",
            "description": "The reference id associated with the wallet",
            "nullable": true
          }
        }
      },
      "AssetDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Asset"
          },
          "attributes": {
            "description": "The attributes of the Asset",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "traitType": {
                  "type": "string",
                  "description": "The name of the trait"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the trait"
                }
              },
              "required": [
                "traitType",
                "value"
              ]
            }
          },
          "created": {
            "type": "number",
            "description": "The date the Asset was created"
          },
          "name": {
            "type": "string",
            "description": "The name of the Asset"
          },
          "collection": {
            "description": "The collection the Asset belongs to",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name given to the collection"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description given to the collection"
                  },
                  "environment": {
                    "type": "string",
                    "description": "The collection's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "The url of the image used to represent the collection",
                    "nullable": true
                  },
                  "imported": {
                    "type": "boolean",
                    "description": "Whether the collection was imported"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The mint address of the collection on-chain",
                    "nullable": true
                  },
                  "created": {
                    "type": "number",
                    "description": "Timestamp of collection creation"
                  },
                  "stats": {
                    "description": "Statistics about the collection",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "numMinted": {
                            "type": "number",
                            "description": "The number of assets minted for this collection"
                          },
                          "floorPrice": {
                            "type": "number",
                            "description": "The floor price of the collection"
                          },
                          "numListed": {
                            "type": "number",
                            "description": "The number of assets listed for this collection"
                          },
                          "numOwners": {
                            "type": "number",
                            "description": "The number of unique owners of assets in this collection"
                          }
                        },
                        "required": [
                          "numMinted",
                          "floorPrice",
                          "numListed",
                          "numOwners"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "id",
                  "name",
                  "description",
                  "environment",
                  "imported",
                  "created"
                ]
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "The description provided when the Asset was created"
          },
          "environment": {
            "type": "string",
            "description": "The asset's environment",
            "enum": [
              "Development",
              "Production"
            ]
          },
          "imported": {
            "type": "boolean",
            "description": "Whether the Asset was imported"
          },
          "imageUrl": {
            "type": "string",
            "description": "The URI for the image representing the Asset"
          },
          "status": {
            "type": "string",
            "description": "The current status of the Asset",
            "enum": [
              "Uninitiated",
              "Unprocessed",
              "Processing",
              "Committed",
              "Failed"
            ]
          },
          "escrow": {
            "type": "boolean",
            "description": "If the asset is in escrow or not"
          },
          "mintAddress": {
            "type": "string",
            "description": "The address of the Asset on the blockchain"
          },
          "owner": {
            "description": "The current owner of the Asset.",
            "nullable": true,
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "The wallet that currently holds this asset",
                    "nullable": true
                  },
                  "referenceId": {
                    "type": "string",
                    "description": "The reference id associated with the wallet",
                    "nullable": true
                  }
                }
              }
            ]
          },
          "priceCents": {
            "type": "number",
            "nullable": true,
            "description": "The price of the asset on the marketplace in cents"
          }
        },
        "required": [
          "id",
          "created",
          "name",
          "description",
          "environment",
          "imported",
          "imageUrl",
          "status",
          "escrow",
          "mintAddress"
        ]
      },
      "TransactionWithUniqueAssetDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "BuyAsset",
              "BuyAssetWithCreditCard",
              "CancelAssetSale",
              "ChangeAssetPrice",
              "ListAssetSale",
              "TransferAsset",
              "TransferAssetFromDeveloper"
            ]
          },
          "item": {
            "description": "Asset details",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Asset"
                  },
                  "attributes": {
                    "description": "The attributes of the Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "created": {
                    "type": "number",
                    "description": "The date the Asset was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Asset"
                  },
                  "collection": {
                    "description": "The collection the Asset belongs to",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name given to the collection"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description given to the collection"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The collection's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The url of the image used to represent the collection",
                            "nullable": true
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the collection was imported"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The mint address of the collection on-chain",
                            "nullable": true
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of collection creation"
                          },
                          "stats": {
                            "description": "Statistics about the collection",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "numMinted": {
                                    "type": "number",
                                    "description": "The number of assets minted for this collection"
                                  },
                                  "floorPrice": {
                                    "type": "number",
                                    "description": "The floor price of the collection"
                                  },
                                  "numListed": {
                                    "type": "number",
                                    "description": "The number of assets listed for this collection"
                                  },
                                  "numOwners": {
                                    "type": "number",
                                    "description": "The number of unique owners of assets in this collection"
                                  }
                                },
                                "required": [
                                  "numMinted",
                                  "floorPrice",
                                  "numListed",
                                  "numOwners"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "created"
                        ]
                      }
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "The description provided when the Asset was created"
                  },
                  "environment": {
                    "type": "string",
                    "description": "The asset's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imported": {
                    "type": "boolean",
                    "description": "Whether the Asset was imported"
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "The URI for the image representing the Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the Asset",
                    "enum": [
                      "Uninitiated",
                      "Unprocessed",
                      "Processing",
                      "Committed",
                      "Failed"
                    ]
                  },
                  "escrow": {
                    "type": "boolean",
                    "description": "If the asset is in escrow or not"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address of the Asset on the blockchain"
                  },
                  "owner": {
                    "description": "The current owner of the Asset.",
                    "nullable": true,
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The wallet that currently holds this asset",
                            "nullable": true
                          },
                          "referenceId": {
                            "type": "string",
                            "description": "The reference id associated with the wallet",
                            "nullable": true
                          }
                        }
                      }
                    ]
                  },
                  "priceCents": {
                    "type": "number",
                    "nullable": true,
                    "description": "The price of the asset on the marketplace in cents"
                  }
                },
                "required": [
                  "id",
                  "created",
                  "name",
                  "description",
                  "environment",
                  "imported",
                  "imageUrl",
                  "status",
                  "escrow",
                  "mintAddress"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "item"
        ]
      },
      "TransactionWithCurrencyDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TransferToken",
              "TransferTokenFromDeveloper"
            ]
          },
          "item": {
            "description": "Token details",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID for the currency"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address for the currency's SPL token mint"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the currency"
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The currency's symbol"
                  }
                },
                "required": [
                  "id",
                  "mintAddress",
                  "name",
                  "symbol"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "item"
        ]
      },
      "TransactionWithStackableAssetDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TransferStackableAsset",
              "TransferStackableAssetFromDeveloper"
            ]
          },
          "item": {
            "description": "StackableAsset details",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Stackable Asset"
                  },
                  "attributes": {
                    "description": "Add attributes to your Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "created": {
                    "type": "number",
                    "description": "The date the Asset was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Stackable Asset. Max length: 32 chars",
                    "maxLength": 32
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                    "maxLength": 5
                  },
                  "description": {
                    "type": "string",
                    "description": "A description for the Asset",
                    "maxLength": 64
                  },
                  "collection": {
                    "description": "The collection the Asset belongs to",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name given to the collection"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description given to the collection"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The collection's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The url of the image used to represent the collection",
                            "nullable": true
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the collection was imported"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The mint address of the collection on-chain",
                            "nullable": true
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of collection creation"
                          },
                          "stats": {
                            "description": "Statistics about the collection",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "numMinted": {
                                    "type": "number",
                                    "description": "The number of assets minted for this collection"
                                  },
                                  "floorPrice": {
                                    "type": "number",
                                    "description": "The floor price of the collection"
                                  },
                                  "numListed": {
                                    "type": "number",
                                    "description": "The number of assets listed for this collection"
                                  },
                                  "numOwners": {
                                    "type": "number",
                                    "description": "The number of unique owners of assets in this collection"
                                  }
                                },
                                "required": [
                                  "numMinted",
                                  "floorPrice",
                                  "numListed",
                                  "numOwners"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "created"
                        ]
                      }
                    ]
                  },
                  "environment": {
                    "type": "string",
                    "description": "The asset's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "A url to the image underlying the Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the Asset",
                    "enum": [
                      "Uninitiated",
                      "Unprocessed",
                      "Processing",
                      "Committed",
                      "Failed"
                    ]
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address of the Asset on the blockchain"
                  }
                },
                "required": [
                  "id",
                  "created",
                  "name",
                  "description",
                  "environment",
                  "imageUrl",
                  "status"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "item"
        ]
      },
      "AbitraryTransactionResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AbitraryTransaction"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "WithdrawResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Withdraw"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "TransactionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction ID"
          },
          "created": {
            "type": "string",
            "description": "Transaction creation date",
            "format": "date-time"
          },
          "status": {
            "description": "Transaction confirmation status",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "Confirmed"
                    ]
                  },
                  "txHash": {
                    "type": "string"
                  }
                },
                "required": [
                  "status",
                  "txHash"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "Pending"
                    ]
                  }
                },
                "required": [
                  "status"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "Failed"
                    ]
                  },
                  "error": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "status",
                  "error"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "Expired"
                    ]
                  }
                },
                "required": [
                  "status"
                ]
              }
            ]
          },
          "details": {
            "description": "Transaction type and details about asset and balance changes",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "BuyAsset",
                      "BuyAssetWithCreditCard",
                      "CancelAssetSale",
                      "ChangeAssetPrice",
                      "ListAssetSale",
                      "TransferAsset",
                      "TransferAssetFromDeveloper"
                    ]
                  },
                  "item": {
                    "description": "Asset details",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the Asset"
                          },
                          "attributes": {
                            "description": "The attributes of the Asset",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "traitType": {
                                  "type": "string",
                                  "description": "The name of the trait"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "The value of the trait"
                                }
                              },
                              "required": [
                                "traitType",
                                "value"
                              ]
                            }
                          },
                          "created": {
                            "type": "number",
                            "description": "The date the Asset was created"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the Asset"
                          },
                          "collection": {
                            "description": "The collection the Asset belongs to",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name given to the collection"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "The description given to the collection"
                                  },
                                  "environment": {
                                    "type": "string",
                                    "description": "The collection's environment",
                                    "enum": [
                                      "Development",
                                      "Production"
                                    ]
                                  },
                                  "imageUrl": {
                                    "type": "string",
                                    "description": "The url of the image used to represent the collection",
                                    "nullable": true
                                  },
                                  "imported": {
                                    "type": "boolean",
                                    "description": "Whether the collection was imported"
                                  },
                                  "mintAddress": {
                                    "type": "string",
                                    "description": "The mint address of the collection on-chain",
                                    "nullable": true
                                  },
                                  "created": {
                                    "type": "number",
                                    "description": "Timestamp of collection creation"
                                  },
                                  "stats": {
                                    "description": "Statistics about the collection",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "numMinted": {
                                            "type": "number",
                                            "description": "The number of assets minted for this collection"
                                          },
                                          "floorPrice": {
                                            "type": "number",
                                            "description": "The floor price of the collection"
                                          },
                                          "numListed": {
                                            "type": "number",
                                            "description": "The number of assets listed for this collection"
                                          },
                                          "numOwners": {
                                            "type": "number",
                                            "description": "The number of unique owners of assets in this collection"
                                          }
                                        },
                                        "required": [
                                          "numMinted",
                                          "floorPrice",
                                          "numListed",
                                          "numOwners"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "description",
                                  "environment",
                                  "imported",
                                  "created"
                                ]
                              }
                            ]
                          },
                          "description": {
                            "type": "string",
                            "description": "The description provided when the Asset was created"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The asset's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the Asset was imported"
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The URI for the image representing the Asset"
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the Asset",
                            "enum": [
                              "Uninitiated",
                              "Unprocessed",
                              "Processing",
                              "Committed",
                              "Failed"
                            ]
                          },
                          "escrow": {
                            "type": "boolean",
                            "description": "If the asset is in escrow or not"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The address of the Asset on the blockchain"
                          },
                          "owner": {
                            "description": "The current owner of the Asset.",
                            "nullable": true,
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "description": "The wallet that currently holds this asset",
                                    "nullable": true
                                  },
                                  "referenceId": {
                                    "type": "string",
                                    "description": "The reference id associated with the wallet",
                                    "nullable": true
                                  }
                                }
                              }
                            ]
                          },
                          "priceCents": {
                            "type": "number",
                            "nullable": true,
                            "description": "The price of the asset on the marketplace in cents"
                          }
                        },
                        "required": [
                          "id",
                          "created",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "imageUrl",
                          "status",
                          "escrow",
                          "mintAddress"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "type",
                  "item"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "TransferToken",
                      "TransferTokenFromDeveloper"
                    ]
                  },
                  "item": {
                    "description": "Token details",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID for the currency"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The address for the currency's SPL token mint"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the currency"
                          },
                          "symbol": {
                            "type": "string",
                            "description": "The currency's symbol"
                          }
                        },
                        "required": [
                          "id",
                          "mintAddress",
                          "name",
                          "symbol"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "type",
                  "item"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "TransferStackableAsset",
                      "TransferStackableAssetFromDeveloper"
                    ]
                  },
                  "item": {
                    "description": "StackableAsset details",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the Stackable Asset"
                          },
                          "attributes": {
                            "description": "Add attributes to your Asset",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "traitType": {
                                  "type": "string",
                                  "description": "The name of the trait"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "The value of the trait"
                                }
                              },
                              "required": [
                                "traitType",
                                "value"
                              ]
                            }
                          },
                          "created": {
                            "type": "number",
                            "description": "The date the Asset was created"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the Stackable Asset. Max length: 32 chars",
                            "maxLength": 32
                          },
                          "symbol": {
                            "type": "string",
                            "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                            "maxLength": 5
                          },
                          "description": {
                            "type": "string",
                            "description": "A description for the Asset",
                            "maxLength": 64
                          },
                          "collection": {
                            "description": "The collection the Asset belongs to",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name given to the collection"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "The description given to the collection"
                                  },
                                  "environment": {
                                    "type": "string",
                                    "description": "The collection's environment",
                                    "enum": [
                                      "Development",
                                      "Production"
                                    ]
                                  },
                                  "imageUrl": {
                                    "type": "string",
                                    "description": "The url of the image used to represent the collection",
                                    "nullable": true
                                  },
                                  "imported": {
                                    "type": "boolean",
                                    "description": "Whether the collection was imported"
                                  },
                                  "mintAddress": {
                                    "type": "string",
                                    "description": "The mint address of the collection on-chain",
                                    "nullable": true
                                  },
                                  "created": {
                                    "type": "number",
                                    "description": "Timestamp of collection creation"
                                  },
                                  "stats": {
                                    "description": "Statistics about the collection",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "numMinted": {
                                            "type": "number",
                                            "description": "The number of assets minted for this collection"
                                          },
                                          "floorPrice": {
                                            "type": "number",
                                            "description": "The floor price of the collection"
                                          },
                                          "numListed": {
                                            "type": "number",
                                            "description": "The number of assets listed for this collection"
                                          },
                                          "numOwners": {
                                            "type": "number",
                                            "description": "The number of unique owners of assets in this collection"
                                          }
                                        },
                                        "required": [
                                          "numMinted",
                                          "floorPrice",
                                          "numListed",
                                          "numOwners"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "description",
                                  "environment",
                                  "imported",
                                  "created"
                                ]
                              }
                            ]
                          },
                          "environment": {
                            "type": "string",
                            "description": "The asset's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "A url to the image underlying the Asset"
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the Asset",
                            "enum": [
                              "Uninitiated",
                              "Unprocessed",
                              "Processing",
                              "Committed",
                              "Failed"
                            ]
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The address of the Asset on the blockchain"
                          }
                        },
                        "required": [
                          "id",
                          "created",
                          "name",
                          "description",
                          "environment",
                          "imageUrl",
                          "status"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "type",
                  "item"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "AbitraryTransaction"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Withdraw"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          }
        },
        "required": [
          "id",
          "created",
          "status",
          "details"
        ]
      },
      "BorrowerDto": {
        "type": "object",
        "properties": {
          "borrowerReferenceId": {
            "type": "string",
            "description": "The reference id of the borrower"
          }
        },
        "required": [
          "borrowerReferenceId"
        ]
      },
      "LenderDto": {
        "type": "object",
        "properties": {
          "lenderReferenceId": {
            "type": "string",
            "description": "The reference id of the lender"
          }
        },
        "required": [
          "lenderReferenceId"
        ]
      },
      "CurrencyItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Currency"
            ],
            "description": "Indicates that this `Item` is a `Currency`",
            "title": "Currency",
            "example": "Currency"
          },
          "item": {
            "description": "The currency",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID for the currency"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address for the currency's SPL token mint"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the currency"
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The currency's symbol"
                  }
                },
                "required": [
                  "id",
                  "mintAddress",
                  "name",
                  "symbol"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "item"
        ]
      },
      "UniqueAssetDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Asset"
          },
          "attributes": {
            "description": "The attributes of the Asset",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "traitType": {
                  "type": "string",
                  "description": "The name of the trait"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the trait"
                }
              },
              "required": [
                "traitType",
                "value"
              ]
            }
          },
          "created": {
            "type": "number",
            "description": "The date the Asset was created"
          },
          "name": {
            "type": "string",
            "description": "The name of the Asset"
          },
          "collection": {
            "description": "The collection the Asset belongs to",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name given to the collection"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description given to the collection"
                  },
                  "environment": {
                    "type": "string",
                    "description": "The collection's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "The url of the image used to represent the collection",
                    "nullable": true
                  },
                  "imported": {
                    "type": "boolean",
                    "description": "Whether the collection was imported"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The mint address of the collection on-chain",
                    "nullable": true
                  },
                  "created": {
                    "type": "number",
                    "description": "Timestamp of collection creation"
                  },
                  "stats": {
                    "description": "Statistics about the collection",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "numMinted": {
                            "type": "number",
                            "description": "The number of assets minted for this collection"
                          },
                          "floorPrice": {
                            "type": "number",
                            "description": "The floor price of the collection"
                          },
                          "numListed": {
                            "type": "number",
                            "description": "The number of assets listed for this collection"
                          },
                          "numOwners": {
                            "type": "number",
                            "description": "The number of unique owners of assets in this collection"
                          }
                        },
                        "required": [
                          "numMinted",
                          "floorPrice",
                          "numListed",
                          "numOwners"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "id",
                  "name",
                  "description",
                  "environment",
                  "imported",
                  "created"
                ]
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "The description provided when the Asset was created"
          },
          "environment": {
            "type": "string",
            "description": "The asset's environment",
            "enum": [
              "Development",
              "Production"
            ]
          },
          "imported": {
            "type": "boolean",
            "description": "Indicates if the asset belongs to an imported collection"
          },
          "imageUrl": {
            "type": "string",
            "description": "The URI for the image representing the Asset"
          },
          "status": {
            "type": "string",
            "description": "The current status of the Asset",
            "enum": [
              "Uninitiated",
              "Unprocessed",
              "Processing",
              "Committed",
              "Failed"
            ]
          },
          "forSale": {
            "type": "boolean",
            "description": "Indicates if the asset is currently for sale"
          },
          "mintAddress": {
            "type": "string",
            "description": "The address of the Asset on the blockchain"
          },
          "owner": {
            "description": "The current owner of the Asset.",
            "nullable": true,
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "The wallet that currently holds this asset",
                    "nullable": true
                  },
                  "referenceId": {
                    "type": "string",
                    "description": "The reference id associated with the wallet",
                    "nullable": true
                  }
                }
              }
            ]
          },
          "price": {
            "nullable": true,
            "type": "object",
            "description": "The price of the asset on the marketplace"
          }
        },
        "required": [
          "id",
          "created",
          "name",
          "description",
          "environment",
          "imported",
          "imageUrl",
          "status",
          "forSale",
          "mintAddress"
        ]
      },
      "UniqueAssetItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UniqueAsset"
            ],
            "description": "Indicates that this `Item` is an `UniqueAsset`",
            "title": "UniqueAsset",
            "example": "UniqueAsset"
          },
          "item": {
            "description": "The unique asset",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Asset"
                  },
                  "attributes": {
                    "description": "The attributes of the Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "created": {
                    "type": "number",
                    "description": "The date the Asset was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Asset"
                  },
                  "collection": {
                    "description": "The collection the Asset belongs to",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name given to the collection"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description given to the collection"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The collection's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The url of the image used to represent the collection",
                            "nullable": true
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the collection was imported"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The mint address of the collection on-chain",
                            "nullable": true
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of collection creation"
                          },
                          "stats": {
                            "description": "Statistics about the collection",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "numMinted": {
                                    "type": "number",
                                    "description": "The number of assets minted for this collection"
                                  },
                                  "floorPrice": {
                                    "type": "number",
                                    "description": "The floor price of the collection"
                                  },
                                  "numListed": {
                                    "type": "number",
                                    "description": "The number of assets listed for this collection"
                                  },
                                  "numOwners": {
                                    "type": "number",
                                    "description": "The number of unique owners of assets in this collection"
                                  }
                                },
                                "required": [
                                  "numMinted",
                                  "floorPrice",
                                  "numListed",
                                  "numOwners"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "created"
                        ]
                      }
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "The description provided when the Asset was created"
                  },
                  "environment": {
                    "type": "string",
                    "description": "The asset's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imported": {
                    "type": "boolean",
                    "description": "Indicates if the asset belongs to an imported collection"
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "The URI for the image representing the Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the Asset",
                    "enum": [
                      "Uninitiated",
                      "Unprocessed",
                      "Processing",
                      "Committed",
                      "Failed"
                    ]
                  },
                  "forSale": {
                    "type": "boolean",
                    "description": "Indicates if the asset is currently for sale"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address of the Asset on the blockchain"
                  },
                  "owner": {
                    "description": "The current owner of the Asset.",
                    "nullable": true,
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The wallet that currently holds this asset",
                            "nullable": true
                          },
                          "referenceId": {
                            "type": "string",
                            "description": "The reference id associated with the wallet",
                            "nullable": true
                          }
                        }
                      }
                    ]
                  },
                  "price": {
                    "nullable": true,
                    "type": "object",
                    "description": "The price of the asset on the marketplace"
                  }
                },
                "required": [
                  "id",
                  "created",
                  "name",
                  "description",
                  "environment",
                  "imported",
                  "imageUrl",
                  "status",
                  "forSale",
                  "mintAddress"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "item"
        ]
      },
      "StackableAssetItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "StackableAsset"
            ],
            "description": "Indicates that this `Item` is a `Stackable Asset`",
            "title": "StackableAsset",
            "example": "StackableAsset"
          },
          "item": {
            "description": "The stackable asset",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Stackable Asset"
                  },
                  "attributes": {
                    "description": "Add attributes to your Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "created": {
                    "type": "number",
                    "description": "The date the Asset was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Stackable Asset. Max length: 32 chars",
                    "maxLength": 32
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                    "maxLength": 5
                  },
                  "description": {
                    "type": "string",
                    "description": "A description for the Asset",
                    "maxLength": 64
                  },
                  "collection": {
                    "description": "The collection the Asset belongs to",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name given to the collection"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description given to the collection"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The collection's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The url of the image used to represent the collection",
                            "nullable": true
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the collection was imported"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The mint address of the collection on-chain",
                            "nullable": true
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of collection creation"
                          },
                          "stats": {
                            "description": "Statistics about the collection",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "numMinted": {
                                    "type": "number",
                                    "description": "The number of assets minted for this collection"
                                  },
                                  "floorPrice": {
                                    "type": "number",
                                    "description": "The floor price of the collection"
                                  },
                                  "numListed": {
                                    "type": "number",
                                    "description": "The number of assets listed for this collection"
                                  },
                                  "numOwners": {
                                    "type": "number",
                                    "description": "The number of unique owners of assets in this collection"
                                  }
                                },
                                "required": [
                                  "numMinted",
                                  "floorPrice",
                                  "numListed",
                                  "numOwners"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "created"
                        ]
                      }
                    ]
                  },
                  "environment": {
                    "type": "string",
                    "description": "The asset's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "A url to the image underlying the Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the Asset",
                    "enum": [
                      "Uninitiated",
                      "Unprocessed",
                      "Processing",
                      "Committed",
                      "Failed"
                    ]
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address of the Asset on the blockchain"
                  }
                },
                "required": [
                  "id",
                  "created",
                  "name",
                  "description",
                  "environment",
                  "imageUrl",
                  "status"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "item"
        ]
      },
      "PaginatedItemDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of items",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "Currency"
                      ],
                      "description": "Indicates that this `Item` is a `Currency`",
                      "title": "Currency",
                      "example": "Currency"
                    },
                    "item": {
                      "description": "The currency",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID for the currency"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The address for the currency's SPL token mint"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the currency"
                            },
                            "symbol": {
                              "type": "string",
                              "description": "The currency's symbol"
                            }
                          },
                          "required": [
                            "id",
                            "mintAddress",
                            "name",
                            "symbol"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "UniqueAsset"
                      ],
                      "description": "Indicates that this `Item` is an `UniqueAsset`",
                      "title": "UniqueAsset",
                      "example": "UniqueAsset"
                    },
                    "item": {
                      "description": "The unique asset",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the Asset"
                            },
                            "attributes": {
                              "description": "The attributes of the Asset",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "traitType": {
                                    "type": "string",
                                    "description": "The name of the trait"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The value of the trait"
                                  }
                                },
                                "required": [
                                  "traitType",
                                  "value"
                                ]
                              }
                            },
                            "created": {
                              "type": "number",
                              "description": "The date the Asset was created"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the Asset"
                            },
                            "collection": {
                              "description": "The collection the Asset belongs to",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name given to the collection"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description given to the collection"
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The collection's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "The url of the image used to represent the collection",
                                      "nullable": true
                                    },
                                    "imported": {
                                      "type": "boolean",
                                      "description": "Whether the collection was imported"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The mint address of the collection on-chain",
                                      "nullable": true
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "Timestamp of collection creation"
                                    },
                                    "stats": {
                                      "description": "Statistics about the collection",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "numMinted": {
                                              "type": "number",
                                              "description": "The number of assets minted for this collection"
                                            },
                                            "floorPrice": {
                                              "type": "number",
                                              "description": "The floor price of the collection"
                                            },
                                            "numListed": {
                                              "type": "number",
                                              "description": "The number of assets listed for this collection"
                                            },
                                            "numOwners": {
                                              "type": "number",
                                              "description": "The number of unique owners of assets in this collection"
                                            }
                                          },
                                          "required": [
                                            "numMinted",
                                            "floorPrice",
                                            "numListed",
                                            "numOwners"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "description",
                                    "environment",
                                    "imported",
                                    "created"
                                  ]
                                }
                              ]
                            },
                            "description": {
                              "type": "string",
                              "description": "The description provided when the Asset was created"
                            },
                            "environment": {
                              "type": "string",
                              "description": "The asset's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imported": {
                              "type": "boolean",
                              "description": "Indicates if the asset belongs to an imported collection"
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "The URI for the image representing the Asset"
                            },
                            "status": {
                              "type": "string",
                              "description": "The current status of the Asset",
                              "enum": [
                                "Uninitiated",
                                "Unprocessed",
                                "Processing",
                                "Committed",
                                "Failed"
                              ]
                            },
                            "forSale": {
                              "type": "boolean",
                              "description": "Indicates if the asset is currently for sale"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The address of the Asset on the blockchain"
                            },
                            "owner": {
                              "description": "The current owner of the Asset.",
                              "nullable": true,
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "type": "string",
                                      "description": "The wallet that currently holds this asset",
                                      "nullable": true
                                    },
                                    "referenceId": {
                                      "type": "string",
                                      "description": "The reference id associated with the wallet",
                                      "nullable": true
                                    }
                                  }
                                }
                              ]
                            },
                            "price": {
                              "nullable": true,
                              "type": "object",
                              "description": "The price of the asset on the marketplace"
                            }
                          },
                          "required": [
                            "id",
                            "created",
                            "name",
                            "description",
                            "environment",
                            "imported",
                            "imageUrl",
                            "status",
                            "forSale",
                            "mintAddress"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "StackableAsset"
                      ],
                      "description": "Indicates that this `Item` is a `Stackable Asset`",
                      "title": "StackableAsset",
                      "example": "StackableAsset"
                    },
                    "item": {
                      "description": "The stackable asset",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the Stackable Asset"
                            },
                            "attributes": {
                              "description": "Add attributes to your Asset",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "traitType": {
                                    "type": "string",
                                    "description": "The name of the trait"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The value of the trait"
                                  }
                                },
                                "required": [
                                  "traitType",
                                  "value"
                                ]
                              }
                            },
                            "created": {
                              "type": "number",
                              "description": "The date the Asset was created"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the Stackable Asset. Max length: 32 chars",
                              "maxLength": 32
                            },
                            "symbol": {
                              "type": "string",
                              "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                              "maxLength": 5
                            },
                            "description": {
                              "type": "string",
                              "description": "A description for the Asset",
                              "maxLength": 64
                            },
                            "collection": {
                              "description": "The collection the Asset belongs to",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name given to the collection"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description given to the collection"
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The collection's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "The url of the image used to represent the collection",
                                      "nullable": true
                                    },
                                    "imported": {
                                      "type": "boolean",
                                      "description": "Whether the collection was imported"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The mint address of the collection on-chain",
                                      "nullable": true
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "Timestamp of collection creation"
                                    },
                                    "stats": {
                                      "description": "Statistics about the collection",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "numMinted": {
                                              "type": "number",
                                              "description": "The number of assets minted for this collection"
                                            },
                                            "floorPrice": {
                                              "type": "number",
                                              "description": "The floor price of the collection"
                                            },
                                            "numListed": {
                                              "type": "number",
                                              "description": "The number of assets listed for this collection"
                                            },
                                            "numOwners": {
                                              "type": "number",
                                              "description": "The number of unique owners of assets in this collection"
                                            }
                                          },
                                          "required": [
                                            "numMinted",
                                            "floorPrice",
                                            "numListed",
                                            "numOwners"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "description",
                                    "environment",
                                    "imported",
                                    "created"
                                  ]
                                }
                              ]
                            },
                            "environment": {
                              "type": "string",
                              "description": "The asset's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "A url to the image underlying the Asset"
                            },
                            "status": {
                              "type": "string",
                              "description": "The current status of the Asset",
                              "enum": [
                                "Uninitiated",
                                "Unprocessed",
                                "Processing",
                                "Committed",
                                "Failed"
                              ]
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The address of the Asset on the blockchain"
                            }
                          },
                          "required": [
                            "id",
                            "created",
                            "name",
                            "description",
                            "environment",
                            "imageUrl",
                            "status"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                }
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "ProjectUserRecipient": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "The recipient's reference id"
          },
          "address": {
            "type": "string",
            "description": "The recipient's on-chain address"
          },
          "share": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "The recipient's share of the royalties, in percentage points. 0-100"
          }
        },
        "required": [
          "referenceId",
          "address",
          "share"
        ]
      },
      "RoyaltyInfoWithProjectUserRecipientDto": {
        "type": "object",
        "properties": {
          "sellerFeeBasisPoints": {
            "type": "number",
            "minimum": 0,
            "maximum": 10000,
            "description": "How much the seller pays the recipients on each sale of the asset when using Gameshift's marketplace in basis points. 0-10000"
          },
          "recipients": {
            "description": "Recipients of the royalties",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "referenceId": {
                  "type": "string",
                  "description": "The recipient's reference id"
                },
                "address": {
                  "type": "string",
                  "description": "The recipient's on-chain address"
                },
                "share": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "The recipient's share of the royalties, in percentage points. 0-100"
                }
              },
              "required": [
                "referenceId",
                "address",
                "share"
              ]
            }
          }
        },
        "required": [
          "sellerFeeBasisPoints",
          "recipients"
        ]
      },
      "CreateUniqueAssetDetailsDto": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Specify attributes to your Unique Asset.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "traitType": {
                  "type": "string",
                  "description": "The name of the trait"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the trait"
                }
              },
              "required": [
                "traitType",
                "value"
              ]
            }
          },
          "royaltyInfo": {
            "description": "Specify royalties to your Unique Asset.",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "sellerFeeBasisPoints": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 10000,
                    "description": "How much the seller pays the recipients on each sale of the asset when using Gameshift's marketplace in basis points. 0-10000"
                  },
                  "recipients": {
                    "description": "Recipients of the royalties",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "referenceId": {
                          "type": "string",
                          "description": "The recipient's reference id"
                        },
                        "address": {
                          "type": "string",
                          "description": "The recipient's on-chain address"
                        },
                        "share": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "description": "The recipient's share of the royalties, in percentage points. 0-100"
                        }
                      },
                      "required": [
                        "referenceId",
                        "address",
                        "share"
                      ]
                    }
                  }
                },
                "required": [
                  "sellerFeeBasisPoints",
                  "recipients"
                ]
              }
            ]
          },
          "collectionId": {
            "type": "string",
            "description": "The collection the Unique Asset should belong to."
          },
          "description": {
            "type": "string",
            "description": "A description for the Unique Asset.",
            "maxLength": 64
          },
          "imageUrl": {
            "type": "string",
            "description": "A url to the image underlying the Asset."
          },
          "name": {
            "type": "string",
            "description": "The name of the Asset. Max length: 32 chars.",
            "maxLength": 32
          }
        },
        "required": [
          "collectionId",
          "description",
          "imageUrl",
          "name"
        ]
      },
      "CreateUniqueAssetDto": {
        "type": "object",
        "properties": {
          "details": {
            "description": "The asset to create",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "attributes": {
                    "description": "Specify attributes to your Unique Asset.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "royaltyInfo": {
                    "description": "Specify royalties to your Unique Asset.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "sellerFeeBasisPoints": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 10000,
                            "description": "How much the seller pays the recipients on each sale of the asset when using Gameshift's marketplace in basis points. 0-10000"
                          },
                          "recipients": {
                            "description": "Recipients of the royalties",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "referenceId": {
                                  "type": "string",
                                  "description": "The recipient's reference id"
                                },
                                "address": {
                                  "type": "string",
                                  "description": "The recipient's on-chain address"
                                },
                                "share": {
                                  "type": "number",
                                  "minimum": 0,
                                  "maximum": 100,
                                  "description": "The recipient's share of the royalties, in percentage points. 0-100"
                                }
                              },
                              "required": [
                                "referenceId",
                                "address",
                                "share"
                              ]
                            }
                          }
                        },
                        "required": [
                          "sellerFeeBasisPoints",
                          "recipients"
                        ]
                      }
                    ]
                  },
                  "collectionId": {
                    "type": "string",
                    "description": "The collection the Unique Asset should belong to."
                  },
                  "description": {
                    "type": "string",
                    "description": "A description for the Unique Asset.",
                    "maxLength": 64
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "A url to the image underlying the Asset."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Asset. Max length: 32 chars.",
                    "maxLength": 32
                  }
                },
                "required": [
                  "collectionId",
                  "description",
                  "imageUrl",
                  "name"
                ]
              }
            ]
          },
          "destinationUserReferenceId": {
            "type": "string",
            "minLength": 1,
            "description": "The reference id of the user the asset should be assigned to"
          }
        },
        "required": [
          "details",
          "destinationUserReferenceId"
        ]
      },
      "UpdateAssetDto": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string",
            "description": "Image url of the Asset"
          },
          "attributes": {
            "description": "Update attributes on the Asset",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "traitType": {
                  "type": "string",
                  "description": "The name of the trait"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the trait"
                }
              },
              "required": [
                "traitType",
                "value"
              ]
            }
          }
        }
      },
      "MonetaryAmountDto": {
        "type": "object",
        "properties": {
          "currencyId": {
            "minLength": 1,
            "type": "string",
            "description": "The currency identifier"
          },
          "naturalAmount": {
            "type": "string",
            "minLength": 1,
            "description": "The amount in the human readable format"
          }
        },
        "required": [
          "currencyId",
          "naturalAmount"
        ]
      },
      "MarkAssetForSaleV3Dto": {
        "type": "object",
        "properties": {
          "price": {
            "description": "Listing price for the asset",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "currencyId": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The currency identifier"
                  },
                  "naturalAmount": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The amount in the human readable format"
                  }
                },
                "required": [
                  "currencyId",
                  "naturalAmount"
                ]
              }
            ]
          }
        },
        "required": [
          "price"
        ]
      },
      "RequestCheckoutListingDto": {
        "type": "object",
        "properties": {
          "buyerId": {
            "type": "string",
            "minLength": 1,
            "description": "Identifies the `User` buying the item"
          }
        },
        "required": [
          "buyerId"
        ]
      },
      "PaginatedCollectionDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "A list of Collections",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                },
                "name": {
                  "type": "string",
                  "description": "The name given to the collection"
                },
                "description": {
                  "type": "string",
                  "description": "The description given to the collection"
                },
                "environment": {
                  "type": "string",
                  "description": "The collection's environment",
                  "enum": [
                    "Development",
                    "Production"
                  ]
                },
                "imageUrl": {
                  "type": "string",
                  "description": "The url of the image used to represent the collection",
                  "nullable": true
                },
                "imported": {
                  "type": "boolean",
                  "description": "Whether the collection was imported"
                },
                "mintAddress": {
                  "type": "string",
                  "description": "The mint address of the collection on-chain",
                  "nullable": true
                },
                "created": {
                  "type": "number",
                  "description": "Timestamp of collection creation"
                },
                "stats": {
                  "description": "Statistics about the collection",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "numMinted": {
                          "type": "number",
                          "description": "The number of assets minted for this collection"
                        },
                        "floorPrice": {
                          "type": "number",
                          "description": "The floor price of the collection"
                        },
                        "numListed": {
                          "type": "number",
                          "description": "The number of assets listed for this collection"
                        },
                        "numOwners": {
                          "type": "number",
                          "description": "The number of unique owners of assets in this collection"
                        }
                      },
                      "required": [
                        "numMinted",
                        "floorPrice",
                        "numListed",
                        "numOwners"
                      ]
                    }
                  ]
                }
              },
              "required": [
                "id",
                "name",
                "description",
                "environment",
                "imported",
                "created"
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "CreateCollectionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Names the Asset Collection"
          },
          "description": {
            "type": "string",
            "description": "Describes the Asset Collection"
          },
          "imageUrl": {
            "type": "string",
            "description": "URL for the Asset Collection's image"
          }
        },
        "required": [
          "name",
          "description",
          "imageUrl"
        ]
      },
      "ImportCollectionDto": {
        "type": "object",
        "properties": {
          "collectionAddress": {
            "type": "string",
            "description": "The on-chain address for the collection"
          }
        },
        "required": [
          "collectionAddress"
        ]
      },
      "DeveloperWalletAddressDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The address of the wallet."
          }
        },
        "required": [
          "address"
        ]
      },
      "PaymentSkuMint": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates that this payment is for a Unique Asset mint operation.",
            "enum": [
              "AssetMint"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "PaymentSkuAsset": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates that this payment is for a Unique Asset",
            "enum": [
              "MarketplaceSale"
            ]
          },
          "item": {
            "description": "The Unique Asset the payment is for.",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Asset"
                  },
                  "attributes": {
                    "description": "The attributes of the Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "created": {
                    "type": "number",
                    "description": "The date the Asset was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Asset"
                  },
                  "collection": {
                    "description": "The collection the Asset belongs to",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name given to the collection"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description given to the collection"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The collection's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The url of the image used to represent the collection",
                            "nullable": true
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the collection was imported"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The mint address of the collection on-chain",
                            "nullable": true
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of collection creation"
                          },
                          "stats": {
                            "description": "Statistics about the collection",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "numMinted": {
                                    "type": "number",
                                    "description": "The number of assets minted for this collection"
                                  },
                                  "floorPrice": {
                                    "type": "number",
                                    "description": "The floor price of the collection"
                                  },
                                  "numListed": {
                                    "type": "number",
                                    "description": "The number of assets listed for this collection"
                                  },
                                  "numOwners": {
                                    "type": "number",
                                    "description": "The number of unique owners of assets in this collection"
                                  }
                                },
                                "required": [
                                  "numMinted",
                                  "floorPrice",
                                  "numListed",
                                  "numOwners"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "created"
                        ]
                      }
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "The description provided when the Asset was created"
                  },
                  "environment": {
                    "type": "string",
                    "description": "The asset's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imported": {
                    "type": "boolean",
                    "description": "Indicates if the asset belongs to an imported collection"
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "The URI for the image representing the Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the Asset",
                    "enum": [
                      "Uninitiated",
                      "Unprocessed",
                      "Processing",
                      "Committed",
                      "Failed"
                    ]
                  },
                  "forSale": {
                    "type": "boolean",
                    "description": "Indicates if the asset is currently for sale"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address of the Asset on the blockchain"
                  },
                  "owner": {
                    "description": "The current owner of the Asset.",
                    "nullable": true,
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The wallet that currently holds this asset",
                            "nullable": true
                          },
                          "referenceId": {
                            "type": "string",
                            "description": "The reference id associated with the wallet",
                            "nullable": true
                          }
                        }
                      }
                    ]
                  },
                  "price": {
                    "nullable": true,
                    "type": "object",
                    "description": "The price of the asset on the marketplace"
                  }
                },
                "required": [
                  "id",
                  "created",
                  "name",
                  "description",
                  "environment",
                  "imported",
                  "imageUrl",
                  "status",
                  "forSale",
                  "mintAddress"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "item"
        ]
      },
      "PaymentSkuGeneric": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates that this payment is for a generic purchase",
            "enum": [
              "Generic"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "PaymentV3Dto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the payment"
          },
          "environment": {
            "type": "string",
            "description": "Environment the payment initiated on",
            "enum": [
              "Development",
              "Production"
            ]
          },
          "purchaser": {
            "description": "The user making the purchase",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "referenceId": {
                    "type": "string",
                    "description": "The reference id of the user"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of the user"
                  }
                },
                "required": [
                  "referenceId",
                  "email"
                ]
              }
            ]
          },
          "price": {
            "description": "The payment amount",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "currencyId": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The currency identifier"
                  },
                  "naturalAmount": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The amount in the human readable format"
                  }
                },
                "required": [
                  "currencyId",
                  "naturalAmount"
                ]
              }
            ]
          },
          "sku": {
            "description": "What this payment is for",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Indicates that this payment is for a Unique Asset",
                    "enum": [
                      "MarketplaceSale"
                    ]
                  },
                  "item": {
                    "description": "The Unique Asset the payment is for.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the Asset"
                          },
                          "attributes": {
                            "description": "The attributes of the Asset",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "traitType": {
                                  "type": "string",
                                  "description": "The name of the trait"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "The value of the trait"
                                }
                              },
                              "required": [
                                "traitType",
                                "value"
                              ]
                            }
                          },
                          "created": {
                            "type": "number",
                            "description": "The date the Asset was created"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the Asset"
                          },
                          "collection": {
                            "description": "The collection the Asset belongs to",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name given to the collection"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "The description given to the collection"
                                  },
                                  "environment": {
                                    "type": "string",
                                    "description": "The collection's environment",
                                    "enum": [
                                      "Development",
                                      "Production"
                                    ]
                                  },
                                  "imageUrl": {
                                    "type": "string",
                                    "description": "The url of the image used to represent the collection",
                                    "nullable": true
                                  },
                                  "imported": {
                                    "type": "boolean",
                                    "description": "Whether the collection was imported"
                                  },
                                  "mintAddress": {
                                    "type": "string",
                                    "description": "The mint address of the collection on-chain",
                                    "nullable": true
                                  },
                                  "created": {
                                    "type": "number",
                                    "description": "Timestamp of collection creation"
                                  },
                                  "stats": {
                                    "description": "Statistics about the collection",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "numMinted": {
                                            "type": "number",
                                            "description": "The number of assets minted for this collection"
                                          },
                                          "floorPrice": {
                                            "type": "number",
                                            "description": "The floor price of the collection"
                                          },
                                          "numListed": {
                                            "type": "number",
                                            "description": "The number of assets listed for this collection"
                                          },
                                          "numOwners": {
                                            "type": "number",
                                            "description": "The number of unique owners of assets in this collection"
                                          }
                                        },
                                        "required": [
                                          "numMinted",
                                          "floorPrice",
                                          "numListed",
                                          "numOwners"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "description",
                                  "environment",
                                  "imported",
                                  "created"
                                ]
                              }
                            ]
                          },
                          "description": {
                            "type": "string",
                            "description": "The description provided when the Asset was created"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The asset's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Indicates if the asset belongs to an imported collection"
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The URI for the image representing the Asset"
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the Asset",
                            "enum": [
                              "Uninitiated",
                              "Unprocessed",
                              "Processing",
                              "Committed",
                              "Failed"
                            ]
                          },
                          "forSale": {
                            "type": "boolean",
                            "description": "Indicates if the asset is currently for sale"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The address of the Asset on the blockchain"
                          },
                          "owner": {
                            "description": "The current owner of the Asset.",
                            "nullable": true,
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "description": "The wallet that currently holds this asset",
                                    "nullable": true
                                  },
                                  "referenceId": {
                                    "type": "string",
                                    "description": "The reference id associated with the wallet",
                                    "nullable": true
                                  }
                                }
                              }
                            ]
                          },
                          "price": {
                            "nullable": true,
                            "type": "object",
                            "description": "The price of the asset on the marketplace"
                          }
                        },
                        "required": [
                          "id",
                          "created",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "imageUrl",
                          "status",
                          "forSale",
                          "mintAddress"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "type",
                  "item"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Indicates that this payment is for a Unique Asset mint operation.",
                    "enum": [
                      "AssetMint"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Indicates that this payment is for a generic purchase",
                    "enum": [
                      "Generic"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the payment",
            "enum": [
              "Pending",
              "Confirmed",
              "Completed",
              "Failed",
              "Expired"
            ]
          }
        },
        "required": [
          "id",
          "environment",
          "purchaser",
          "price",
          "sku",
          "status"
        ]
      },
      "PaginatedPaymentV3Dto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "A list of Payments",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the payment"
                },
                "environment": {
                  "type": "string",
                  "description": "Environment the payment initiated on",
                  "enum": [
                    "Development",
                    "Production"
                  ]
                },
                "purchaser": {
                  "description": "The user making the purchase",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "referenceId": {
                          "type": "string",
                          "description": "The reference id of the user"
                        },
                        "email": {
                          "type": "string",
                          "description": "The email of the user"
                        }
                      },
                      "required": [
                        "referenceId",
                        "email"
                      ]
                    }
                  ]
                },
                "price": {
                  "description": "The payment amount",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "currencyId": {
                          "minLength": 1,
                          "type": "string",
                          "description": "The currency identifier"
                        },
                        "naturalAmount": {
                          "type": "string",
                          "minLength": 1,
                          "description": "The amount in the human readable format"
                        }
                      },
                      "required": [
                        "currencyId",
                        "naturalAmount"
                      ]
                    }
                  ]
                },
                "sku": {
                  "description": "What this payment is for",
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Indicates that this payment is for a Unique Asset",
                          "enum": [
                            "MarketplaceSale"
                          ]
                        },
                        "item": {
                          "description": "The Unique Asset the payment is for.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the Asset"
                                },
                                "attributes": {
                                  "description": "The attributes of the Asset",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "traitType": {
                                        "type": "string",
                                        "description": "The name of the trait"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "The value of the trait"
                                      }
                                    },
                                    "required": [
                                      "traitType",
                                      "value"
                                    ]
                                  }
                                },
                                "created": {
                                  "type": "number",
                                  "description": "The date the Asset was created"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the Asset"
                                },
                                "collection": {
                                  "description": "The collection the Asset belongs to",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name given to the collection"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "The description given to the collection"
                                        },
                                        "environment": {
                                          "type": "string",
                                          "description": "The collection's environment",
                                          "enum": [
                                            "Development",
                                            "Production"
                                          ]
                                        },
                                        "imageUrl": {
                                          "type": "string",
                                          "description": "The url of the image used to represent the collection",
                                          "nullable": true
                                        },
                                        "imported": {
                                          "type": "boolean",
                                          "description": "Whether the collection was imported"
                                        },
                                        "mintAddress": {
                                          "type": "string",
                                          "description": "The mint address of the collection on-chain",
                                          "nullable": true
                                        },
                                        "created": {
                                          "type": "number",
                                          "description": "Timestamp of collection creation"
                                        },
                                        "stats": {
                                          "description": "Statistics about the collection",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "numMinted": {
                                                  "type": "number",
                                                  "description": "The number of assets minted for this collection"
                                                },
                                                "floorPrice": {
                                                  "type": "number",
                                                  "description": "The floor price of the collection"
                                                },
                                                "numListed": {
                                                  "type": "number",
                                                  "description": "The number of assets listed for this collection"
                                                },
                                                "numOwners": {
                                                  "type": "number",
                                                  "description": "The number of unique owners of assets in this collection"
                                                }
                                              },
                                              "required": [
                                                "numMinted",
                                                "floorPrice",
                                                "numListed",
                                                "numOwners"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "description",
                                        "environment",
                                        "imported",
                                        "created"
                                      ]
                                    }
                                  ]
                                },
                                "description": {
                                  "type": "string",
                                  "description": "The description provided when the Asset was created"
                                },
                                "environment": {
                                  "type": "string",
                                  "description": "The asset's environment",
                                  "enum": [
                                    "Development",
                                    "Production"
                                  ]
                                },
                                "imported": {
                                  "type": "boolean",
                                  "description": "Indicates if the asset belongs to an imported collection"
                                },
                                "imageUrl": {
                                  "type": "string",
                                  "description": "The URI for the image representing the Asset"
                                },
                                "status": {
                                  "type": "string",
                                  "description": "The current status of the Asset",
                                  "enum": [
                                    "Uninitiated",
                                    "Unprocessed",
                                    "Processing",
                                    "Committed",
                                    "Failed"
                                  ]
                                },
                                "forSale": {
                                  "type": "boolean",
                                  "description": "Indicates if the asset is currently for sale"
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address of the Asset on the blockchain"
                                },
                                "owner": {
                                  "description": "The current owner of the Asset.",
                                  "nullable": true,
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "The wallet that currently holds this asset",
                                          "nullable": true
                                        },
                                        "referenceId": {
                                          "type": "string",
                                          "description": "The reference id associated with the wallet",
                                          "nullable": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                "price": {
                                  "nullable": true,
                                  "type": "object",
                                  "description": "The price of the asset on the marketplace"
                                }
                              },
                              "required": [
                                "id",
                                "created",
                                "name",
                                "description",
                                "environment",
                                "imported",
                                "imageUrl",
                                "status",
                                "forSale",
                                "mintAddress"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "item"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Indicates that this payment is for a Unique Asset mint operation.",
                          "enum": [
                            "AssetMint"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Indicates that this payment is for a generic purchase",
                          "enum": [
                            "Generic"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Status of the payment",
                  "enum": [
                    "Pending",
                    "Confirmed",
                    "Completed",
                    "Failed",
                    "Expired"
                  ]
                }
              },
              "required": [
                "id",
                "environment",
                "purchaser",
                "price",
                "sku",
                "status"
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "RequestCheckoutV3Dto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "description": "Item being purchased"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "description": "Describes the item being purchased"
          },
          "price": {
            "description": "Price of the item",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "currencyId": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The currency identifier"
                  },
                  "naturalAmount": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The amount in the human readable format"
                  }
                },
                "required": [
                  "currencyId",
                  "naturalAmount"
                ]
              }
            ]
          },
          "quantity": {
            "type": "number",
            "description": "Amount of items being purchased"
          },
          "buyerId": {
            "type": "string",
            "minLength": 1,
            "description": "Identifies the `User` buying the item"
          }
        },
        "required": [
          "title",
          "description",
          "price",
          "quantity",
          "buyerId"
        ]
      },
      "CheckoutDto": {
        "type": "object",
        "properties": {
          "checkoutUrl": {
            "type": "string",
            "description": "A URL the User must visit to complete the payment"
          },
          "id": {
            "type": "string",
            "description": "An id used to reference the payment"
          }
        },
        "required": [
          "checkoutUrl",
          "id"
        ]
      },
      "Rewards": {
        "type": "object",
        "properties": {
          "totalAllocated": {
            "type": "string",
            "description": "The total amount of rewards that have been allocated to enrollments"
          },
          "totalUnallocated": {
            "type": "string",
            "description": "The unallocated rewards that are just sitting in the program"
          },
          "totalClaimed": {
            "type": "string",
            "description": "The amount of rewards claimed from the program"
          },
          "rewardFunding": {
            "type": "string",
            "description": "The total amount of rewards that are currently in the program"
          }
        },
        "required": [
          "totalAllocated",
          "totalUnallocated",
          "totalClaimed",
          "rewardFunding"
        ]
      },
      "LoyaltyProgramDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Loyalty Program"
          },
          "image": {
            "type": "string",
            "description": "The associated image URL of the Loyalty Program"
          },
          "environment": {
            "type": "object",
            "description": "The Environment of the Enrollment"
          },
          "id": {
            "type": "string",
            "description": "The ID of the Loyalty Program"
          },
          "address": {
            "type": "string",
            "description": "The on-chain address of the Loyalty Program"
          },
          "enrollmentCurrencyId": {
            "type": "string",
            "description": "The currency id of the enrollment currency. Register new currencies under /nx/currencies"
          },
          "enrollmentMintAddress": {
            "type": "string",
            "description": "The on-chain address of the enrollment currency"
          },
          "rewardCurrencyId": {
            "type": "string",
            "description": "The currency id of the reward currency. Register new currencies under /nx/currencies"
          },
          "rewardMintAddress": {
            "type": "string",
            "description": "The on-chain address of the reward currency"
          },
          "maxTokens": {
            "type": "string",
            "description": "The max number of tokens that can be enrolled in this program"
          },
          "maxEnrollmentPeriod": {
            "type": "number",
            "description": "The max amount of time in seconds that an enrollment can last in this program"
          },
          "minEnrollmentPeriod": {
            "type": "number",
            "description": "The min amount of time in seconds that an enrollment can last in this program"
          },
          "maxEnrollments": {
            "type": "number",
            "description": "The max number of enrollments that this program can support"
          },
          "projectId": {
            "type": "string",
            "description": "The project ID that owns this Loyalty Program"
          },
          "adminAddress": {
            "type": "string",
            "description": "The on-chain address of the wallet that has administrative control over this Loyalty Program"
          },
          "fundingAddress": {
            "type": "string",
            "description": "The on-chain address of the rewards token account"
          },
          "currentSnapshotId": {
            "type": "string",
            "description": "The ID of the latest snapshot of the rewards in the program (if one exists)"
          },
          "rewards": {
            "description": "A breakdown of rewards that have been allocated to enrollments",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "totalAllocated": {
                    "type": "string",
                    "description": "The total amount of rewards that have been allocated to enrollments"
                  },
                  "totalUnallocated": {
                    "type": "string",
                    "description": "The unallocated rewards that are just sitting in the program"
                  },
                  "totalClaimed": {
                    "type": "string",
                    "description": "The amount of rewards claimed from the program"
                  },
                  "rewardFunding": {
                    "type": "string",
                    "description": "The total amount of rewards that are currently in the program"
                  }
                },
                "required": [
                  "totalAllocated",
                  "totalUnallocated",
                  "totalClaimed",
                  "rewardFunding"
                ]
              }
            ]
          },
          "allowNewEnrollees": {
            "type": "boolean",
            "description": "Whether new enrollments are currently allowed in the program (can be changed by administrator wallet)"
          }
        },
        "required": [
          "name",
          "image",
          "environment",
          "id",
          "address",
          "enrollmentCurrencyId",
          "enrollmentMintAddress",
          "rewardCurrencyId",
          "rewardMintAddress",
          "maxTokens",
          "maxEnrollmentPeriod",
          "minEnrollmentPeriod",
          "maxEnrollments",
          "projectId",
          "adminAddress",
          "fundingAddress",
          "rewards",
          "allowNewEnrollees"
        ]
      },
      "PaginatedLoyaltyProgramDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The loyalty programs",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the Loyalty Program"
                },
                "image": {
                  "type": "string",
                  "description": "The associated image URL of the Loyalty Program"
                },
                "environment": {
                  "type": "object",
                  "description": "The Environment of the Enrollment"
                },
                "id": {
                  "type": "string",
                  "description": "The ID of the Loyalty Program"
                },
                "address": {
                  "type": "string",
                  "description": "The on-chain address of the Loyalty Program"
                },
                "enrollmentCurrencyId": {
                  "type": "string",
                  "description": "The currency id of the enrollment currency. Register new currencies under /nx/currencies"
                },
                "enrollmentMintAddress": {
                  "type": "string",
                  "description": "The on-chain address of the enrollment currency"
                },
                "rewardCurrencyId": {
                  "type": "string",
                  "description": "The currency id of the reward currency. Register new currencies under /nx/currencies"
                },
                "rewardMintAddress": {
                  "type": "string",
                  "description": "The on-chain address of the reward currency"
                },
                "maxTokens": {
                  "type": "string",
                  "description": "The max number of tokens that can be enrolled in this program"
                },
                "maxEnrollmentPeriod": {
                  "type": "number",
                  "description": "The max amount of time in seconds that an enrollment can last in this program"
                },
                "minEnrollmentPeriod": {
                  "type": "number",
                  "description": "The min amount of time in seconds that an enrollment can last in this program"
                },
                "maxEnrollments": {
                  "type": "number",
                  "description": "The max number of enrollments that this program can support"
                },
                "projectId": {
                  "type": "string",
                  "description": "The project ID that owns this Loyalty Program"
                },
                "adminAddress": {
                  "type": "string",
                  "description": "The on-chain address of the wallet that has administrative control over this Loyalty Program"
                },
                "fundingAddress": {
                  "type": "string",
                  "description": "The on-chain address of the rewards token account"
                },
                "currentSnapshotId": {
                  "type": "string",
                  "description": "The ID of the latest snapshot of the rewards in the program (if one exists)"
                },
                "rewards": {
                  "description": "A breakdown of rewards that have been allocated to enrollments",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "totalAllocated": {
                          "type": "string",
                          "description": "The total amount of rewards that have been allocated to enrollments"
                        },
                        "totalUnallocated": {
                          "type": "string",
                          "description": "The unallocated rewards that are just sitting in the program"
                        },
                        "totalClaimed": {
                          "type": "string",
                          "description": "The amount of rewards claimed from the program"
                        },
                        "rewardFunding": {
                          "type": "string",
                          "description": "The total amount of rewards that are currently in the program"
                        }
                      },
                      "required": [
                        "totalAllocated",
                        "totalUnallocated",
                        "totalClaimed",
                        "rewardFunding"
                      ]
                    }
                  ]
                },
                "allowNewEnrollees": {
                  "type": "boolean",
                  "description": "Whether new enrollments are currently allowed in the program (can be changed by administrator wallet)"
                }
              },
              "required": [
                "name",
                "image",
                "environment",
                "id",
                "address",
                "enrollmentCurrencyId",
                "enrollmentMintAddress",
                "rewardCurrencyId",
                "rewardMintAddress",
                "maxTokens",
                "maxEnrollmentPeriod",
                "minEnrollmentPeriod",
                "maxEnrollments",
                "projectId",
                "adminAddress",
                "fundingAddress",
                "rewards",
                "allowNewEnrollees"
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "CreateLoyaltyRewardsProgramDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional name of the program, shown in the UI"
          },
          "image": {
            "type": "string",
            "description": "Optional associated image URL of the program, shown in the UI"
          },
          "enrollmentCurrencyId": {
            "type": "string",
            "description": "The currency id of the enrollment currency. Register under /nx/currencies"
          },
          "rewardCurrencyId": {
            "type": "string",
            "description": "The currency id of the enrollment currency. Register under /nx/currencies"
          },
          "maxEnrollments": {
            "type": "number",
            "description": "The max number of enrollments that this pool can support (up to 32,000)"
          },
          "maxTokens": {
            "type": "string",
            "description": "The max number of enrolled tokens that this pool can support (as a string). Up to 2^64."
          },
          "maxEnrollmentPeriod": {
            "type": "number",
            "description": "The max amount of time in seconds that an enrollment can last."
          },
          "minEnrollmentPeriod": {
            "type": "number",
            "description": "The minimum amount of time, in seconds, that an enrollment can last."
          }
        },
        "required": [
          "enrollmentCurrencyId",
          "rewardCurrencyId",
          "maxEnrollments",
          "maxTokens",
          "maxEnrollmentPeriod",
          "minEnrollmentPeriod"
        ]
      },
      "CreateLoyaltyProgramDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the newly created program"
          },
          "transactionId": {
            "type": "string",
            "description": "The GameShift ID of the on-chain transaction that created the program"
          },
          "transactionHash": {
            "type": "string",
            "description": "The transaction hash, can be used on explorers"
          }
        },
        "required": [
          "id",
          "transactionId",
          "transactionHash"
        ]
      },
      "MinimalTransactionResponseDto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "GameShift transaction id"
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction hash"
          }
        },
        "required": [
          "transactionId",
          "transactionHash"
        ]
      },
      "SetLoyaltyProgramMetadataDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name of the program"
          },
          "image": {
            "type": "string",
            "description": "URL for the Loyalty Program's image",
            "default": "https://solana.com/src/img/branding/solanaLogoMark.png"
          }
        }
      },
      "MinimalLoyaltyProgramDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Loyalty Program"
          },
          "name": {
            "type": "string",
            "description": "The name of the Loyalty Program"
          },
          "image": {
            "type": "string",
            "description": "The associated image URL of the Loyalty Program"
          }
        },
        "required": [
          "id",
          "name",
          "image"
        ]
      },
      "EnrollmentAllocation": {
        "type": "object",
        "properties": {
          "enrollmentId": {
            "type": "string",
            "description": "The ID of the Enrollment"
          },
          "multiplier": {
            "type": "number",
            "description": "The multiplier that will be averaged against all others to get final percent of allocation given to enrollment"
          }
        },
        "required": [
          "enrollmentId",
          "multiplier"
        ]
      },
      "CreateLoyaltyRewardsSnapshotDto": {
        "type": "object",
        "properties": {
          "amountToAllocate": {
            "type": "string",
            "description": "Amount of unallocated reward tokens to allocate (final processed balance may differ due to rounding)"
          },
          "enrollments": {
            "description": "A list of enrollments and corresponding multipliers to allocate rewards to",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "enrollmentId": {
                  "type": "string",
                  "description": "The ID of the Enrollment"
                },
                "multiplier": {
                  "type": "number",
                  "description": "The multiplier that will be averaged against all others to get final percent of allocation given to enrollment"
                }
              },
              "required": [
                "enrollmentId",
                "multiplier"
              ]
            }
          },
          "requireAllEnrollmentIds": {
            "type": "boolean",
            "description": "If true, throw an error if some of the program's enrollment IDs are missing from the enrollments list"
          }
        },
        "required": [
          "amountToAllocate",
          "enrollments"
        ]
      },
      "LoyaltyRewardsSnapshotDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the LoyaltyRewardsSnapshot"
          },
          "created": {
            "type": "number",
            "description": "The date the LoyaltyRewardsSnapshot was created"
          },
          "programId": {
            "type": "string",
            "description": "The ID of the LoyaltyProgram the LoyaltyRewardsSnapshot belongs to"
          },
          "allocatedRewards": {
            "type": "string",
            "description": "The amount of rewards the LoyaltyRewardsSnapshot contains (in subunits - no decimals)"
          },
          "status": {
            "type": "object",
            "description": "The current status of the LoyaltyRewardsSnapshot"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message, if any status is Error"
          },
          "publishedTransactionHash": {
            "type": "string",
            "description": "The transaction hash used to publish this snapshot, if it has been published"
          }
        },
        "required": [
          "id",
          "created",
          "programId",
          "allocatedRewards",
          "status"
        ]
      },
      "PaginatedSnapshotsDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "A list of Reward Snapshots",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the LoyaltyRewardsSnapshot"
                },
                "created": {
                  "type": "number",
                  "description": "The date the LoyaltyRewardsSnapshot was created"
                },
                "programId": {
                  "type": "string",
                  "description": "The ID of the LoyaltyProgram the LoyaltyRewardsSnapshot belongs to"
                },
                "allocatedRewards": {
                  "type": "string",
                  "description": "The amount of rewards the LoyaltyRewardsSnapshot contains (in subunits - no decimals)"
                },
                "status": {
                  "type": "object",
                  "description": "The current status of the LoyaltyRewardsSnapshot"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "Error message, if any status is Error"
                },
                "publishedTransactionHash": {
                  "type": "string",
                  "description": "The transaction hash used to publish this snapshot, if it has been published"
                }
              },
              "required": [
                "id",
                "created",
                "programId",
                "allocatedRewards",
                "status"
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateLoyaltyProgramFundingDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of tokens to move (supports decimals)"
          }
        },
        "required": [
          "amount"
        ]
      },
      "CreateEnrollmentDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of tokens to enroll (decimals ok)"
          },
          "userId": {
            "type": "string",
            "description": "The reference user ID of the enrollment"
          },
          "enrollmentPeriod": {
            "type": "number",
            "description": "The period of enrollment in seconds"
          }
        },
        "required": [
          "amount",
          "userId",
          "enrollmentPeriod"
        ]
      },
      "EnrollmentConsentDto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The id for the transaction. Can be used to get the status of the transaction."
          },
          "consentUrl": {
            "type": "string",
            "description": "The url the user must visit to provide consent for the transaction."
          },
          "enrollmentId": {
            "type": "string",
            "description": "The enrollment ID created if the user's transaction completes successfully"
          }
        },
        "required": [
          "transactionId",
          "consentUrl",
          "enrollmentId"
        ]
      },
      "Enrollees": {
        "type": "object",
        "properties": {
          "uniqueUsers": {
            "type": "number",
            "description": "Total number of unique users who have enrolled in the program"
          }
        },
        "required": [
          "uniqueUsers"
        ]
      },
      "Enrollments": {
        "type": "object",
        "properties": {
          "totalEnrollments": {
            "type": "number",
            "description": "Total number of enrollments in the program"
          },
          "enrollmentPeriodComplete": {
            "type": "number",
            "description": "Total number of enrollments that have completed"
          },
          "enrollmentPeriodOngoing": {
            "type": "number",
            "description": "Total number of enrollments that are ongoing"
          },
          "totalEnrolledTokens": {
            "type": "string",
            "description": "Total number of enrollments enrolled in the program"
          }
        },
        "required": [
          "totalEnrollments",
          "enrollmentPeriodComplete",
          "enrollmentPeriodOngoing",
          "totalEnrolledTokens"
        ]
      },
      "LoyaltyProgramStatsSummaryDto": {
        "type": "object",
        "properties": {
          "enrollees": {
            "description": "Breakdown of enrollees",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "uniqueUsers": {
                    "type": "number",
                    "description": "Total number of unique users who have enrolled in the program"
                  }
                },
                "required": [
                  "uniqueUsers"
                ]
              }
            ]
          },
          "enrollments": {
            "description": "Breakdown of enrollments",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "totalEnrollments": {
                    "type": "number",
                    "description": "Total number of enrollments in the program"
                  },
                  "enrollmentPeriodComplete": {
                    "type": "number",
                    "description": "Total number of enrollments that have completed"
                  },
                  "enrollmentPeriodOngoing": {
                    "type": "number",
                    "description": "Total number of enrollments that are ongoing"
                  },
                  "totalEnrolledTokens": {
                    "type": "string",
                    "description": "Total number of enrollments enrolled in the program"
                  }
                },
                "required": [
                  "totalEnrollments",
                  "enrollmentPeriodComplete",
                  "enrollmentPeriodOngoing",
                  "totalEnrolledTokens"
                ]
              }
            ]
          },
          "rewards": {
            "description": "Breakdown of rewards",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "totalAllocated": {
                    "type": "string",
                    "description": "The total amount of rewards that have been allocated to enrollments"
                  },
                  "totalUnallocated": {
                    "type": "string",
                    "description": "The unallocated rewards that are just sitting in the program"
                  },
                  "totalClaimed": {
                    "type": "string",
                    "description": "The amount of rewards claimed from the program"
                  },
                  "rewardFunding": {
                    "type": "string",
                    "description": "The total amount of rewards that are currently in the program"
                  }
                },
                "required": [
                  "totalAllocated",
                  "totalUnallocated",
                  "totalClaimed",
                  "rewardFunding"
                ]
              }
            ]
          }
        },
        "required": [
          "enrollees",
          "enrollments",
          "rewards"
        ]
      },
      "CreateClaimDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount to claim (decimals ok)"
          }
        },
        "required": [
          "amount"
        ]
      },
      "CreateDisenrollmentDto": {
        "type": "object",
        "properties": {
          "forfeitRewardsOnDisenroll": {
            "type": "boolean",
            "description": "Whether to allow unclaimed rewards to be forfeited",
            "default": false
          }
        },
        "required": [
          "forfeitRewardsOnDisenroll"
        ]
      },
      "CreateStackableAssetDto": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Add attributes to your Asset",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "traitType": {
                  "type": "string",
                  "description": "The name of the trait"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the trait"
                }
              },
              "required": [
                "traitType",
                "value"
              ]
            }
          },
          "collectionId": {
            "type": "string",
            "description": "Add the Asset to an existing collection"
          },
          "description": {
            "type": "string",
            "description": "A description for the Asset",
            "maxLength": 64
          },
          "imageUrl": {
            "type": "string",
            "description": "A url to the image underlying the Asset"
          },
          "name": {
            "type": "string",
            "description": "The name of the Asset. Max length: 32 chars",
            "maxLength": 32
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the Asset. Max length: 5 chars",
            "maxLength": 5
          }
        },
        "required": [
          "collectionId",
          "description",
          "imageUrl",
          "name"
        ]
      },
      "IssueStackableAssetDto": {
        "type": "object",
        "properties": {
          "destinationUserReferenceId": {
            "type": "string",
            "minLength": 1,
            "description": "The reference id of the user the asset should be assigned to"
          },
          "amount": {
            "type": "number",
            "minimum": 1,
            "description": "The amount of currency to be transferred"
          }
        },
        "required": [
          "destinationUserReferenceId",
          "amount"
        ]
      },
      "ConsumeCurrencyItemWithDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Currency"
            ],
            "description": "Specifies that this is a currency"
          },
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "Identifies the currency to consume"
          },
          "naturalAmount": {
            "type": "string",
            "description": "The amount of the currency to consume"
          },
          "currency": {
            "description": "Details about the currency",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID for the currency"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address for the currency's SPL token mint"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the currency"
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The currency's symbol"
                  }
                },
                "required": [
                  "id",
                  "mintAddress",
                  "name",
                  "symbol"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "id",
          "naturalAmount",
          "currency"
        ]
      },
      "ConsumeStackableAssetItemWithDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "StackableAsset"
            ],
            "description": "Specifies that this is a stackable asset"
          },
          "id": {
            "type": "string",
            "description": "Identifies the stackable asset to consume"
          },
          "naturalAmount": {
            "type": "string",
            "description": "The amount of the stackable asset to consume"
          }
        },
        "required": [
          "type",
          "id",
          "naturalAmount"
        ]
      },
      "ConsumeUniqueAssetItemWithDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UniqueAsset"
            ],
            "description": "Specifies that this is a unique asset."
          },
          "id": {
            "type": "string",
            "description": "Identifies the unique asset to consume."
          },
          "method": {
            "enum": [
              "Transfer",
              "Destroy"
            ],
            "type": "string",
            "description": "(Optional) Determines how the unique asset will be consumed.",
            "nullable": true
          },
          "uniqueAsset": {
            "description": "Details about the unique asset being consumed",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Asset"
                  },
                  "attributes": {
                    "description": "The attributes of the Asset",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "created": {
                    "type": "number",
                    "description": "The date the Asset was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Asset"
                  },
                  "collection": {
                    "description": "The collection the Asset belongs to",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name given to the collection"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description given to the collection"
                          },
                          "environment": {
                            "type": "string",
                            "description": "The collection's environment",
                            "enum": [
                              "Development",
                              "Production"
                            ]
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "The url of the image used to represent the collection",
                            "nullable": true
                          },
                          "imported": {
                            "type": "boolean",
                            "description": "Whether the collection was imported"
                          },
                          "mintAddress": {
                            "type": "string",
                            "description": "The mint address of the collection on-chain",
                            "nullable": true
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of collection creation"
                          },
                          "stats": {
                            "description": "Statistics about the collection",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "numMinted": {
                                    "type": "number",
                                    "description": "The number of assets minted for this collection"
                                  },
                                  "floorPrice": {
                                    "type": "number",
                                    "description": "The floor price of the collection"
                                  },
                                  "numListed": {
                                    "type": "number",
                                    "description": "The number of assets listed for this collection"
                                  },
                                  "numOwners": {
                                    "type": "number",
                                    "description": "The number of unique owners of assets in this collection"
                                  }
                                },
                                "required": [
                                  "numMinted",
                                  "floorPrice",
                                  "numListed",
                                  "numOwners"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "environment",
                          "imported",
                          "created"
                        ]
                      }
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "The description provided when the Asset was created"
                  },
                  "environment": {
                    "type": "string",
                    "description": "The asset's environment",
                    "enum": [
                      "Development",
                      "Production"
                    ]
                  },
                  "imported": {
                    "type": "boolean",
                    "description": "Indicates if the asset belongs to an imported collection"
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "The URI for the image representing the Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the Asset",
                    "enum": [
                      "Uninitiated",
                      "Unprocessed",
                      "Processing",
                      "Committed",
                      "Failed"
                    ]
                  },
                  "forSale": {
                    "type": "boolean",
                    "description": "Indicates if the asset is currently for sale"
                  },
                  "mintAddress": {
                    "type": "string",
                    "description": "The address of the Asset on the blockchain"
                  },
                  "owner": {
                    "description": "The current owner of the Asset.",
                    "nullable": true,
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "The wallet that currently holds this asset",
                            "nullable": true
                          },
                          "referenceId": {
                            "type": "string",
                            "description": "The reference id associated with the wallet",
                            "nullable": true
                          }
                        }
                      }
                    ]
                  },
                  "price": {
                    "nullable": true,
                    "type": "object",
                    "description": "The price of the asset on the marketplace"
                  }
                },
                "required": [
                  "id",
                  "created",
                  "name",
                  "description",
                  "environment",
                  "imported",
                  "imageUrl",
                  "status",
                  "forSale",
                  "mintAddress"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "id",
          "uniqueAsset"
        ]
      },
      "RecipeMetadata": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Associated attributes for the recipe.",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "traitType": {
                  "type": "string",
                  "description": "The name of the trait"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the trait"
                }
              },
              "required": [
                "traitType",
                "value"
              ]
            }
          },
          "title": {
            "type": "string",
            "description": "A title to display for the recipe.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description to display for the recipe.",
            "nullable": true
          },
          "image": {
            "type": "string",
            "description": "An image to display for the recipe.",
            "nullable": true
          }
        }
      },
      "CraftingRecipeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the recipe."
          },
          "consumes": {
            "type": "array",
            "description": "What this recipe will consume.",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "Currency"
                      ],
                      "description": "Specifies that this is a currency"
                    },
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Identifies the currency to consume"
                    },
                    "naturalAmount": {
                      "type": "string",
                      "description": "The amount of the currency to consume"
                    },
                    "currency": {
                      "description": "Details about the currency",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID for the currency"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The address for the currency's SPL token mint"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the currency"
                            },
                            "symbol": {
                              "type": "string",
                              "description": "The currency's symbol"
                            }
                          },
                          "required": [
                            "id",
                            "mintAddress",
                            "name",
                            "symbol"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "naturalAmount",
                    "currency"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "StackableAsset"
                      ],
                      "description": "Specifies that this is a stackable asset"
                    },
                    "id": {
                      "type": "string",
                      "description": "Identifies the stackable asset to consume"
                    },
                    "naturalAmount": {
                      "type": "string",
                      "description": "The amount of the stackable asset to consume"
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "naturalAmount"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "UniqueAsset"
                      ],
                      "description": "Specifies that this is a unique asset."
                    },
                    "id": {
                      "type": "string",
                      "description": "Identifies the unique asset to consume."
                    },
                    "method": {
                      "enum": [
                        "Transfer",
                        "Destroy"
                      ],
                      "type": "string",
                      "description": "(Optional) Determines how the unique asset will be consumed.",
                      "nullable": true
                    },
                    "uniqueAsset": {
                      "description": "Details about the unique asset being consumed",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the Asset"
                            },
                            "attributes": {
                              "description": "The attributes of the Asset",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "traitType": {
                                    "type": "string",
                                    "description": "The name of the trait"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The value of the trait"
                                  }
                                },
                                "required": [
                                  "traitType",
                                  "value"
                                ]
                              }
                            },
                            "created": {
                              "type": "number",
                              "description": "The date the Asset was created"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the Asset"
                            },
                            "collection": {
                              "description": "The collection the Asset belongs to",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name given to the collection"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description given to the collection"
                                    },
                                    "environment": {
                                      "type": "string",
                                      "description": "The collection's environment",
                                      "enum": [
                                        "Development",
                                        "Production"
                                      ]
                                    },
                                    "imageUrl": {
                                      "type": "string",
                                      "description": "The url of the image used to represent the collection",
                                      "nullable": true
                                    },
                                    "imported": {
                                      "type": "boolean",
                                      "description": "Whether the collection was imported"
                                    },
                                    "mintAddress": {
                                      "type": "string",
                                      "description": "The mint address of the collection on-chain",
                                      "nullable": true
                                    },
                                    "created": {
                                      "type": "number",
                                      "description": "Timestamp of collection creation"
                                    },
                                    "stats": {
                                      "description": "Statistics about the collection",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "numMinted": {
                                              "type": "number",
                                              "description": "The number of assets minted for this collection"
                                            },
                                            "floorPrice": {
                                              "type": "number",
                                              "description": "The floor price of the collection"
                                            },
                                            "numListed": {
                                              "type": "number",
                                              "description": "The number of assets listed for this collection"
                                            },
                                            "numOwners": {
                                              "type": "number",
                                              "description": "The number of unique owners of assets in this collection"
                                            }
                                          },
                                          "required": [
                                            "numMinted",
                                            "floorPrice",
                                            "numListed",
                                            "numOwners"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "description",
                                    "environment",
                                    "imported",
                                    "created"
                                  ]
                                }
                              ]
                            },
                            "description": {
                              "type": "string",
                              "description": "The description provided when the Asset was created"
                            },
                            "environment": {
                              "type": "string",
                              "description": "The asset's environment",
                              "enum": [
                                "Development",
                                "Production"
                              ]
                            },
                            "imported": {
                              "type": "boolean",
                              "description": "Indicates if the asset belongs to an imported collection"
                            },
                            "imageUrl": {
                              "type": "string",
                              "description": "The URI for the image representing the Asset"
                            },
                            "status": {
                              "type": "string",
                              "description": "The current status of the Asset",
                              "enum": [
                                "Uninitiated",
                                "Unprocessed",
                                "Processing",
                                "Committed",
                                "Failed"
                              ]
                            },
                            "forSale": {
                              "type": "boolean",
                              "description": "Indicates if the asset is currently for sale"
                            },
                            "mintAddress": {
                              "type": "string",
                              "description": "The address of the Asset on the blockchain"
                            },
                            "owner": {
                              "description": "The current owner of the Asset.",
                              "nullable": true,
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "type": "string",
                                      "description": "The wallet that currently holds this asset",
                                      "nullable": true
                                    },
                                    "referenceId": {
                                      "type": "string",
                                      "description": "The reference id associated with the wallet",
                                      "nullable": true
                                    }
                                  }
                                }
                              ]
                            },
                            "price": {
                              "nullable": true,
                              "type": "object",
                              "description": "The price of the asset on the marketplace"
                            }
                          },
                          "required": [
                            "id",
                            "created",
                            "name",
                            "description",
                            "environment",
                            "imported",
                            "imageUrl",
                            "status",
                            "forSale",
                            "mintAddress"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "uniqueAsset"
                  ]
                }
              ]
            }
          },
          "craftingUserReferenceId": {
            "type": "string",
            "description": "Idetifies the user that will fulfill the crafting recipe."
          },
          "metadata": {
            "description": "Metadata to describe the recipe.",
            "nullable": true,
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "attributes": {
                    "description": "Associated attributes for the recipe.",
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "title": {
                    "type": "string",
                    "description": "A title to display for the recipe.",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "description": "A description to display for the recipe.",
                    "nullable": true
                  },
                  "image": {
                    "type": "string",
                    "description": "An image to display for the recipe.",
                    "nullable": true
                  }
                }
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the recipe.",
            "enum": [
              "Pending",
              "Submitting",
              "Failed",
              "Completed",
              "PartiallyCompleted",
              "Expired"
            ]
          },
          "transactions": {
            "description": "The transactions that are must be complete to fulfill the recipe.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Transaction ID"
                },
                "created": {
                  "type": "string",
                  "description": "Transaction creation date",
                  "format": "date-time"
                },
                "status": {
                  "description": "Transaction confirmation status",
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "Confirmed"
                          ]
                        },
                        "txHash": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "status",
                        "txHash"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "Pending"
                          ]
                        }
                      },
                      "required": [
                        "status"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "Failed"
                          ]
                        },
                        "error": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "status",
                        "error"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "Expired"
                          ]
                        }
                      },
                      "required": [
                        "status"
                      ]
                    }
                  ]
                },
                "details": {
                  "description": "Transaction type and details about asset and balance changes",
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "BuyAsset",
                            "BuyAssetWithCreditCard",
                            "CancelAssetSale",
                            "ChangeAssetPrice",
                            "ListAssetSale",
                            "TransferAsset",
                            "TransferAssetFromDeveloper"
                          ]
                        },
                        "item": {
                          "description": "Asset details",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the Asset"
                                },
                                "attributes": {
                                  "description": "The attributes of the Asset",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "traitType": {
                                        "type": "string",
                                        "description": "The name of the trait"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "The value of the trait"
                                      }
                                    },
                                    "required": [
                                      "traitType",
                                      "value"
                                    ]
                                  }
                                },
                                "created": {
                                  "type": "number",
                                  "description": "The date the Asset was created"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the Asset"
                                },
                                "collection": {
                                  "description": "The collection the Asset belongs to",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name given to the collection"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "The description given to the collection"
                                        },
                                        "environment": {
                                          "type": "string",
                                          "description": "The collection's environment",
                                          "enum": [
                                            "Development",
                                            "Production"
                                          ]
                                        },
                                        "imageUrl": {
                                          "type": "string",
                                          "description": "The url of the image used to represent the collection",
                                          "nullable": true
                                        },
                                        "imported": {
                                          "type": "boolean",
                                          "description": "Whether the collection was imported"
                                        },
                                        "mintAddress": {
                                          "type": "string",
                                          "description": "The mint address of the collection on-chain",
                                          "nullable": true
                                        },
                                        "created": {
                                          "type": "number",
                                          "description": "Timestamp of collection creation"
                                        },
                                        "stats": {
                                          "description": "Statistics about the collection",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "numMinted": {
                                                  "type": "number",
                                                  "description": "The number of assets minted for this collection"
                                                },
                                                "floorPrice": {
                                                  "type": "number",
                                                  "description": "The floor price of the collection"
                                                },
                                                "numListed": {
                                                  "type": "number",
                                                  "description": "The number of assets listed for this collection"
                                                },
                                                "numOwners": {
                                                  "type": "number",
                                                  "description": "The number of unique owners of assets in this collection"
                                                }
                                              },
                                              "required": [
                                                "numMinted",
                                                "floorPrice",
                                                "numListed",
                                                "numOwners"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "description",
                                        "environment",
                                        "imported",
                                        "created"
                                      ]
                                    }
                                  ]
                                },
                                "description": {
                                  "type": "string",
                                  "description": "The description provided when the Asset was created"
                                },
                                "environment": {
                                  "type": "string",
                                  "description": "The asset's environment",
                                  "enum": [
                                    "Development",
                                    "Production"
                                  ]
                                },
                                "imported": {
                                  "type": "boolean",
                                  "description": "Whether the Asset was imported"
                                },
                                "imageUrl": {
                                  "type": "string",
                                  "description": "The URI for the image representing the Asset"
                                },
                                "status": {
                                  "type": "string",
                                  "description": "The current status of the Asset",
                                  "enum": [
                                    "Uninitiated",
                                    "Unprocessed",
                                    "Processing",
                                    "Committed",
                                    "Failed"
                                  ]
                                },
                                "escrow": {
                                  "type": "boolean",
                                  "description": "If the asset is in escrow or not"
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address of the Asset on the blockchain"
                                },
                                "owner": {
                                  "description": "The current owner of the Asset.",
                                  "nullable": true,
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "The wallet that currently holds this asset",
                                          "nullable": true
                                        },
                                        "referenceId": {
                                          "type": "string",
                                          "description": "The reference id associated with the wallet",
                                          "nullable": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                "priceCents": {
                                  "type": "number",
                                  "nullable": true,
                                  "description": "The price of the asset on the marketplace in cents"
                                }
                              },
                              "required": [
                                "id",
                                "created",
                                "name",
                                "description",
                                "environment",
                                "imported",
                                "imageUrl",
                                "status",
                                "escrow",
                                "mintAddress"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "item"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "TransferToken",
                            "TransferTokenFromDeveloper"
                          ]
                        },
                        "item": {
                          "description": "Token details",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID for the currency"
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address for the currency's SPL token mint"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the currency"
                                },
                                "symbol": {
                                  "type": "string",
                                  "description": "The currency's symbol"
                                }
                              },
                              "required": [
                                "id",
                                "mintAddress",
                                "name",
                                "symbol"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "item"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "TransferStackableAsset",
                            "TransferStackableAssetFromDeveloper"
                          ]
                        },
                        "item": {
                          "description": "StackableAsset details",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the Stackable Asset"
                                },
                                "attributes": {
                                  "description": "Add attributes to your Asset",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "traitType": {
                                        "type": "string",
                                        "description": "The name of the trait"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "The value of the trait"
                                      }
                                    },
                                    "required": [
                                      "traitType",
                                      "value"
                                    ]
                                  }
                                },
                                "created": {
                                  "type": "number",
                                  "description": "The date the Asset was created"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the Stackable Asset. Max length: 32 chars",
                                  "maxLength": 32
                                },
                                "symbol": {
                                  "type": "string",
                                  "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                  "maxLength": 5
                                },
                                "description": {
                                  "type": "string",
                                  "description": "A description for the Asset",
                                  "maxLength": 64
                                },
                                "collection": {
                                  "description": "The collection the Asset belongs to",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name given to the collection"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "The description given to the collection"
                                        },
                                        "environment": {
                                          "type": "string",
                                          "description": "The collection's environment",
                                          "enum": [
                                            "Development",
                                            "Production"
                                          ]
                                        },
                                        "imageUrl": {
                                          "type": "string",
                                          "description": "The url of the image used to represent the collection",
                                          "nullable": true
                                        },
                                        "imported": {
                                          "type": "boolean",
                                          "description": "Whether the collection was imported"
                                        },
                                        "mintAddress": {
                                          "type": "string",
                                          "description": "The mint address of the collection on-chain",
                                          "nullable": true
                                        },
                                        "created": {
                                          "type": "number",
                                          "description": "Timestamp of collection creation"
                                        },
                                        "stats": {
                                          "description": "Statistics about the collection",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "numMinted": {
                                                  "type": "number",
                                                  "description": "The number of assets minted for this collection"
                                                },
                                                "floorPrice": {
                                                  "type": "number",
                                                  "description": "The floor price of the collection"
                                                },
                                                "numListed": {
                                                  "type": "number",
                                                  "description": "The number of assets listed for this collection"
                                                },
                                                "numOwners": {
                                                  "type": "number",
                                                  "description": "The number of unique owners of assets in this collection"
                                                }
                                              },
                                              "required": [
                                                "numMinted",
                                                "floorPrice",
                                                "numListed",
                                                "numOwners"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "description",
                                        "environment",
                                        "imported",
                                        "created"
                                      ]
                                    }
                                  ]
                                },
                                "environment": {
                                  "type": "string",
                                  "description": "The asset's environment",
                                  "enum": [
                                    "Development",
                                    "Production"
                                  ]
                                },
                                "imageUrl": {
                                  "type": "string",
                                  "description": "A url to the image underlying the Asset"
                                },
                                "status": {
                                  "type": "string",
                                  "description": "The current status of the Asset",
                                  "enum": [
                                    "Uninitiated",
                                    "Unprocessed",
                                    "Processing",
                                    "Committed",
                                    "Failed"
                                  ]
                                },
                                "mintAddress": {
                                  "type": "string",
                                  "description": "The address of the Asset on the blockchain"
                                }
                              },
                              "required": [
                                "id",
                                "created",
                                "name",
                                "description",
                                "environment",
                                "imageUrl",
                                "status"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "item"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "AbitraryTransaction"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Withdraw"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  ]
                }
              },
              "required": [
                "id",
                "created",
                "status",
                "details"
              ]
            }
          }
        },
        "required": [
          "id",
          "consumes",
          "craftingUserReferenceId",
          "status",
          "transactions"
        ]
      },
      "PaginatedCraftingRecipeDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "A list of Crafting Recipes",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Identifies the recipe."
                },
                "consumes": {
                  "type": "array",
                  "description": "What this recipe will consume.",
                  "items": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "Currency"
                            ],
                            "description": "Specifies that this is a currency"
                          },
                          "id": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Identifies the currency to consume"
                          },
                          "naturalAmount": {
                            "type": "string",
                            "description": "The amount of the currency to consume"
                          },
                          "currency": {
                            "description": "Details about the currency",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The ID for the currency"
                                  },
                                  "mintAddress": {
                                    "type": "string",
                                    "description": "The address for the currency's SPL token mint"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the currency"
                                  },
                                  "symbol": {
                                    "type": "string",
                                    "description": "The currency's symbol"
                                  }
                                },
                                "required": [
                                  "id",
                                  "mintAddress",
                                  "name",
                                  "symbol"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "id",
                          "naturalAmount",
                          "currency"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "StackableAsset"
                            ],
                            "description": "Specifies that this is a stackable asset"
                          },
                          "id": {
                            "type": "string",
                            "description": "Identifies the stackable asset to consume"
                          },
                          "naturalAmount": {
                            "type": "string",
                            "description": "The amount of the stackable asset to consume"
                          }
                        },
                        "required": [
                          "type",
                          "id",
                          "naturalAmount"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "UniqueAsset"
                            ],
                            "description": "Specifies that this is a unique asset."
                          },
                          "id": {
                            "type": "string",
                            "description": "Identifies the unique asset to consume."
                          },
                          "method": {
                            "enum": [
                              "Transfer",
                              "Destroy"
                            ],
                            "type": "string",
                            "description": "(Optional) Determines how the unique asset will be consumed.",
                            "nullable": true
                          },
                          "uniqueAsset": {
                            "description": "Details about the unique asset being consumed",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The ID of the Asset"
                                  },
                                  "attributes": {
                                    "description": "The attributes of the Asset",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "traitType": {
                                          "type": "string",
                                          "description": "The name of the trait"
                                        },
                                        "value": {
                                          "type": "string",
                                          "description": "The value of the trait"
                                        }
                                      },
                                      "required": [
                                        "traitType",
                                        "value"
                                      ]
                                    }
                                  },
                                  "created": {
                                    "type": "number",
                                    "description": "The date the Asset was created"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the Asset"
                                  },
                                  "collection": {
                                    "description": "The collection the Asset belongs to",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "The name given to the collection"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "The description given to the collection"
                                          },
                                          "environment": {
                                            "type": "string",
                                            "description": "The collection's environment",
                                            "enum": [
                                              "Development",
                                              "Production"
                                            ]
                                          },
                                          "imageUrl": {
                                            "type": "string",
                                            "description": "The url of the image used to represent the collection",
                                            "nullable": true
                                          },
                                          "imported": {
                                            "type": "boolean",
                                            "description": "Whether the collection was imported"
                                          },
                                          "mintAddress": {
                                            "type": "string",
                                            "description": "The mint address of the collection on-chain",
                                            "nullable": true
                                          },
                                          "created": {
                                            "type": "number",
                                            "description": "Timestamp of collection creation"
                                          },
                                          "stats": {
                                            "description": "Statistics about the collection",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "numMinted": {
                                                    "type": "number",
                                                    "description": "The number of assets minted for this collection"
                                                  },
                                                  "floorPrice": {
                                                    "type": "number",
                                                    "description": "The floor price of the collection"
                                                  },
                                                  "numListed": {
                                                    "type": "number",
                                                    "description": "The number of assets listed for this collection"
                                                  },
                                                  "numOwners": {
                                                    "type": "number",
                                                    "description": "The number of unique owners of assets in this collection"
                                                  }
                                                },
                                                "required": [
                                                  "numMinted",
                                                  "floorPrice",
                                                  "numListed",
                                                  "numOwners"
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "name",
                                          "description",
                                          "environment",
                                          "imported",
                                          "created"
                                        ]
                                      }
                                    ]
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "The description provided when the Asset was created"
                                  },
                                  "environment": {
                                    "type": "string",
                                    "description": "The asset's environment",
                                    "enum": [
                                      "Development",
                                      "Production"
                                    ]
                                  },
                                  "imported": {
                                    "type": "boolean",
                                    "description": "Indicates if the asset belongs to an imported collection"
                                  },
                                  "imageUrl": {
                                    "type": "string",
                                    "description": "The URI for the image representing the Asset"
                                  },
                                  "status": {
                                    "type": "string",
                                    "description": "The current status of the Asset",
                                    "enum": [
                                      "Uninitiated",
                                      "Unprocessed",
                                      "Processing",
                                      "Committed",
                                      "Failed"
                                    ]
                                  },
                                  "forSale": {
                                    "type": "boolean",
                                    "description": "Indicates if the asset is currently for sale"
                                  },
                                  "mintAddress": {
                                    "type": "string",
                                    "description": "The address of the Asset on the blockchain"
                                  },
                                  "owner": {
                                    "description": "The current owner of the Asset.",
                                    "nullable": true,
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "type": "string",
                                            "description": "The wallet that currently holds this asset",
                                            "nullable": true
                                          },
                                          "referenceId": {
                                            "type": "string",
                                            "description": "The reference id associated with the wallet",
                                            "nullable": true
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "price": {
                                    "nullable": true,
                                    "type": "object",
                                    "description": "The price of the asset on the marketplace"
                                  }
                                },
                                "required": [
                                  "id",
                                  "created",
                                  "name",
                                  "description",
                                  "environment",
                                  "imported",
                                  "imageUrl",
                                  "status",
                                  "forSale",
                                  "mintAddress"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "id",
                          "uniqueAsset"
                        ]
                      }
                    ]
                  }
                },
                "craftingUserReferenceId": {
                  "type": "string",
                  "description": "Idetifies the user that will fulfill the crafting recipe."
                },
                "metadata": {
                  "description": "Metadata to describe the recipe.",
                  "nullable": true,
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "attributes": {
                          "description": "Associated attributes for the recipe.",
                          "nullable": true,
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "traitType": {
                                "type": "string",
                                "description": "The name of the trait"
                              },
                              "value": {
                                "type": "string",
                                "description": "The value of the trait"
                              }
                            },
                            "required": [
                              "traitType",
                              "value"
                            ]
                          }
                        },
                        "title": {
                          "type": "string",
                          "description": "A title to display for the recipe.",
                          "nullable": true
                        },
                        "description": {
                          "type": "string",
                          "description": "A description to display for the recipe.",
                          "nullable": true
                        },
                        "image": {
                          "type": "string",
                          "description": "An image to display for the recipe.",
                          "nullable": true
                        }
                      }
                    }
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "The status of the recipe.",
                  "enum": [
                    "Pending",
                    "Submitting",
                    "Failed",
                    "Completed",
                    "PartiallyCompleted",
                    "Expired"
                  ]
                },
                "transactions": {
                  "description": "The transactions that are must be complete to fulfill the recipe.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Transaction ID"
                      },
                      "created": {
                        "type": "string",
                        "description": "Transaction creation date",
                        "format": "date-time"
                      },
                      "status": {
                        "description": "Transaction confirmation status",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Confirmed"
                                ]
                              },
                              "txHash": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "txHash"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Pending"
                                ]
                              }
                            },
                            "required": [
                              "status"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Failed"
                                ]
                              },
                              "error": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "status",
                              "error"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Expired"
                                ]
                              }
                            },
                            "required": [
                              "status"
                            ]
                          }
                        ]
                      },
                      "details": {
                        "description": "Transaction type and details about asset and balance changes",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "BuyAsset",
                                  "BuyAssetWithCreditCard",
                                  "CancelAssetSale",
                                  "ChangeAssetPrice",
                                  "ListAssetSale",
                                  "TransferAsset",
                                  "TransferAssetFromDeveloper"
                                ]
                              },
                              "item": {
                                "description": "Asset details",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Asset"
                                      },
                                      "attributes": {
                                        "description": "The attributes of the Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Asset"
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "The description provided when the Asset was created"
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imported": {
                                        "type": "boolean",
                                        "description": "Whether the Asset was imported"
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "The URI for the image representing the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "escrow": {
                                        "type": "boolean",
                                        "description": "If the asset is in escrow or not"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      },
                                      "owner": {
                                        "description": "The current owner of the Asset.",
                                        "nullable": true,
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "The wallet that currently holds this asset",
                                                "nullable": true
                                              },
                                              "referenceId": {
                                                "type": "string",
                                                "description": "The reference id associated with the wallet",
                                                "nullable": true
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "priceCents": {
                                        "type": "number",
                                        "nullable": true,
                                        "description": "The price of the asset on the marketplace in cents"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imported",
                                      "imageUrl",
                                      "status",
                                      "escrow",
                                      "mintAddress"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "item"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "TransferToken",
                                  "TransferTokenFromDeveloper"
                                ]
                              },
                              "item": {
                                "description": "Token details",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID for the currency"
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address for the currency's SPL token mint"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the currency"
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The currency's symbol"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "mintAddress",
                                      "name",
                                      "symbol"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "item"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "TransferStackableAsset",
                                  "TransferStackableAssetFromDeveloper"
                                ]
                              },
                              "item": {
                                "description": "StackableAsset details",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the Stackable Asset"
                                      },
                                      "attributes": {
                                        "description": "Add attributes to your Asset",
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "traitType": {
                                              "type": "string",
                                              "description": "The name of the trait"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "The value of the trait"
                                            }
                                          },
                                          "required": [
                                            "traitType",
                                            "value"
                                          ]
                                        }
                                      },
                                      "created": {
                                        "type": "number",
                                        "description": "The date the Asset was created"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the Stackable Asset. Max length: 32 chars",
                                        "maxLength": 32
                                      },
                                      "symbol": {
                                        "type": "string",
                                        "description": "The symbol of the Stackable Asset. Max length: 5 chars",
                                        "maxLength": 5
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "A description for the Asset",
                                        "maxLength": 64
                                      },
                                      "collection": {
                                        "description": "The collection the Asset belongs to",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The id of the collection. This is not an on-chain address, but instead an ID internal to GameShift"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name given to the collection"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "The description given to the collection"
                                              },
                                              "environment": {
                                                "type": "string",
                                                "description": "The collection's environment",
                                                "enum": [
                                                  "Development",
                                                  "Production"
                                                ]
                                              },
                                              "imageUrl": {
                                                "type": "string",
                                                "description": "The url of the image used to represent the collection",
                                                "nullable": true
                                              },
                                              "imported": {
                                                "type": "boolean",
                                                "description": "Whether the collection was imported"
                                              },
                                              "mintAddress": {
                                                "type": "string",
                                                "description": "The mint address of the collection on-chain",
                                                "nullable": true
                                              },
                                              "created": {
                                                "type": "number",
                                                "description": "Timestamp of collection creation"
                                              },
                                              "stats": {
                                                "description": "Statistics about the collection",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "numMinted": {
                                                        "type": "number",
                                                        "description": "The number of assets minted for this collection"
                                                      },
                                                      "floorPrice": {
                                                        "type": "number",
                                                        "description": "The floor price of the collection"
                                                      },
                                                      "numListed": {
                                                        "type": "number",
                                                        "description": "The number of assets listed for this collection"
                                                      },
                                                      "numOwners": {
                                                        "type": "number",
                                                        "description": "The number of unique owners of assets in this collection"
                                                      }
                                                    },
                                                    "required": [
                                                      "numMinted",
                                                      "floorPrice",
                                                      "numListed",
                                                      "numOwners"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "name",
                                              "description",
                                              "environment",
                                              "imported",
                                              "created"
                                            ]
                                          }
                                        ]
                                      },
                                      "environment": {
                                        "type": "string",
                                        "description": "The asset's environment",
                                        "enum": [
                                          "Development",
                                          "Production"
                                        ]
                                      },
                                      "imageUrl": {
                                        "type": "string",
                                        "description": "A url to the image underlying the Asset"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "The current status of the Asset",
                                        "enum": [
                                          "Uninitiated",
                                          "Unprocessed",
                                          "Processing",
                                          "Committed",
                                          "Failed"
                                        ]
                                      },
                                      "mintAddress": {
                                        "type": "string",
                                        "description": "The address of the Asset on the blockchain"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "created",
                                      "name",
                                      "description",
                                      "environment",
                                      "imageUrl",
                                      "status"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "item"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "AbitraryTransaction"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "Withdraw"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "created",
                      "status",
                      "details"
                    ]
                  }
                }
              },
              "required": [
                "id",
                "consumes",
                "craftingUserReferenceId",
                "status",
                "transactions"
              ]
            }
          },
          "meta": {
            "description": "Pagination related metadata",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number",
                    "description": "The page number fetched"
                  },
                  "perPage": {
                    "type": "number",
                    "description": "The number of items in each page"
                  },
                  "totalPages": {
                    "type": "number",
                    "description": "The total number of pages in all results"
                  },
                  "totalResults": {
                    "type": "number",
                    "description": "The total result count"
                  }
                },
                "required": [
                  "page",
                  "perPage",
                  "totalPages",
                  "totalResults"
                ]
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "ConsumeCurrencyItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Currency"
            ],
            "description": "Specifies that this is a currency"
          },
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "Identifies the currency to consume"
          },
          "naturalAmount": {
            "type": "string",
            "description": "The amount of the currency to consume"
          }
        },
        "required": [
          "type",
          "id",
          "naturalAmount"
        ]
      },
      "ConsumeStackableAssetItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "StackableAsset"
            ],
            "description": "Specifies that this is a stackable asset"
          },
          "id": {
            "type": "string",
            "description": "Identifies the stackable asset to consume"
          },
          "naturalAmount": {
            "type": "string",
            "description": "The amount of the stackable asset to consume"
          }
        },
        "required": [
          "type",
          "id",
          "naturalAmount"
        ]
      },
      "ConsumeUniqueAssetItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UniqueAsset"
            ],
            "description": "Specifies that this is a unique asset."
          },
          "id": {
            "type": "string",
            "description": "Identifies the unique asset to consume."
          },
          "method": {
            "enum": [
              "Transfer",
              "Destroy"
            ],
            "type": "string",
            "description": "(Optional) Determines how the unique asset will be consumed.",
            "nullable": true
          }
        },
        "required": [
          "type",
          "id"
        ]
      },
      "CreateRecipeDto": {
        "type": "object",
        "properties": {
          "craftingUserReferenceId": {
            "type": "string",
            "minLength": 1,
            "description": "Idetifies the user that will fulfill the crafting recipe."
          },
          "metadata": {
            "nullable": true,
            "description": "Optional metadata to add to the recipe.",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "attributes": {
                    "description": "Associated attributes for the recipe.",
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traitType": {
                          "type": "string",
                          "description": "The name of the trait"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the trait"
                        }
                      },
                      "required": [
                        "traitType",
                        "value"
                      ]
                    }
                  },
                  "title": {
                    "type": "string",
                    "description": "A title to display for the recipe.",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "description": "A description to display for the recipe.",
                    "nullable": true
                  },
                  "image": {
                    "type": "string",
                    "description": "An image to display for the recipe.",
                    "nullable": true
                  }
                }
              }
            ]
          },
          "consumes": {
            "type": "array",
            "description": "What this recipe will consume.",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "Currency"
                      ],
                      "description": "Specifies that this is a currency"
                    },
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Identifies the currency to consume"
                    },
                    "naturalAmount": {
                      "type": "string",
                      "description": "The amount of the currency to consume"
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "naturalAmount"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "StackableAsset"
                      ],
                      "description": "Specifies that this is a stackable asset"
                    },
                    "id": {
                      "type": "string",
                      "description": "Identifies the stackable asset to consume"
                    },
                    "naturalAmount": {
                      "type": "string",
                      "description": "The amount of the stackable asset to consume"
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "naturalAmount"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "UniqueAsset"
                      ],
                      "description": "Specifies that this is a unique asset."
                    },
                    "id": {
                      "type": "string",
                      "description": "Identifies the unique asset to consume."
                    },
                    "method": {
                      "enum": [
                        "Transfer",
                        "Destroy"
                      ],
                      "type": "string",
                      "description": "(Optional) Determines how the unique asset will be consumed.",
                      "nullable": true
                    }
                  },
                  "required": [
                    "type",
                    "id"
                  ]
                }
              ]
            }
          }
        },
        "required": [
          "craftingUserReferenceId",
          "consumes"
        ]
      },
      "CraftingConsentDto": {
        "type": "object",
        "properties": {
          "craftingRecipeId": {
            "type": "string",
            "description": "The id for the crafting recipe. Can be used to get the status of the recipe."
          },
          "consentUrl": {
            "type": "string",
            "description": "The url the user must visit to provide consent and complete the recipe."
          }
        },
        "required": [
          "craftingRecipeId",
          "consentUrl"
        ]
      }
    }
  }
}